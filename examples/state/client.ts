/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import AlgoKitComposer, { AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"StateApp","structs":{},"methods":[{"name":"call_abi","args":[{"name":"value","type":"string"}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"call_abi_txn","args":[{"name":"txn","type":"pay"},{"name":"value","type":"string"}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"call_with_references","args":[{"name":"asset","type":"asset"},{"name":"account","type":"account"},{"name":"application","type":"application"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_global","args":[{"name":"int1","type":"uint64"},{"name":"int2","type":"uint64"},{"name":"bytes1","type":"string"},{"name":"bytes2","type":"byte[4]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_local","args":[{"name":"int1","type":"uint64"},{"name":"int2","type":"uint64"},{"name":"bytes1","type":"string"},{"name":"bytes2","type":"byte[4]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_box","args":[{"name":"name","type":"byte[4]"},{"name":"value","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"error","args":[],"returns":{"type":"void"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value","args":[{"name":"arg_with_default","type":"string","defaultValue":{"source":"literal","data":"ZGVmYXVsdCB2YWx1ZQ==","type":"AVMString"}}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_int","args":[{"name":"arg_with_default","type":"uint64","defaultValue":{"source":"literal","data":123,"type":"uint64"}}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_from_abi","args":[{"name":"arg_with_default","type":"string"}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_from_global_state","args":[{"name":"arg_with_default","type":"uint64","defaultValue":{"source":"global","data":"aW50MQ==","type":"uint64"}}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_from_local_state","args":[{"name":"arg_with_default","type":"string","defaultValue":{"source":"local","data":"bG9jYWxfYnl0ZXMx","type":"AVMString"}}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"create_abi","args":[{"name":"input","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"update_abi","args":[{"name":"input","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"delete_abi","args":[{"name":"input","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"opt_in","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["OptIn"]}}],"state":{"schema":{"global":{"ints":3,"bytes":3},"local":{"ints":2,"bytes":3}},"keys":{"global":{"bytes1":{"key":"Ynl0ZXMx","keyType":"AVMString","valueType":"AVMBytes","desc":""},"bytes2":{"key":"Ynl0ZXMy","keyType":"AVMString","valueType":"AVMBytes","desc":""},"int1":{"key":"aW50MQ==","keyType":"AVMString","valueType":"AVMUint64","desc":""},"int2":{"key":"aW50Mg==","keyType":"AVMString","valueType":"AVMUint64","desc":""},"value":{"key":"dmFsdWU=","keyType":"AVMString","valueType":"AVMUint64","desc":""}},"local":{"local_bytes1":{"key":"bG9jYWxfYnl0ZXMx","keyType":"AVMString","valueType":"AVMBytes","desc":""},"local_bytes2":{"key":"bG9jYWxfYnl0ZXMy","keyType":"AVMString","valueType":"AVMBytes","desc":""},"local_int1":{"key":"bG9jYWxfaW50MQ==","keyType":"AVMString","valueType":"AVMUint64","desc":""},"local_int2":{"key":"bG9jYWxfaW50Mg==","keyType":"AVMString","valueType":"AVMUint64","desc":""}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"},"bareActions":{"create":["NoOp","OptIn"],"call":["DeleteApplication","UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Aliases for non-encoded ABI values

type pay = AppMethodCallTransactionArgument;
type asset = bigint;
type account = string | Uint8Array;
type application = bigint;
type uint64 = bigint;
type byte = number;
type AVMString = string;
type AVMBytes = Uint8Array;
type AVMUint64 = bigint;

/**
 * The argument types for the StateApp contract
 */
export type StateAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'call_abi(string)string': {
      value: string
    }
    'call_abi_txn(pay,string)string': {
      txn: AppMethodCallTransactionArgument
      value: string
    }
    'call_with_references(asset,account,application)uint64': {
      asset: bigint
      account: string | Uint8Array
      application: bigint
    }
    'set_global(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'set_local(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'set_box(byte[4],string)void': {
      name: Uint8Array
      value: string
    }
    'error()void': Record<string, never>
    'default_value(string)string': {
      argWithDefault?: string
    }
    'default_value_int(uint64)uint64': {
      argWithDefault?: bigint | number
    }
    'default_value_from_abi(string)string': {
      argWithDefault: string
    }
    'default_value_from_global_state(uint64)uint64': {
      argWithDefault?: bigint | number
    }
    'default_value_from_local_state(string)string': {
      argWithDefault?: string
    }
    'create_abi(string)string': {
      input: string
    }
    'update_abi(string)string': {
      input: string
    }
    'delete_abi(string)string': {
      input: string
    }
    'opt_in()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'call_abi(string)string': [value: string]
    'call_abi_txn(pay,string)string': [txn: AppMethodCallTransactionArgument, value: string]
    'call_with_references(asset,account,application)uint64': [asset: bigint, account: string | Uint8Array, application: bigint]
    'set_global(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'set_local(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'set_box(byte[4],string)void': [name: Uint8Array, value: string]
    'error()void': []
    'default_value(string)string': [argWithDefault: string | undefined]
    'default_value_int(uint64)uint64': [argWithDefault: bigint | number | undefined]
    'default_value_from_abi(string)string': [argWithDefault: string]
    'default_value_from_global_state(uint64)uint64': [argWithDefault: bigint | number | undefined]
    'default_value_from_local_state(string)string': [argWithDefault: string | undefined]
    'create_abi(string)string': [input: string]
    'update_abi(string)string': [input: string]
    'delete_abi(string)string': [input: string]
    'opt_in()void': []
  }
}

/**
 * The return type for each method
 */
export type StateAppReturns = {
  'call_abi(string)string': string
  'call_abi_txn(pay,string)string': string
  'call_with_references(asset,account,application)uint64': bigint
  'set_global(uint64,uint64,string,byte[4])void': void
  'set_local(uint64,uint64,string,byte[4])void': void
  'set_box(byte[4],string)void': void
  'error()void': void
  'default_value(string)string': string
  'default_value_int(uint64)uint64': bigint
  'default_value_from_abi(string)string': string
  'default_value_from_global_state(uint64)uint64': bigint
  'default_value_from_local_state(string)string': string
  'create_abi(string)string': string
  'update_abi(string)string': string
  'delete_abi(string)string': string
  'opt_in()void': void
}

/**
 * Defines the types of available calls and state of the StateApp smart contract.
 */
export type StateAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'call_abi(string)string' | 'call_abi', {
      argsObj: StateAppArgs['obj']['call_abi(string)string']
      argsTuple: StateAppArgs['tuple']['call_abi(string)string']
      returns: StateAppReturns['call_abi(string)string']
    }>
    & Record<'call_abi_txn(pay,string)string' | 'call_abi_txn', {
      argsObj: StateAppArgs['obj']['call_abi_txn(pay,string)string']
      argsTuple: StateAppArgs['tuple']['call_abi_txn(pay,string)string']
      returns: StateAppReturns['call_abi_txn(pay,string)string']
    }>
    & Record<'call_with_references(asset,account,application)uint64' | 'call_with_references', {
      argsObj: StateAppArgs['obj']['call_with_references(asset,account,application)uint64']
      argsTuple: StateAppArgs['tuple']['call_with_references(asset,account,application)uint64']
      returns: StateAppReturns['call_with_references(asset,account,application)uint64']
    }>
    & Record<'set_global(uint64,uint64,string,byte[4])void' | 'set_global', {
      argsObj: StateAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
      argsTuple: StateAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
      returns: StateAppReturns['set_global(uint64,uint64,string,byte[4])void']
    }>
    & Record<'set_local(uint64,uint64,string,byte[4])void' | 'set_local', {
      argsObj: StateAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
      argsTuple: StateAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
      returns: StateAppReturns['set_local(uint64,uint64,string,byte[4])void']
    }>
    & Record<'set_box(byte[4],string)void' | 'set_box', {
      argsObj: StateAppArgs['obj']['set_box(byte[4],string)void']
      argsTuple: StateAppArgs['tuple']['set_box(byte[4],string)void']
      returns: StateAppReturns['set_box(byte[4],string)void']
    }>
    & Record<'error()void' | 'error', {
      argsObj: StateAppArgs['obj']['error()void']
      argsTuple: StateAppArgs['tuple']['error()void']
      returns: StateAppReturns['error()void']
    }>
    & Record<'default_value(string)string' | 'default_value', {
      argsObj: StateAppArgs['obj']['default_value(string)string']
      argsTuple: StateAppArgs['tuple']['default_value(string)string']
      returns: StateAppReturns['default_value(string)string']
    }>
    & Record<'default_value_int(uint64)uint64' | 'default_value_int', {
      argsObj: StateAppArgs['obj']['default_value_int(uint64)uint64']
      argsTuple: StateAppArgs['tuple']['default_value_int(uint64)uint64']
      returns: StateAppReturns['default_value_int(uint64)uint64']
    }>
    & Record<'default_value_from_abi(string)string' | 'default_value_from_abi', {
      argsObj: StateAppArgs['obj']['default_value_from_abi(string)string']
      argsTuple: StateAppArgs['tuple']['default_value_from_abi(string)string']
      returns: StateAppReturns['default_value_from_abi(string)string']
    }>
    & Record<'default_value_from_global_state(uint64)uint64' | 'default_value_from_global_state', {
      argsObj: StateAppArgs['obj']['default_value_from_global_state(uint64)uint64']
      argsTuple: StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']
      returns: StateAppReturns['default_value_from_global_state(uint64)uint64']
    }>
    & Record<'default_value_from_local_state(string)string' | 'default_value_from_local_state', {
      argsObj: StateAppArgs['obj']['default_value_from_local_state(string)string']
      argsTuple: StateAppArgs['tuple']['default_value_from_local_state(string)string']
      returns: StateAppReturns['default_value_from_local_state(string)string']
    }>
    & Record<'create_abi(string)string' | 'create_abi', {
      argsObj: StateAppArgs['obj']['create_abi(string)string']
      argsTuple: StateAppArgs['tuple']['create_abi(string)string']
      returns: StateAppReturns['create_abi(string)string']
    }>
    & Record<'update_abi(string)string' | 'update_abi', {
      argsObj: StateAppArgs['obj']['update_abi(string)string']
      argsTuple: StateAppArgs['tuple']['update_abi(string)string']
      returns: StateAppReturns['update_abi(string)string']
    }>
    & Record<'delete_abi(string)string' | 'delete_abi', {
      argsObj: StateAppArgs['obj']['delete_abi(string)string']
      argsTuple: StateAppArgs['tuple']['delete_abi(string)string']
      returns: StateAppReturns['delete_abi(string)string']
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: StateAppArgs['obj']['opt_in()void']
      argsTuple: StateAppArgs['tuple']['opt_in()void']
      returns: StateAppReturns['opt_in()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bytes1: BinaryState
        bytes2: BinaryState
        int1: bigint
        int2: bigint
        value: bigint
      }
    }
    local: {
      keys: {
        localBytes1: BinaryState
        localBytes2: BinaryState
        localInt1: bigint
        localInt2: bigint
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StateAppSignatures = keyof StateAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StateAppNonVoidMethodSignatures = keyof StateAppTypes['methods'] extends infer T ? T extends keyof StateAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StateApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StateAppSignatures> = StateAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StateApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StateAppSignatures> = StateAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StateAppTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = StateAppTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StateAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: undefined} & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC} & CreateSchema>
  | Expand<CallParams<StateAppArgs['obj']['create_abi(string)string'] | StateAppArgs['tuple']['create_abi(string)string']> & {method: 'create_abi'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<StateAppArgs['obj']['create_abi(string)string'] | StateAppArgs['tuple']['create_abi(string)string']> & {method: 'create_abi(string)string'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type StateAppUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: undefined}
  | Expand<CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & {method: 'update_abi'}>
  | Expand<CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & {method: 'update_abi(string)string'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type StateAppDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: undefined}
  | Expand<CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']> & {method: 'delete_abi'}>
  | Expand<CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']> & {method: 'delete_abi(string)string'}>
/**
 * Defines arguments required for the deploy method.
 */
export type StateAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StateAppCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: StateAppUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: StateAppDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StateApp smart contract
 */
export abstract class StateAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends StateAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_abi':
          case 'create_abi(string)string':
            return StateAppParamsFactory.create.createAbi(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the StateApp smart contract using the create_abi(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createAbi(params: CallParams<StateAppArgs['obj']['create_abi(string)string'] | StateAppArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_abi(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.input],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends StateAppUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'update_abi':
          case 'update_abi(string)string':
            return StateAppParamsFactory.update.updateAbi(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the StateApp smart contract using the update_abi(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateAbi(params: CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update_abi(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.input],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends StateAppDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_abi':
          case 'delete_abi(string)string':
            return StateAppParamsFactory.delete.deleteAbi(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the StateApp smart contract using the delete_abi(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteAbi(params: CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_abi(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.input],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the StateApp smart contract using the opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<StateAppArgs['obj']['opt_in()void'] | StateAppArgs['tuple']['opt_in()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the call_abi(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbi(params: CallParams<StateAppArgs['obj']['call_abi(string)string'] | StateAppArgs['tuple']['call_abi(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the call_abi_txn(pay,string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiTxn(params: CallParams<StateAppArgs['obj']['call_abi_txn(pay,string)string'] | StateAppArgs['tuple']['call_abi_txn(pay,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_txn(pay,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the call_with_references(asset,account,application)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callWithReferences(params: CallParams<StateAppArgs['obj']['call_with_references(asset,account,application)uint64'] | StateAppArgs['tuple']['call_with_references(asset,account,application)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_with_references(asset,account,application)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.account, params.args.application],
    }
  }
  /**
   * Constructs a no op call for the set_global(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGlobal(params: CallParams<StateAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_global(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the set_local(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setLocal(params: CallParams<StateAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_local(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the set_box(byte[4],string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBox(params: CallParams<StateAppArgs['obj']['set_box(byte[4],string)void'] | StateAppArgs['tuple']['set_box(byte[4],string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box(byte[4],string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the error()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static error(params: CallParams<StateAppArgs['obj']['error()void'] | StateAppArgs['tuple']['error()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'error()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the default_value(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValue(params: CallParams<StateAppArgs['obj']['default_value(string)string'] | StateAppArgs['tuple']['default_value(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_int(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueInt(params: CallParams<StateAppArgs['obj']['default_value_int(uint64)uint64'] | StateAppArgs['tuple']['default_value_int(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_int(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_abi(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromAbi(params: CallParams<StateAppArgs['obj']['default_value_from_abi(string)string'] | StateAppArgs['tuple']['default_value_from_abi(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_abi(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_global_state(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromGlobalState(params: CallParams<StateAppArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_global_state(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_local_state(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromLocalState(params: CallParams<StateAppArgs['obj']['default_value_from_local_state(string)string'] | StateAppArgs['tuple']['default_value_from_local_state(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_local_state(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StateApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StateAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: AppFactory

  /**
   * Creates a new instance of `StateAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StateAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StateAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StateApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StateAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? StateAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
      updateParams: params.updateParams?.method ? StateAppParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams,
      deleteParams: params.deleteParams?.method ? StateAppParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams,
    })
    return { result: result.result, appClient: new StateAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the StateApp smart contract using the create_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createAbi: (params: CallParams<StateAppArgs['obj']['create_abi(string)string'] | StateAppArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(StateAppParamsFactory.create.createAbi(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
      /**
       * Updates an existing instance of the StateApp smart contract using the update_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateAbi: (params: CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(StateAppParamsFactory.update.updateAbi(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
      /**
       * Deletes an existing instance of the StateApp smart contract using the delete_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteAbi: (params: CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']>) => {
        return this.appFactory.params.deployDelete(StateAppParamsFactory.delete.deleteAbi(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the StateApp smart contract using the create_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createAbi: (params: CallParams<StateAppArgs['obj']['create_abi(string)string'] | StateAppArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(StateAppParamsFactory.create.createAbi(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StateAppClient(result.appClient) }
      },
      /**
       * Creates a new instance of the StateApp smart contract using an ABI method call using the create_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createAbi: async (params: CallParams<StateAppArgs['obj']['create_abi(string)string'] | StateAppArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(StateAppParamsFactory.create.createAbi(params))
        return { result: { ...result.result, return: result.result.return as undefined | StateAppReturns['create_abi(string)string'] }, appClient: new StateAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StateApp smart contract
 */
export class StateAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: AppClient

  /**
   * Creates a new instance of `StateAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StateApp app spec
   */
  constructor(appClient: AppClient)
  /**
   * Creates a new instance of `StateAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof AppClient ? appClientOrParams : new AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StateAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StateAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StateAppClient> {
    return new StateAppClient(await AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StateAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StateAppClient> {
    return new StateAppClient(await AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
      /**
       * Updates an existing instance of the StateApp smart contract using the `update_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateAbi: (params: CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
        return this.appClient.params.update(StateAppParamsFactory.update.updateAbi(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the StateApp smart contract using the `delete_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteAbi: (params: CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']>) => {
        return this.appClient.params.delete(StateAppParamsFactory.delete.deleteAbi(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the StateApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<StateAppArgs['obj']['opt_in()void'] | StateAppArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.params.optIn(StateAppParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the StateApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbi: (params: CallParams<StateAppArgs['obj']['call_abi(string)string'] | StateAppArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateAppParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiTxn: (params: CallParams<StateAppArgs['obj']['call_abi_txn(pay,string)string'] | StateAppArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateAppParamsFactory.callAbiTxn(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callWithReferences: (params: CallParams<StateAppArgs['obj']['call_with_references(asset,account,application)uint64'] | StateAppArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateAppParamsFactory.callWithReferences(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGlobal: (params: CallParams<StateAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateAppParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setLocal: (params: CallParams<StateAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateAppParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBox: (params: CallParams<StateAppArgs['obj']['set_box(byte[4],string)void'] | StateAppArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateAppParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    error: (params: CallParams<StateAppArgs['obj']['error()void'] | StateAppArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StateAppParamsFactory.error(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValue: (params: CallParams<StateAppArgs['obj']['default_value(string)string'] | StateAppArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateAppParamsFactory.defaultValue(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueInt: (params: CallParams<StateAppArgs['obj']['default_value_int(uint64)uint64'] | StateAppArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateAppParamsFactory.defaultValueInt(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromAbi: (params: CallParams<StateAppArgs['obj']['default_value_from_abi(string)string'] | StateAppArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateAppParamsFactory.defaultValueFromAbi(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromGlobalState: (params: CallParams<StateAppArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateAppParamsFactory.defaultValueFromGlobalState(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromLocalState: (params: CallParams<StateAppArgs['obj']['default_value_from_local_state(string)string'] | StateAppArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateAppParamsFactory.defaultValueFromLocalState(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
      /**
       * Updates an existing instance of the StateApp smart contract using the `update_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateAbi: (params: CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(StateAppParamsFactory.update.updateAbi(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the StateApp smart contract using the `delete_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteAbi: (params: CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']>) => {
        return this.appClient.createTransaction.delete(StateAppParamsFactory.delete.deleteAbi(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the StateApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<StateAppArgs['obj']['opt_in()void'] | StateAppArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(StateAppParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the StateApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbi: (params: CallParams<StateAppArgs['obj']['call_abi(string)string'] | StateAppArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiTxn: (params: CallParams<StateAppArgs['obj']['call_abi_txn(pay,string)string'] | StateAppArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.callAbiTxn(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callWithReferences: (params: CallParams<StateAppArgs['obj']['call_with_references(asset,account,application)uint64'] | StateAppArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.callWithReferences(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGlobal: (params: CallParams<StateAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setLocal: (params: CallParams<StateAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBox: (params: CallParams<StateAppArgs['obj']['set_box(byte[4],string)void'] | StateAppArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    error: (params: CallParams<StateAppArgs['obj']['error()void'] | StateAppArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.error(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValue: (params: CallParams<StateAppArgs['obj']['default_value(string)string'] | StateAppArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.defaultValue(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueInt: (params: CallParams<StateAppArgs['obj']['default_value_int(uint64)uint64'] | StateAppArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.defaultValueInt(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromAbi: (params: CallParams<StateAppArgs['obj']['default_value_from_abi(string)string'] | StateAppArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.defaultValueFromAbi(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromGlobalState: (params: CallParams<StateAppArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.defaultValueFromGlobalState(params))
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromLocalState: (params: CallParams<StateAppArgs['obj']['default_value_from_local_state(string)string'] | StateAppArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateAppParamsFactory.defaultValueFromLocalState(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
      /**
       * Updates an existing instance of the StateApp smart contract using the `update_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateAbi: async (params: CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(StateAppParamsFactory.update.updateAbi(params))
        return {...result, return: result.return as undefined | StateAppReturns['update_abi(string)string']}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the StateApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the StateApp smart contract using the `delete_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteAbi: async (params: CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']> & SendParams) => {
        const result = await this.appClient.send.delete(StateAppParamsFactory.delete.deleteAbi(params))
        return {...result, return: result.return as undefined | StateAppReturns['delete_abi(string)string']}
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the StateApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<StateAppArgs['obj']['opt_in()void'] | StateAppArgs['tuple']['opt_in()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(StateAppParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as undefined | StateAppReturns['opt_in()void']}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the StateApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbi: async (params: CallParams<StateAppArgs['obj']['call_abi(string)string'] | StateAppArgs['tuple']['call_abi(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.callAbi(params))
      return {...result, return: result.return as undefined | StateAppReturns['call_abi(string)string']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiTxn: async (params: CallParams<StateAppArgs['obj']['call_abi_txn(pay,string)string'] | StateAppArgs['tuple']['call_abi_txn(pay,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.callAbiTxn(params))
      return {...result, return: result.return as undefined | StateAppReturns['call_abi_txn(pay,string)string']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callWithReferences: async (params: CallParams<StateAppArgs['obj']['call_with_references(asset,account,application)uint64'] | StateAppArgs['tuple']['call_with_references(asset,account,application)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.callWithReferences(params))
      return {...result, return: result.return as undefined | StateAppReturns['call_with_references(asset,account,application)uint64']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGlobal: async (params: CallParams<StateAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.setGlobal(params))
      return {...result, return: result.return as undefined | StateAppReturns['set_global(uint64,uint64,string,byte[4])void']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setLocal: async (params: CallParams<StateAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.setLocal(params))
      return {...result, return: result.return as undefined | StateAppReturns['set_local(uint64,uint64,string,byte[4])void']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBox: async (params: CallParams<StateAppArgs['obj']['set_box(byte[4],string)void'] | StateAppArgs['tuple']['set_box(byte[4],string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.setBox(params))
      return {...result, return: result.return as undefined | StateAppReturns['set_box(byte[4],string)void']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    error: async (params: CallParams<StateAppArgs['obj']['error()void'] | StateAppArgs['tuple']['error()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.error(params))
      return {...result, return: result.return as undefined | StateAppReturns['error()void']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValue: async (params: CallParams<StateAppArgs['obj']['default_value(string)string'] | StateAppArgs['tuple']['default_value(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.defaultValue(params))
      return {...result, return: result.return as undefined | StateAppReturns['default_value(string)string']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueInt: async (params: CallParams<StateAppArgs['obj']['default_value_int(uint64)uint64'] | StateAppArgs['tuple']['default_value_int(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueInt(params))
      return {...result, return: result.return as undefined | StateAppReturns['default_value_int(uint64)uint64']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromAbi: async (params: CallParams<StateAppArgs['obj']['default_value_from_abi(string)string'] | StateAppArgs['tuple']['default_value_from_abi(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueFromAbi(params))
      return {...result, return: result.return as undefined | StateAppReturns['default_value_from_abi(string)string']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromGlobalState: async (params: CallParams<StateAppArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueFromGlobalState(params))
      return {...result, return: result.return as undefined | StateAppReturns['default_value_from_global_state(uint64)uint64']}
    },

    /**
     * Makes a call to the StateApp smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromLocalState: async (params: CallParams<StateAppArgs['obj']['default_value_from_local_state(string)string'] | StateAppArgs['tuple']['default_value_from_local_state(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueFromLocalState(params))
      return {...result, return: result.return as undefined | StateAppReturns['default_value_from_local_state(string)string']}
    },

  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `call_abi(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbi(params: CallParams<StateAppArgs['obj']['call_abi(string)string'] | StateAppArgs['tuple']['call_abi(string)string']>) {
    const result = await this.appClient.send.call(StateAppParamsFactory.callAbi(params))
    return result.return as StateAppReturns['call_abi(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `call_abi_txn(pay,string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbiTxn(params: CallParams<StateAppArgs['obj']['call_abi_txn(pay,string)string'] | StateAppArgs['tuple']['call_abi_txn(pay,string)string']>) {
    const result = await this.appClient.send.call(StateAppParamsFactory.callAbiTxn(params))
    return result.return as StateAppReturns['call_abi_txn(pay,string)string']
  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `error()void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async error(params: CallParams<StateAppArgs['obj']['error()void'] | StateAppArgs['tuple']['error()void']> = {args: []}) {
    const result = await this.appClient.send.call(StateAppParamsFactory.error(params))
    return result.return as StateAppReturns['error()void']
  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `default_value(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValue(params: CallParams<StateAppArgs['obj']['default_value(string)string'] | StateAppArgs['tuple']['default_value(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateAppParamsFactory.defaultValue(params))
    return result.return as StateAppReturns['default_value(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `default_value_int(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueInt(params: CallParams<StateAppArgs['obj']['default_value_int(uint64)uint64'] | StateAppArgs['tuple']['default_value_int(uint64)uint64']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueInt(params))
    return result.return as StateAppReturns['default_value_int(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `default_value_from_abi(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromAbi(params: CallParams<StateAppArgs['obj']['default_value_from_abi(string)string'] | StateAppArgs['tuple']['default_value_from_abi(string)string']>) {
    const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueFromAbi(params))
    return result.return as StateAppReturns['default_value_from_abi(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromGlobalState(params: CallParams<StateAppArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueFromGlobalState(params))
    return result.return as StateAppReturns['default_value_from_global_state(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StateApp smart contract using the `default_value_from_local_state(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromLocalState(params: CallParams<StateAppArgs['obj']['default_value_from_local_state(string)string'] | StateAppArgs['tuple']['default_value_from_local_state(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateAppParamsFactory.defaultValueFromLocalState(params))
    return result.return as StateAppReturns['default_value_from_local_state(string)string']
  }

  /**
   * Methods to access state for the current StateApp app
   */
  state = {
    /**
     * Methods to access global state for the current StateApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bytes1: new BinaryStateValue(result.bytes1),
          bytes2: new BinaryStateValue(result.bytes2),
          int1: result.int1,
          int2: result.int2,
          value: result.value,
        }
      },
      /**
       * Get the current value of the bytes1 key in global state
       */
      bytes1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bytes1")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bytes2 key in global state
       */
      bytes2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bytes2")) as Uint8Array | undefined) },
      /**
       * Get the current value of the int1 key in global state
       */
      int1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("int1")) as bigint | undefined },
      /**
       * Get the current value of the int2 key in global state
       */
      int2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("int2")) as bigint | undefined },
      /**
       * Get the current value of the value key in global state
       */
      value: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("value")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current StateApp app
     */
    local: (address: string) => ({
      /**
       * Get all current keyed values from local state
       */
      getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
        const result = await this.appClient.state.local(address).getAll()
        return {
          localBytes1: new BinaryStateValue(result.local_bytes1),
          localBytes2: new BinaryStateValue(result.local_bytes2),
          localInt1: result.local_int1,
          localInt2: result.local_int2,
        }
      },
      /**
       * Get the current value of the local_bytes1 key in local state
       */
      localBytes1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(address).getValue("localBytes1")) as Uint8Array | undefined) },
      /**
       * Get the current value of the local_bytes2 key in local state
       */
      localBytes2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(address).getValue("localBytes2")) as Uint8Array | undefined) },
      /**
       * Get the current value of the local_int1 key in local state
       */
      localInt1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(address).getValue("localInt1")) as bigint | undefined },
      /**
       * Get the current value of the local_int2 key in local state
       */
      localInt2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(address).getValue("localInt2")) as bigint | undefined },
    }),
  }

  public newGroup(): StateAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a call_abi(string)string method call against the StateApp contract
       */
      callAbi(params: CallParams<StateAppArgs['obj']['call_abi(string)string'] | StateAppArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbi(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi(string)string', v))
        return this
      },
      /**
       * Add a call_abi_txn(pay,string)string method call against the StateApp contract
       */
      callAbiTxn(params: CallParams<StateAppArgs['obj']['call_abi_txn(pay,string)string'] | StateAppArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiTxn(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_txn(pay,string)string', v))
        return this
      },
      /**
       * Add a call_with_references(asset,account,application)uint64 method call against the StateApp contract
       */
      callWithReferences(params: CallParams<StateAppArgs['obj']['call_with_references(asset,account,application)uint64'] | StateAppArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callWithReferences(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_with_references(asset,account,application)uint64', v))
        return this
      },
      /**
       * Add a set_global(uint64,uint64,string,byte[4])void method call against the StateApp contract
       */
      setGlobal(params: CallParams<StateAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGlobal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_local(uint64,uint64,string,byte[4])void method call against the StateApp contract
       */
      setLocal(params: CallParams<StateAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setLocal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box(byte[4],string)void method call against the StateApp contract
       */
      setBox(params: CallParams<StateAppArgs['obj']['set_box(byte[4],string)void'] | StateAppArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a error()void method call against the StateApp contract
       */
      error(params: CallParams<StateAppArgs['obj']['error()void'] | StateAppArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.error(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a default_value(string)string method call against the StateApp contract
       */
      defaultValue(params: CallParams<StateAppArgs['obj']['default_value(string)string'] | StateAppArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value(string)string', v))
        return this
      },
      /**
       * Add a default_value_int(uint64)uint64 method call against the StateApp contract
       */
      defaultValueInt(params: CallParams<StateAppArgs['obj']['default_value_int(uint64)uint64'] | StateAppArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueInt(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_int(uint64)uint64', v))
        return this
      },
      /**
       * Add a default_value_from_abi(string)string method call against the StateApp contract
       */
      defaultValueFromAbi(params: CallParams<StateAppArgs['obj']['default_value_from_abi(string)string'] | StateAppArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromAbi(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_abi(string)string', v))
        return this
      },
      /**
       * Add a default_value_from_global_state(uint64)uint64 method call against the StateApp contract
       */
      defaultValueFromGlobalState(params: CallParams<StateAppArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_global_state(uint64)uint64', v))
        return this
      },
      /**
       * Add a default_value_from_local_state(string)string method call against the StateApp contract
       */
      defaultValueFromLocalState(params: CallParams<StateAppArgs['obj']['default_value_from_local_state(string)string'] | StateAppArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromLocalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_local_state(string)string', v))
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
          updateAbi: (params: CallParams<StateAppArgs['obj']['update_abi(string)string'] | StateAppArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateAbi(params)))
            resultMappers.push((v) => client.decodeReturnValue('update_abi(string)string', v))
            return this
          },
        }
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
          deleteAbi: (params: CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteAbi(params)))
            resultMappers.push((v) => client.decodeReturnValue('delete_abi(string)string', v))
            return this
          },
        }
      },
      get optIn() {
        return {
          optIn: (params: CallParams<StateAppArgs['obj']['opt_in()void'] | StateAppArgs['tuple']['opt_in()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the StateApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await composer.simulate(options)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StateAppComposer
  }
}
export type StateAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbi(params?: CallParams<StateAppArgs['obj']['call_abi(string)string'] | StateAppArgs['tuple']['call_abi(string)string']>): StateAppComposer<[...TReturns, StateAppReturns['call_abi(string)string'] | undefined]>

  /**
   * Calls the call_abi_txn(pay,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiTxn(params?: CallParams<StateAppArgs['obj']['call_abi_txn(pay,string)string'] | StateAppArgs['tuple']['call_abi_txn(pay,string)string']>): StateAppComposer<[...TReturns, StateAppReturns['call_abi_txn(pay,string)string'] | undefined]>

  /**
   * Calls the call_with_references(asset,account,application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callWithReferences(params?: CallParams<StateAppArgs['obj']['call_with_references(asset,account,application)uint64'] | StateAppArgs['tuple']['call_with_references(asset,account,application)uint64']>): StateAppComposer<[...TReturns, StateAppReturns['call_with_references(asset,account,application)uint64'] | undefined]>

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobal(params?: CallParams<StateAppArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']>): StateAppComposer<[...TReturns, StateAppReturns['set_global(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setLocal(params?: CallParams<StateAppArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateAppArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']>): StateAppComposer<[...TReturns, StateAppReturns['set_local(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(params?: CallParams<StateAppArgs['obj']['set_box(byte[4],string)void'] | StateAppArgs['tuple']['set_box(byte[4],string)void']>): StateAppComposer<[...TReturns, StateAppReturns['set_box(byte[4],string)void'] | undefined]>

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  error(params?: CallParams<StateAppArgs['obj']['error()void'] | StateAppArgs['tuple']['error()void']>): StateAppComposer<[...TReturns, StateAppReturns['error()void'] | undefined]>

  /**
   * Calls the default_value(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValue(params?: CallParams<StateAppArgs['obj']['default_value(string)string'] | StateAppArgs['tuple']['default_value(string)string']>): StateAppComposer<[...TReturns, StateAppReturns['default_value(string)string'] | undefined]>

  /**
   * Calls the default_value_int(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueInt(params?: CallParams<StateAppArgs['obj']['default_value_int(uint64)uint64'] | StateAppArgs['tuple']['default_value_int(uint64)uint64']>): StateAppComposer<[...TReturns, StateAppReturns['default_value_int(uint64)uint64'] | undefined]>

  /**
   * Calls the default_value_from_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromAbi(params?: CallParams<StateAppArgs['obj']['default_value_from_abi(string)string'] | StateAppArgs['tuple']['default_value_from_abi(string)string']>): StateAppComposer<[...TReturns, StateAppReturns['default_value_from_abi(string)string'] | undefined]>

  /**
   * Calls the default_value_from_global_state(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromGlobalState(params?: CallParams<StateAppArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateAppArgs['tuple']['default_value_from_global_state(uint64)uint64']>): StateAppComposer<[...TReturns, StateAppReturns['default_value_from_global_state(uint64)uint64'] | undefined]>

  /**
   * Calls the default_value_from_local_state(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromLocalState(params?: CallParams<StateAppArgs['obj']['default_value_from_local_state(string)string'] | StateAppArgs['tuple']['default_value_from_local_state(string)string']>): StateAppComposer<[...TReturns, StateAppReturns['default_value_from_local_state(string)string'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the StateApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): StateAppComposer<[...TReturns, undefined]>
    /**
     * Deletes an existing instance of the StateApp smart contract using the delete_abi(string)string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteAbi(params?: CallParams<StateAppArgs['obj']['delete_abi(string)string'] | StateAppArgs['tuple']['delete_abi(string)string']>): StateAppComposer<[...TReturns, StateAppReturns['delete_abi(string)string'] | undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the StateApp smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<StateAppArgs['obj']['opt_in()void'] | StateAppArgs['tuple']['opt_in()void']>): StateAppComposer<[...TReturns, StateAppReturns['opt_in()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the StateApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StateAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StateAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): AlgoKitComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<StateAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StateAppComposerResults<TReturns>>
}
export type StateAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

