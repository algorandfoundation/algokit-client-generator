/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "call_abi(string)string": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "call_abi_txn(pay,string)string": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "call_with_asset(asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_global(uint64,uint64,string,byte[4])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_local(uint64,uint64,string,byte[4])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_box(byte[4],string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "error()void": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "default_value(string)string": {
      "read_only": true,
      "default_arguments": {
        "arg_with_default": {
          "source": "constant",
          "data": "default value"
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "default_value_int(uint64)uint64": {
      "read_only": true,
      "default_arguments": {
        "arg_with_default": {
          "source": "constant",
          "data": 123
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "default_value_from_abi(string)string": {
      "read_only": true,
      "default_arguments": {
        "arg_with_default": {
          "source": "abi-method",
          "data": {
            "name": "default_value",
            "args": [
              {
                "type": "string",
                "name": "arg_with_default"
              }
            ],
            "returns": {
              "type": "string"
            }
          }
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "default_value_from_global_state(uint64)uint64": {
      "read_only": true,
      "default_arguments": {
        "arg_with_default": {
          "source": "global-state",
          "data": "int1"
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "default_value_from_local_state(string)string": {
      "read_only": true,
      "default_arguments": {
        "arg_with_default": {
          "source": "local-state",
          "data": "local_bytes1"
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_abi(string)string": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update_abi(string)string": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "delete_abi(string)string": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "opt_in()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 2,
      "num_uints": 2
    }
  },
  "schema": {
    "global": {
      "declared": {
        "bytes1": {
          "type": "bytes",
          "key": "bytes1",
          "descr": ""
        },
        "bytes2": {
          "type": "bytes",
          "key": "bytes2",
          "descr": ""
        },
        "int1": {
          "type": "uint64",
          "key": "int1",
          "descr": ""
        },
        "int2": {
          "type": "uint64",
          "key": "int2",
          "descr": ""
        },
        "value": {
          "type": "uint64",
          "key": "value",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {
        "local_bytes1": {
          "type": "bytes",
          "key": "local_bytes1",
          "descr": ""
        },
        "local_bytes2": {
          "type": "bytes",
          "key": "local_bytes2",
          "descr": ""
        },
        "local_int1": {
          "type": "uint64",
          "key": "local_int1",
          "descr": ""
        },
        "local_int2": {
          "type": "uint64",
          "key": "local_int2",
          "descr": ""
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "StateApp",
    "methods": [
      {
        "name": "call_abi",
        "args": [
          {
            "type": "string",
            "name": "value"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "call_abi_txn",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "value"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "call_with_asset",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "set_global",
        "args": [
          {
            "type": "uint64",
            "name": "int1"
          },
          {
            "type": "uint64",
            "name": "int2"
          },
          {
            "type": "string",
            "name": "bytes1"
          },
          {
            "type": "byte[4]",
            "name": "bytes2"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_local",
        "args": [
          {
            "type": "uint64",
            "name": "int1"
          },
          {
            "type": "uint64",
            "name": "int2"
          },
          {
            "type": "string",
            "name": "bytes1"
          },
          {
            "type": "byte[4]",
            "name": "bytes2"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_box",
        "args": [
          {
            "type": "byte[4]",
            "name": "name"
          },
          {
            "type": "string",
            "name": "value"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "error",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "default_value",
        "args": [
          {
            "type": "string",
            "name": "arg_with_default"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "default_value_int",
        "args": [
          {
            "type": "uint64",
            "name": "arg_with_default"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "default_value_from_abi",
        "args": [
          {
            "type": "string",
            "name": "arg_with_default"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "default_value_from_global_state",
        "args": [
          {
            "type": "uint64",
            "name": "arg_with_default"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "default_value_from_local_state",
        "args": [
          {
            "type": "string",
            "name": "arg_with_default"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "create_abi",
        "args": [
          {
            "type": "string",
            "name": "input"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "update_abi",
        "args": [
          {
            "type": "string",
            "name": "input"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "delete_abi",
        "args": [
          {
            "type": "string",
            "name": "input"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "opt_in",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE",
    "opt_in": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the StateApp smart contract.
 */
export type StateApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'call_abi(string)string' | 'call_abi', {
      argsObj: {
        value: string
      }
      argsTuple: [value: string]
      returns: string
    }>
    & Record<'call_abi_txn(pay,string)string' | 'call_abi_txn', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        value: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, value: string]
      returns: string
    }>
    & Record<'call_with_asset(asset)uint64' | 'call_with_asset', {
      argsObj: {
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: bigint
    }>
    & Record<'set_global(uint64,uint64,string,byte[4])void' | 'set_global', {
      argsObj: {
        int1: bigint | number
        int2: bigint | number
        bytes1: string
        bytes2: Uint8Array
      }
      argsTuple: [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
      returns: void
    }>
    & Record<'set_local(uint64,uint64,string,byte[4])void' | 'set_local', {
      argsObj: {
        int1: bigint | number
        int2: bigint | number
        bytes1: string
        bytes2: Uint8Array
      }
      argsTuple: [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
      returns: void
    }>
    & Record<'set_box(byte[4],string)void' | 'set_box', {
      argsObj: {
        name: Uint8Array
        value: string
      }
      argsTuple: [name: Uint8Array, value: string]
      returns: void
    }>
    & Record<'error()void' | 'error', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'default_value(string)string' | 'default_value', {
      argsObj: {
        arg_with_default?: string
      }
      argsTuple: [arg_with_default: string | undefined]
      returns: string
    }>
    & Record<'default_value_int(uint64)uint64' | 'default_value_int', {
      argsObj: {
        arg_with_default?: bigint | number
      }
      argsTuple: [arg_with_default: bigint | number | undefined]
      returns: bigint
    }>
    & Record<'default_value_from_abi(string)string' | 'default_value_from_abi', {
      argsObj: {
        arg_with_default?: string
      }
      argsTuple: [arg_with_default: string | undefined]
      returns: string
    }>
    & Record<'default_value_from_global_state(uint64)uint64' | 'default_value_from_global_state', {
      argsObj: {
        arg_with_default?: bigint | number
      }
      argsTuple: [arg_with_default: bigint | number | undefined]
      returns: bigint
    }>
    & Record<'default_value_from_local_state(string)string' | 'default_value_from_local_state', {
      argsObj: {
        arg_with_default?: string
      }
      argsTuple: [arg_with_default: string | undefined]
      returns: string
    }>
    & Record<'create_abi(string)string' | 'create_abi', {
      argsObj: {
        input: string
      }
      argsTuple: [input: string]
      returns: string
    }>
    & Record<'update_abi(string)string' | 'update_abi', {
      argsObj: {
        input: string
      }
      argsTuple: [input: string]
      returns: string
    }>
    & Record<'delete_abi(string)string' | 'delete_abi', {
      argsObj: {
        input: string
      }
      argsTuple: [input: string]
      returns: string
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'bytes1'?: BinaryState
      'bytes2'?: BinaryState
      'int1'?: IntegerState
      'int2'?: IntegerState
      'value'?: IntegerState
    }
    local: {
      'local_bytes1'?: BinaryState
      'local_bytes2'?: BinaryState
      'local_int1'?: IntegerState
      'local_int2'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type StateAppSig = keyof StateApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends StateAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the StateApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends StateAppSig> = StateApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StateApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StateAppSig> = StateApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type StateAppCreateCalls = (typeof StateAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type StateAppCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp | OnCompleteOptIn))
  | (TypedCallParams<'create_abi(string)string'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type StateAppUpdateCalls = (typeof StateAppCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type StateAppUpdateCallParams =
  | TypedCallParams<undefined>
  | TypedCallParams<'update_abi(string)string'>
/**
 * A factory for available 'delete' calls
 */
export type StateAppDeleteCalls = (typeof StateAppCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type StateAppDeleteCallParams =
  | TypedCallParams<undefined>
  | TypedCallParams<'delete_abi(string)string'>
/**
 * Defines arguments required for the deploy method.
 */
export type StateAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: StateAppCreateCalls) => StateAppCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: StateAppUpdateCalls) => StateAppUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: StateAppDeleteCalls) => StateAppDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class StateAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the StateApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp | OnCompleteOptIn) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs a create call for the StateApp smart contract using the create_abi(string)string ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createAbi(args: MethodArgs<'create_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create_abi(string)string' as const,
          methodArgs: Array.isArray(args) ? args : [args.input],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the StateApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs an update call for the StateApp smart contract using the update_abi(string)string ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateAbi(args: MethodArgs<'update_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update_abi(string)string' as const,
          methodArgs: Array.isArray(args) ? args : [args.input],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the StateApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs a delete call for the StateApp smart contract using the delete_abi(string)string ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteAbi(args: MethodArgs<'delete_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'delete_abi(string)string' as const,
          methodArgs: Array.isArray(args) ? args : [args.input],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the StateApp smart contract using the opt_in()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optIn(args: MethodArgs<'opt_in()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'opt_in()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the call_abi(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static callAbi(args: MethodArgs<'call_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'call_abi(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the call_abi_txn(pay,string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static callAbiTxn(args: MethodArgs<'call_abi_txn(pay,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'call_abi_txn(pay,string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the call_with_asset(asset)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static callWithAsset(args: MethodArgs<'call_with_asset(asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'call_with_asset(asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_global(uint64,uint64,string,byte[4])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_global(uint64,uint64,string,byte[4])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.int1, args.int2, args.bytes1, args.bytes2],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_local(uint64,uint64,string,byte[4])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_local(uint64,uint64,string,byte[4])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.int1, args.int2, args.bytes1, args.bytes2],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_box(byte[4],string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_box(byte[4],string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the error()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static error(args: MethodArgs<'error()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'error()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the default_value(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static defaultValue(args: MethodArgs<'default_value(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'default_value(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.arg_with_default],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the default_value_int(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static defaultValueInt(args: MethodArgs<'default_value_int(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'default_value_int(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.arg_with_default],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the default_value_from_abi(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static defaultValueFromAbi(args: MethodArgs<'default_value_from_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'default_value_from_abi(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.arg_with_default],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the default_value_from_global_state(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static defaultValueFromGlobalState(args: MethodArgs<'default_value_from_global_state(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'default_value_from_global_state(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.arg_with_default],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the default_value_from_local_state(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static defaultValueFromLocalState(args: MethodArgs<'default_value_from_local_state(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'default_value_from_local_state(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.arg_with_default],
      ...params,
    }
  }
}

/**
 * A client to make calls to the StateApp smart contract
 */
export class StateAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `StateAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof StateApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the StateApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: StateAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(StateAppCallFactory.create)
    const updateArgs = params.updateCall?.(StateAppCallFactory.update)
    const deleteArgs = params.deleteCall?.(StateAppCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the StateApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp | OnCompleteOptIn) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
      /**
       * Creates a new instance of the StateApp smart contract using the create_abi(string)string ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createAbi(args: MethodArgs<'create_abi(string)string'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'create_abi(string)string'>>> {
        return $this.mapReturnValue(await $this.appClient.create(StateAppCallFactory.create.createAbi(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the StateApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
      /**
       * Updates an existing instance of the StateApp smart contract using the update_abi(string)string ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateAbi(args: MethodArgs<'update_abi(string)string'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'update_abi(string)string'>>> {
        return $this.mapReturnValue(await $this.appClient.update(StateAppCallFactory.update.updateAbi(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the StateApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.delete(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
      /**
       * Deletes an existing instance of the StateApp smart contract using the delete_abi(string)string ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteAbi(args: MethodArgs<'delete_abi(string)string'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'delete_abi(string)string'>>> {
        return $this.mapReturnValue(await $this.appClient.delete(StateAppCallFactory.delete.deleteAbi(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the StateApp smart contract using the opt_in()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optIn(args: MethodArgs<'opt_in()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'opt_in()void'>>> {
        return $this.mapReturnValue(await $this.appClient.optIn(StateAppCallFactory.optIn.optIn(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the StateApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public callAbi(args: MethodArgs<'call_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.callAbi(args, params))
  }

  /**
   * Calls the call_abi_txn(pay,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public callAbiTxn(args: MethodArgs<'call_abi_txn(pay,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.callAbiTxn(args, params))
  }

  /**
   * Calls the call_with_asset(asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public callWithAsset(args: MethodArgs<'call_with_asset(asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.callWithAsset(args, params))
  }

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.setGlobal(args, params))
  }

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.setLocal(args, params))
  }

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.setBox(args, params))
  }

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public error(args: MethodArgs<'error()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.error(args, params))
  }

  /**
   * Calls the default_value(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public defaultValue(args: MethodArgs<'default_value(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.defaultValue(args, params))
  }

  /**
   * Calls the default_value_int(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public defaultValueInt(args: MethodArgs<'default_value_int(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.defaultValueInt(args, params))
  }

  /**
   * Calls the default_value_from_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public defaultValueFromAbi(args: MethodArgs<'default_value_from_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.defaultValueFromAbi(args, params))
  }

  /**
   * Calls the default_value_from_global_state(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public defaultValueFromGlobalState(args: MethodArgs<'default_value_from_global_state(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.defaultValueFromGlobalState(args, params))
  }

  /**
   * Calls the default_value_from_local_state(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public defaultValueFromLocalState(args: MethodArgs<'default_value_from_local_state(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StateAppCallFactory.defaultValueFromLocalState(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<StateApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get bytes1() {
        return StateAppClient.getBinaryState(state, 'bytes1')
      },
      get bytes2() {
        return StateAppClient.getBinaryState(state, 'bytes2')
      },
      get int1() {
        return StateAppClient.getIntegerState(state, 'int1')
      },
      get int2() {
        return StateAppClient.getIntegerState(state, 'int2')
      },
      get value() {
        return StateAppClient.getIntegerState(state, 'value')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<StateApp['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get local_bytes1() {
        return StateAppClient.getBinaryState(state, 'local_bytes1')
      },
      get local_bytes2() {
        return StateAppClient.getBinaryState(state, 'local_bytes2')
      },
      get local_int1() {
        return StateAppClient.getIntegerState(state, 'local_int1')
      },
      get local_int2() {
        return StateAppClient.getIntegerState(state, 'local_int2')
      },
    }
  }

  public compose(): StateAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      callAbi(args: MethodArgs<'call_abi(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.callAbi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      callAbiTxn(args: MethodArgs<'call_abi_txn(pay,string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.callAbiTxn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      callWithAsset(args: MethodArgs<'call_with_asset(asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.callWithAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setGlobal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setLocal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      error(args: MethodArgs<'error()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.error(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      defaultValue(args: MethodArgs<'default_value(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.defaultValue(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      defaultValueInt(args: MethodArgs<'default_value_int(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.defaultValueInt(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      defaultValueFromAbi(args: MethodArgs<'default_value_from_abi(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.defaultValueFromAbi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      defaultValueFromGlobalState(args: MethodArgs<'default_value_from_global_state(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.defaultValueFromGlobalState(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      defaultValueFromLocalState(args: MethodArgs<'default_value_from_local_state(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.defaultValueFromLocalState(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
          updateAbi(args: MethodArgs<'update_abi(string)string'>, params?: AppClientCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateAbi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
          deleteAbi(args: MethodArgs<'delete_abi(string)string'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteAbi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          optIn(args: MethodArgs<'opt_in()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as StateAppComposer
  }
}
export type StateAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbi(args: MethodArgs<'call_abi(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'call_abi(string)string'>]>

  /**
   * Calls the call_abi_txn(pay,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiTxn(args: MethodArgs<'call_abi_txn(pay,string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'call_abi_txn(pay,string)string'>]>

  /**
   * Calls the call_with_asset(asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callWithAsset(args: MethodArgs<'call_with_asset(asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'call_with_asset(asset)uint64'>]>

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'set_global(uint64,uint64,string,byte[4])void'>]>

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'set_local(uint64,uint64,string,byte[4])void'>]>

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'set_box(byte[4],string)void'>]>

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  error(args: MethodArgs<'error()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'error()void'>]>

  /**
   * Calls the default_value(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValue(args: MethodArgs<'default_value(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'default_value(string)string'>]>

  /**
   * Calls the default_value_int(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueInt(args: MethodArgs<'default_value_int(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'default_value_int(uint64)uint64'>]>

  /**
   * Calls the default_value_from_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromAbi(args: MethodArgs<'default_value_from_abi(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'default_value_from_abi(string)string'>]>

  /**
   * Calls the default_value_from_global_state(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromGlobalState(args: MethodArgs<'default_value_from_global_state(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'default_value_from_global_state(uint64)uint64'>]>

  /**
   * Calls the default_value_from_local_state(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromLocalState(args: MethodArgs<'default_value_from_local_state(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, MethodReturn<'default_value_from_local_state(string)string'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the StateApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): StateAppComposer<[...TReturns, undefined]>
    /**
     * Updates an existing instance of the StateApp smart contract using the update_abi(string)string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateAbi(args: MethodArgs<'update_abi(string)string'>, params?: AppClientCallCoreParams & AppClientCompilationParams): StateAppComposer<[...TReturns, MethodReturn<'update_abi(string)string'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the StateApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, undefined]>
    /**
     * Deletes an existing instance of the StateApp smart contract using the delete_abi(string)string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteAbi(args: MethodArgs<'delete_abi(string)string'>, params?: AppClientCallCoreParams): StateAppComposer<[...TReturns, MethodReturn<'delete_abi(string)string'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the StateApp smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(args: MethodArgs<'opt_in()void'>, params?: AppClientCallCoreParams): StateAppComposer<[...TReturns, MethodReturn<'opt_in()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the StateApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): StateAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): StateAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<StateAppComposerResults<TReturns>>
}
export type StateAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
