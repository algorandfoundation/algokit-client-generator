/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import AlgoKitComposer, { AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ValidatorRegistry","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"initStakingContract","args":[{"name":"approvalProgramSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"loadStakingContractData","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"finalizeStakingContract","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"gas","desc":"gas is a dummy no-op call that can be used to pool-up resource references and opcode cost","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getMbrAmounts","desc":"Returns the MBR amounts needed for various actions:\n[\n addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract\n addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator\n poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself\n addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)\n]","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"MbrAmounts"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getProtocolConstraints","desc":"Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"Constraints"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getNumValidators","desc":"Returns the current number of validators","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getValidatorConfig","args":[{"name":"validatorId","type":"uint64"}],"returns":{"type":"(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)","struct":"ValidatorConfig"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getValidatorState","args":[{"name":"validatorId","type":"uint64"}],"returns":{"type":"(uint16,uint64,uint64,uint64)","struct":"ValidatorCurState"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getValidatorOwnerAndManager","args":[{"name":"validatorId","type":"uint64"}],"returns":{"type":"(address,address)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPools","desc":"Return list of all pools for this validator.","args":[{"name":"validatorId","type":"uint64","desc":"PoolInfo[] - array of pools\nNot callable from other contracts because 1K return but can be called w/ simulate which bumps log returns"}],"returns":{"type":"(uint64,uint16,uint64)[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPoolAppId","args":[{"name":"validatorId","type":"uint64"},{"name":"poolId","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPoolInfo","args":[{"name":"poolKey","type":"(uint64,uint64,uint64)","struct":"ValidatorPoolKey"}],"returns":{"type":"(uint64,uint16,uint64)","struct":"PoolInfo"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getCurMaxStakePerPool","desc":"Calculate the maximum stake per pool for a given validator.\nNormally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so\nas pools are added the max allowed per pool can reduce.","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator."}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"doesStakerNeedToPayMBR","desc":"Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount","args":[{"name":"staker","type":"address"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getStakedPoolsForAccount","desc":"Retrieves the staked pools for an account.","args":[{"name":"staker","type":"address","desc":"The account to retrieve staked pools for.\n ValidatorPoolKey[] - The array of staked pools for the account."}],"returns":{"type":"(uint64,uint64,uint64)[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getTokenPayoutRatio","desc":"Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token\npayouts across pools can be based on a stable snaphost of stake.","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator.\n PoolTokenPayoutRatio - The token payout ratio for the validator."}],"returns":{"type":"(uint64[24],uint64)","struct":"PoolTokenPayoutRatio"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getNodePoolAssignments","args":[{"name":"validatorId","type":"uint64"}],"returns":{"type":"((uint64[3])[8])","struct":"NodePoolAssignmentConfig"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getNFDRegistryID","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addValidator","desc":"Adds a new validator\nRequires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.","args":[{"name":"mbrPayment","type":"pay","desc":"payment from caller which covers mbr increase of new validator storage"},{"name":"nfdName","type":"string","desc":"(Optional) Name of nfd (used as double-check against id specified in config)"},{"name":"config","type":"(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)","desc":"ValidatorConfig struct","struct":"ValidatorConfig"}],"returns":{"type":"uint64","desc":"uint64 validator id"},"events":[{"name":"retiOP_addedValidator","args":[{"name":"id","type":"uint64"},{"name":"owner","type":"address"},{"name":"manager","type":"address"}],"desc":"Logs the addition of a new validator to the system, its initial owner and manager"}],"actions":{"create":[],"call":["NoOp"]}},{"name":"changeValidatorManager","desc":"Changes the Validator manager for a specific Validator id.\n[ ONLY OWNER CAN CHANGE ]","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator to change the manager for."},{"name":"manager","type":"address","desc":"The new manager address."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"changeValidatorSunsetInfo","desc":"Updates the sunset information for a given validator.\n[ ONLY OWNER CAN CHANGE ]","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator to update."},{"name":"sunsettingOn","type":"uint64","desc":"The new sunset timestamp."},{"name":"sunsettingTo","type":"uint64","desc":"The new sunset to validator id."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"changeValidatorNFD","desc":"Changes the NFD for a validator in the validatorList contract.\n[ ONLY OWNER CAN CHANGE ]","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator to update."},{"name":"nfdAppID","type":"uint64","desc":"The application id of the NFD to assign to the validator."},{"name":"nfdName","type":"string","desc":"The name of the NFD (which must match)"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"changeValidatorCommissionAddress","desc":"Change the commission address that validator rewards are sent to.\n     [ ONLY OWNER CAN CHANGE ]","args":[{"name":"validatorId","type":"uint64"},{"name":"commissionAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"changeValidatorRewardInfo","desc":"Allow the additional rewards (gating entry, additional token rewards) information be changed at will.\n[ ONLY OWNER CAN CHANGE ]","args":[{"name":"validatorId","type":"uint64"},{"name":"EntryGatingType","type":"uint8"},{"name":"EntryGatingAddress","type":"address"},{"name":"EntryGatingAssets","type":"uint64[4]"},{"name":"GatingAssetMinBalance","type":"uint64"},{"name":"RewardPerPayout","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addPool","desc":"Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.\nThe caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.\n\n\n[ ONLY OWNER OR MANAGER CAN call ]","args":[{"name":"mbrPayment","type":"pay","desc":"payment from caller which covers mbr increase of adding a new pool"},{"name":"validatorId","type":"uint64","desc":"is id of validator to pool to (must be owner or manager)"},{"name":"nodeNum","type":"uint64","desc":"is node number to add to"}],"returns":{"type":"(uint64,uint64,uint64)","desc":"ValidatorPoolKey pool key to created pool","struct":"ValidatorPoolKey"},"events":[{"name":"retiOP_validatorAddedPool","args":[{"name":"id","type":"uint64"},{"name":"num","type":"uint16"},{"name":"poolAppId","type":"uint64"}],"desc":"Logs the addition of a new pool to a particular validator ID"}],"actions":{"create":[],"call":["NoOp"]}},{"name":"addStake","desc":"Adds stake to a validator pool.","args":[{"name":"stakedAmountPayment","type":"pay","desc":"payment coming from staker to place into a pool"},{"name":"validatorId","type":"uint64","desc":"The id of the validator."},{"name":"valueToVerify","type":"uint64","desc":"only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.\nTxn sender is factored in as well if that is part of gating.\n*"}],"returns":{"type":"(uint64,uint64,uint64)","desc":"ValidatorPoolKey - The key of the validator pool.","struct":"ValidatorPoolKey"},"events":[{"name":"retiOP_stakeAdded","args":[{"name":"id","type":"uint64"},{"name":"poolNum","type":"uint16"},{"name":"poolAppId","type":"uint64"},{"name":"staker","type":"address"},{"name":"amountStaked","type":"uint64"}],"desc":"Logs how much stake was added by a staker to a particular staking pool"}],"actions":{"create":[],"call":["NoOp"]}},{"name":"setTokenPayoutRatio","desc":"setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios\nof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40\nin pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by\npool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.\nIt would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of\ntheir 'current' stake which changes as part of the payouts themselves (and people could be changing stake\nduring the epoch updates across pools)\n\n\nMultiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple\ntimes in same epoch.  Just return.","args":[{"name":"validatorId","type":"uint64","desc":"validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator."}],"returns":{"type":"(uint64[24],uint64)","desc":"PoolTokenPayoutRatio - the finished ratio data","struct":"PoolTokenPayoutRatio"},"actions":{"create":[],"call":["NoOp"]}},{"name":"stakeUpdatedViaRewards","desc":"stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total\nstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.\nThe calling App id is validated against our pool list as well.","args":[{"name":"poolKey","type":"(uint64,uint64,uint64)","desc":"ValidatorPoolKey type","struct":"ValidatorPoolKey"},{"name":"algoToAdd","type":"uint64","desc":"amount this validator's total stake increased via rewards"},{"name":"rewardTokenAmountReserved","type":"uint64","desc":"amount this validator's total stake increased via rewards (that should be"},{"name":"validatorCommission","type":"uint64","desc":"the commission amount the validator was paid, if any"},{"name":"saturatedBurnToFeeSink","type":"uint64","desc":"if the pool was in saturated state, the amount sent back to the fee sink.\nseen as 'accounted for/pending spent')"}],"returns":{"type":"void"},"events":[{"name":"retiOP_epochRewardUpdate","args":[{"name":"id","type":"uint64"},{"name":"poolNum","type":"uint16"},{"name":"poolAppId","type":"uint64"},{"name":"validatorCommission","type":"uint64"},{"name":"saturatedBurnToFeeSink","type":"uint64"},{"name":"algoAdded","type":"uint64"},{"name":"rewardTokenHeldBack","type":"uint64"}],"desc":"Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.\nCommission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."}],"actions":{"create":[],"call":["NoOp"]}},{"name":"stakeRemoved","desc":"stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed\nfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.\nIf any amount of rewardRemoved is specified, then that amount of reward is sent to the use\nThe calling App id is validated against our pool list as well.","args":[{"name":"poolKey","type":"(uint64,uint64,uint64)","desc":"calling us from which stake was removed","struct":"ValidatorPoolKey"},{"name":"staker","type":"address"},{"name":"amountRemoved","type":"uint64","desc":"algo amount removed"},{"name":"rewardRemoved","type":"uint64","desc":"if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)"},{"name":"stakerRemoved","type":"bool"}],"returns":{"type":"void"},"events":[{"name":"retiOP_stakeRemoved","args":[{"name":"id","type":"uint64"},{"name":"poolNum","type":"uint16"},{"name":"poolAppId","type":"uint64"},{"name":"staker","type":"address"},{"name":"amountUnstaked","type":"uint64"},{"name":"rewardTokensReceived","type":"uint64"},{"name":"rewardTokenAssetId","type":"uint64"}],"desc":"Logs how much stake was removed by a staker from a particular staking pool"}],"actions":{"create":[],"call":["NoOp"]}},{"name":"findPoolForStaker","desc":"Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.\nFirst checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds\nto new pool if necessary.","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator."},{"name":"staker","type":"address","desc":"The address of the staker."},{"name":"amountToStake","type":"uint64","desc":"The amount to stake."}],"returns":{"type":"((uint64,uint64,uint64),bool,bool)","desc":"ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'\nto this VALIDATOR, and true/false if staker is new to the protocol."},"actions":{"create":[],"call":["NoOp"]}},{"name":"movePoolToNode","desc":"Find the specified pool (in any node number) and move it to the specified node.\nThe pool account is forced offline if moved so prior node will still run for 320 rounds but\nnew key goes online on new node soon after (320 rounds after it goes online)\nNo-op if success, asserts if not found or can't move  (no space in target)\n[ ONLY OWNER OR MANAGER CAN CHANGE ]","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator."},{"name":"poolAppId","type":"uint64"},{"name":"nodeNum","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"emptyTokenRewards","desc":"Sends the reward tokens held in pool 1 to specified receiver.\nThis is intended to be used by the owner when they want to get reward tokens 'back' which they sent to\nthe first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will\nNOT be sent as they must be held back for stakers to later claim.\n[ ONLY OWNER CAN CALL]","args":[{"name":"validatorId","type":"uint64","desc":"The id of the validator."},{"name":"receiver","type":"address","desc":"the account to send the tokens to (must already be opted-in to the reward token)"}],"returns":{"type":"uint64","desc":"uint64 the amount of reward token sent"},"actions":{"create":[],"call":["NoOp"]}}],"events":[{"name":"retiOP_addedValidator","args":[{"name":"id","type":"uint64"},{"name":"owner","type":"address"},{"name":"manager","type":"address"}],"desc":"Logs the addition of a new validator to the system, its initial owner and manager"},{"name":"retiOP_validatorAddedPool","args":[{"name":"id","type":"uint64"},{"name":"num","type":"uint16"},{"name":"poolAppId","type":"uint64"}],"desc":"Logs the addition of a new pool to a particular validator ID"},{"name":"retiOP_stakeAdded","args":[{"name":"id","type":"uint64"},{"name":"poolNum","type":"uint16"},{"name":"poolAppId","type":"uint64"},{"name":"staker","type":"address"},{"name":"amountStaked","type":"uint64"}],"desc":"Logs how much stake was added by a staker to a particular staking pool"},{"name":"retiOP_epochRewardUpdate","args":[{"name":"id","type":"uint64"},{"name":"poolNum","type":"uint16"},{"name":"poolAppId","type":"uint64"},{"name":"validatorCommission","type":"uint64"},{"name":"saturatedBurnToFeeSink","type":"uint64"},{"name":"algoAdded","type":"uint64"},{"name":"rewardTokenHeldBack","type":"uint64"}],"desc":"Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.\nCommission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."},{"name":"retiOP_stakeRemoved","args":[{"name":"id","type":"uint64"},{"name":"poolNum","type":"uint16"},{"name":"poolAppId","type":"uint64"},{"name":"staker","type":"address"},{"name":"amountUnstaked","type":"uint64"},{"name":"rewardTokensReceived","type":"uint64"},{"name":"rewardTokenAssetId","type":"uint64"}],"desc":"Logs how much stake was removed by a staker from a particular staking pool"}],"arcs":[4,56],"structs":{"ValidatorInfo":[{"name":"config","type":[{"name":"id","type":"uint64"},{"name":"owner","type":"address"},{"name":"manager","type":"address"},{"name":"nfdForInfo","type":"uint64"},{"name":"entryGatingType","type":"uint8"},{"name":"entryGatingAddress","type":"address"},{"name":"entryGatingAssets","type":"uint64[4]"},{"name":"gatingAssetMinBalance","type":"uint64"},{"name":"rewardTokenId","type":"uint64"},{"name":"rewardPerPayout","type":"uint64"},{"name":"epochRoundLength","type":"uint32"},{"name":"percentToValidator","type":"uint32"},{"name":"validatorCommissionAddress","type":"address"},{"name":"minEntryStake","type":"uint64"},{"name":"maxAlgoPerPool","type":"uint64"},{"name":"poolsPerNode","type":"uint8"},{"name":"sunsettingOn","type":"uint64"},{"name":"sunsettingTo","type":"uint64"}]},{"name":"state","type":[{"name":"numPools","type":"uint16"},{"name":"totalStakers","type":"uint64"},{"name":"totalAlgoStaked","type":"uint64"},{"name":"rewardTokenHeldBack","type":"uint64"}]},{"name":"pools","type":"(uint64,uint16,uint64)[24]"},{"name":"tokenPayoutRatio","type":[{"name":"poolPctOfWhole","type":"uint64[24]"},{"name":"updatedForPayout","type":"uint64"}]},{"name":"nodePoolAssignments","type":[{"name":"nodes","type":"(uint64[3])[8]"}]}],"MbrAmounts":[{"name":"addValidatorMbr","type":"uint64"},{"name":"addPoolMbr","type":"uint64"},{"name":"poolInitMbr","type":"uint64"},{"name":"addStakerMbr","type":"uint64"}],"Constraints":[{"name":"epochPayoutRoundsMin","type":"uint64"},{"name":"epochPayoutRoundsMax","type":"uint64"},{"name":"minPctToValidatorWFourDecimals","type":"uint64"},{"name":"maxPctToValidatorWFourDecimals","type":"uint64"},{"name":"minEntryStake","type":"uint64"},{"name":"maxAlgoPerPool","type":"uint64"},{"name":"maxAlgoPerValidator","type":"uint64"},{"name":"amtConsideredSaturated","type":"uint64"},{"name":"maxNodes","type":"uint64"},{"name":"maxPoolsPerNode","type":"uint64"},{"name":"maxStakersPerPool","type":"uint64"}],"ValidatorConfig":[{"name":"id","type":"uint64"},{"name":"owner","type":"address"},{"name":"manager","type":"address"},{"name":"nfdForInfo","type":"uint64"},{"name":"entryGatingType","type":"uint8"},{"name":"entryGatingAddress","type":"address"},{"name":"entryGatingAssets","type":"uint64[4]"},{"name":"gatingAssetMinBalance","type":"uint64"},{"name":"rewardTokenId","type":"uint64"},{"name":"rewardPerPayout","type":"uint64"},{"name":"epochRoundLength","type":"uint32"},{"name":"percentToValidator","type":"uint32"},{"name":"validatorCommissionAddress","type":"address"},{"name":"minEntryStake","type":"uint64"},{"name":"maxAlgoPerPool","type":"uint64"},{"name":"poolsPerNode","type":"uint8"},{"name":"sunsettingOn","type":"uint64"},{"name":"sunsettingTo","type":"uint64"}],"ValidatorCurState":[{"name":"numPools","type":"uint16"},{"name":"totalStakers","type":"uint64"},{"name":"totalAlgoStaked","type":"uint64"},{"name":"rewardTokenHeldBack","type":"uint64"}],"PoolInfo":[{"name":"poolAppId","type":"uint64"},{"name":"totalStakers","type":"uint16"},{"name":"totalAlgoStaked","type":"uint64"}],"ValidatorPoolKey":[{"name":"id","type":"uint64"},{"name":"poolId","type":"uint64"},{"name":"poolAppId","type":"uint64"}],"PoolTokenPayoutRatio":[{"name":"poolPctOfWhole","type":"uint64[24]"},{"name":"updatedForPayout","type":"uint64"}],"NodePoolAssignmentConfig":[{"name":"nodes","type":"(uint64[3])[8]"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"stakingPoolInitialized":{"key":"aW5pdA==","keyType":"AVMBytes","valueType":"bool"},"numValidators":{"key":"bnVtVg==","keyType":"AVMBytes","valueType":"uint64"},"numStakers":{"key":"bnVtU3Rha2Vycw==","keyType":"AVMBytes","valueType":"uint64"},"totalAlgoStaked":{"key":"c3Rha2Vk","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{"stakingPoolApprovalProgram":{"key":"cG9vbFRlbXBsYXRlQXBwcm92YWxCeXRlcw==","keyType":"AVMBytes","valueType":"byte[]"}}},"maps":{"global":{},"local":{},"box":{"validatorList":{"keyType":"uint64","valueType":"ValidatorInfo","prefix":"v"},"stakerPoolSet":{"keyType":"address","valueType":"(uint64,uint64,uint64)[6]","prefix":"sps"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":[{"teal":1,"source":50,"pc":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170]},{"teal":9,"source":50,"pc":[171,172]},{"teal":10,"source":50,"pc":[173]},{"teal":11,"source":50,"pc":[174,175]},{"teal":18,"source":50,"pc":[176,177]},{"teal":19,"source":50,"pc":[178]},{"teal":20,"source":50,"pc":[179,180]},{"teal":21,"source":50,"pc":[181]},{"teal":22,"source":50,"pc":[182,183]},{"teal":23,"source":50,"pc":[184]},{"teal":24,"source":50,"pc":[185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210]},{"teal":28,"source":50,"errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[211]},{"teal":33,"source":81,"pc":[212,213,214]},{"teal":34,"source":81,"pc":[215]},{"teal":35,"source":81,"pc":[216]},{"teal":39,"source":81,"pc":[217,218,219]},{"teal":43,"source":82,"pc":[220,221]},{"teal":44,"source":82,"pc":[222]},{"teal":45,"source":82,"pc":[223,224]},{"teal":46,"source":82,"pc":[225]},{"teal":47,"source":82,"pc":[226,227]},{"teal":48,"source":82,"pc":[228]},{"teal":49,"source":82,"pc":[229]},{"teal":53,"source":83,"pc":[230,231]},{"teal":54,"source":83,"pc":[232]},{"teal":55,"source":83,"pc":[233]},{"teal":59,"source":84,"pc":[234,235]},{"teal":60,"source":84,"pc":[236]},{"teal":61,"source":84,"pc":[237]},{"teal":65,"source":85,"pc":[238,239]},{"teal":66,"source":85,"pc":[240]},{"teal":67,"source":85,"pc":[241]},{"teal":68,"source":81,"pc":[242]},{"teal":73,"source":88,"pc":[243,244,245]},{"teal":74,"source":88,"pc":[246]},{"teal":77,"source":88,"pc":[247,248,249]},{"teal":78,"source":88,"pc":[250]},{"teal":79,"source":88,"pc":[251]},{"teal":83,"source":88,"pc":[252,253,254]},{"teal":87,"source":90,"pc":[255,256]},{"teal":88,"source":90,"pc":[257,258]},{"teal":89,"source":90,"pc":[259]},{"teal":90,"source":90,"pc":[260]},{"teal":91,"source":88,"pc":[261]},{"teal":96,"source":93,"pc":[262,263,264]},{"teal":97,"source":93,"pc":[265,266,267]},{"teal":100,"source":93,"pc":[268,269,270]},{"teal":101,"source":93,"pc":[271]},{"teal":104,"source":93,"pc":[272,273,274]},{"teal":105,"source":93,"pc":[275]},{"teal":106,"source":93,"pc":[276]},{"teal":110,"source":93,"pc":[277,278,279]},{"teal":114,"source":94,"pc":[280,281]},{"teal":115,"source":94,"pc":[282]},{"teal":116,"source":94,"pc":[283]},{"teal":117,"source":94,"pc":[284]},{"teal":118,"source":94,"pc":[285]},{"teal":119,"source":94,"pc":[286]},{"teal":123,"source":95,"pc":[287,288]},{"teal":124,"source":95,"pc":[289,290]},{"teal":125,"source":95,"pc":[291,292]},{"teal":126,"source":95,"pc":[293]},{"teal":127,"source":93,"pc":[294]},{"teal":132,"source":98,"pc":[295,296,297]},{"teal":133,"source":98,"pc":[298]},{"teal":134,"source":98,"pc":[299]},{"teal":138,"source":98,"pc":[300,301,302]},{"teal":142,"source":99,"pc":[303,304]},{"teal":143,"source":99,"pc":[305]},{"teal":144,"source":99,"pc":[306,307]},{"teal":145,"source":99,"pc":[308]},{"teal":146,"source":99,"pc":[309,310]},{"teal":147,"source":99,"pc":[311]},{"teal":148,"source":99,"pc":[312]},{"teal":149,"source":98,"pc":[313]},{"teal":154,"source":105,"pc":[314,315,316]},{"teal":155,"source":105,"pc":[317]},{"teal":156,"source":105,"pc":[318]},{"teal":162,"source":105,"pc":[319,320,321]},{"teal":163,"source":105,"pc":[322]},{"teal":168,"source":116,"pc":[323]},{"teal":171,"source":116,"pc":[324,325,326]},{"teal":172,"source":116,"pc":[327]},{"teal":173,"source":116,"pc":[328]},{"teal":174,"source":116,"pc":[329]},{"teal":175,"source":116,"pc":[330]},{"teal":187,"source":116,"pc":[331,332,333]},{"teal":212,"source":120,"pc":[334,335,336]},{"teal":213,"source":120,"pc":[337,338,339]},{"teal":214,"source":120,"pc":[340]},{"teal":215,"source":130,"pc":[341,342]},{"teal":216,"source":129,"pc":[343,344]},{"teal":217,"source":128,"pc":[345]},{"teal":218,"source":128,"pc":[346,347]},{"teal":219,"source":125,"pc":[348,349]},{"teal":220,"source":122,"pc":[350]},{"teal":221,"source":121,"pc":[351,352,353]},{"teal":222,"source":121,"pc":[354]},{"teal":223,"source":121,"pc":[355]},{"teal":224,"source":133,"pc":[356,357]},{"teal":225,"source":134,"pc":[358,359,360]},{"teal":226,"source":134,"pc":[361,362,363]},{"teal":227,"source":133,"pc":[364]},{"teal":228,"source":133,"pc":[365]},{"teal":229,"source":133,"pc":[366]},{"teal":230,"source":138,"pc":[367,368,369]},{"teal":231,"source":137,"pc":[370,371,372]},{"teal":232,"source":137,"pc":[373]},{"teal":233,"source":137,"pc":[374]},{"teal":234,"source":116,"pc":[375]},{"teal":239,"source":146,"pc":[376]},{"teal":242,"source":146,"pc":[377,378,379]},{"teal":243,"source":146,"pc":[380]},{"teal":244,"source":146,"pc":[381]},{"teal":245,"source":146,"pc":[382]},{"teal":246,"source":146,"pc":[383]},{"teal":252,"source":146,"pc":[384,385,386]},{"teal":268,"source":152,"pc":[387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428]},{"teal":269,"source":153,"pc":[429,430,431]},{"teal":270,"source":153,"pc":[432]},{"teal":271,"source":153,"pc":[433]},{"teal":272,"source":154,"pc":[434,435,436]},{"teal":273,"source":154,"pc":[437]},{"teal":274,"source":154,"pc":[438]},{"teal":275,"source":155,"pc":[439,440,441]},{"teal":276,"source":155,"pc":[442]},{"teal":277,"source":155,"pc":[443]},{"teal":278,"source":156,"pc":[444,445,446,447,448,449,450,451,452,453]},{"teal":279,"source":156,"pc":[454]},{"teal":280,"source":157,"pc":[455,456,457,458,459,460,461,462,463,464]},{"teal":281,"source":157,"pc":[465]},{"teal":282,"source":158,"pc":[466,467,468,469,470,471,472,473,474,475]},{"teal":283,"source":158,"pc":[476]},{"teal":284,"source":146,"pc":[477]},{"teal":289,"source":166,"pc":[478]},{"teal":292,"source":166,"pc":[479,480,481]},{"teal":293,"source":166,"pc":[482]},{"teal":294,"source":166,"pc":[483]},{"teal":295,"source":166,"pc":[484]},{"teal":296,"source":166,"pc":[485]},{"teal":297,"source":166,"pc":[486]},{"teal":303,"source":166,"pc":[487,488,489]},{"teal":307,"source":167,"pc":[490,491]},{"teal":308,"source":167,"pc":[492]},{"teal":309,"source":166,"pc":[493]},{"teal":314,"source":171,"pc":[494]},{"teal":317,"source":171,"pc":[495,496,497]},{"teal":318,"source":171,"pc":[498]},{"teal":321,"source":171,"pc":[499,500,501]},{"teal":322,"source":171,"pc":[502]},{"teal":323,"source":171,"pc":[503]},{"teal":324,"source":171,"pc":[504]},{"teal":325,"source":171,"pc":[505]},{"teal":329,"source":171,"pc":[506,507,508]},{"teal":333,"source":172,"pc":[509]},{"teal":334,"source":172,"pc":[510,511]},{"teal":335,"source":172,"pc":[512]},{"teal":336,"source":172,"pc":[513,514]},{"teal":337,"source":172,"pc":[515]},{"teal":338,"source":172,"pc":[516]},{"teal":339,"source":172,"pc":[517,518]},{"teal":340,"source":172,"pc":[519]},{"teal":341,"source":171,"pc":[520]},{"teal":346,"source":176,"pc":[521]},{"teal":349,"source":176,"pc":[522,523,524]},{"teal":350,"source":176,"pc":[525]},{"teal":353,"source":176,"pc":[526,527,528]},{"teal":354,"source":176,"pc":[529]},{"teal":355,"source":176,"pc":[530]},{"teal":356,"source":176,"pc":[531]},{"teal":357,"source":176,"pc":[532]},{"teal":361,"source":176,"pc":[533,534,535]},{"teal":365,"source":177,"pc":[536,537]},{"teal":366,"source":177,"pc":[538,539]},{"teal":367,"source":177,"pc":[540]},{"teal":368,"source":177,"pc":[541,542]},{"teal":369,"source":177,"pc":[543]},{"teal":370,"source":177,"pc":[544]},{"teal":371,"source":177,"pc":[545,546]},{"teal":372,"source":177,"pc":[547]},{"teal":373,"source":176,"pc":[548]},{"teal":378,"source":181,"pc":[549]},{"teal":381,"source":181,"pc":[550,551,552]},{"teal":382,"source":181,"pc":[553]},{"teal":385,"source":181,"pc":[554,555,556]},{"teal":386,"source":181,"pc":[557]},{"teal":387,"source":181,"pc":[558]},{"teal":388,"source":181,"pc":[559]},{"teal":389,"source":181,"pc":[560]},{"teal":393,"source":181,"pc":[561,562,563]},{"teal":400,"source":183,"pc":[564]},{"teal":401,"source":183,"pc":[565,566]},{"teal":402,"source":183,"pc":[567]},{"teal":403,"source":183,"pc":[568,569]},{"teal":404,"source":183,"pc":[570]},{"teal":405,"source":183,"pc":[571]},{"teal":406,"source":183,"pc":[572,573]},{"teal":407,"source":183,"pc":[574]},{"teal":408,"source":184,"pc":[575,576]},{"teal":409,"source":184,"pc":[577,578]},{"teal":410,"source":184,"pc":[579]},{"teal":411,"source":184,"pc":[580,581]},{"teal":412,"source":184,"pc":[582]},{"teal":413,"source":184,"pc":[583]},{"teal":414,"source":184,"pc":[584,585]},{"teal":415,"source":184,"pc":[586]},{"teal":416,"source":184,"pc":[587]},{"teal":417,"source":181,"pc":[588]},{"teal":422,"source":195,"pc":[589]},{"teal":425,"source":195,"pc":[590,591,592]},{"teal":426,"source":195,"pc":[593]},{"teal":429,"source":195,"pc":[594,595,596]},{"teal":430,"source":195,"pc":[597]},{"teal":431,"source":195,"pc":[598]},{"teal":432,"source":195,"pc":[599,600]},{"teal":433,"source":195,"pc":[601]},{"teal":434,"source":195,"pc":[602]},{"teal":435,"source":195,"pc":[603,604,605]},{"teal":436,"source":195,"pc":[606]},{"teal":437,"source":195,"pc":[607]},{"teal":438,"source":195,"pc":[608]},{"teal":439,"source":195,"pc":[609]},{"teal":440,"source":195,"pc":[610]},{"teal":441,"source":195,"pc":[611]},{"teal":450,"source":195,"pc":[612,613,614]},{"teal":453,"source":195,"pc":[615]},{"teal":454,"source":195,"pc":[616,617]},{"teal":458,"source":196,"pc":[618]},{"teal":459,"source":196,"pc":[619,620]},{"teal":463,"source":197,"pc":[621,622]},{"teal":464,"source":197,"pc":[623,624]},{"teal":465,"source":197,"pc":[625]},{"teal":466,"source":197,"pc":[626,627]},{"teal":467,"source":197,"pc":[628]},{"teal":468,"source":197,"pc":[629]},{"teal":469,"source":197,"pc":[630,631]},{"teal":470,"source":197,"pc":[632]},{"teal":471,"source":197,"pc":[633,634]},{"teal":475,"source":198,"pc":[635]},{"teal":476,"source":198,"pc":[636,637]},{"teal":481,"source":198,"pc":[638,639]},{"teal":482,"source":198,"pc":[640]},{"teal":483,"source":198,"pc":[641]},{"teal":484,"source":198,"pc":[642,643,644]},{"teal":489,"source":199,"pc":[645,646]},{"teal":490,"source":199,"pc":[647,648]},{"teal":491,"source":199,"pc":[649,650]},{"teal":492,"source":199,"pc":[651]},{"teal":493,"source":199,"pc":[652]},{"teal":494,"source":199,"pc":[653]},{"teal":495,"source":199,"pc":[654]},{"teal":496,"source":199,"pc":[655]},{"teal":497,"source":199,"pc":[656]},{"teal":498,"source":199,"pc":[657]},{"teal":499,"source":199,"pc":[658]},{"teal":500,"source":199,"pc":[659,660,661]},{"teal":503,"source":201,"pc":[662,663,664]},{"teal":508,"source":203,"pc":[665,666]},{"teal":509,"source":203,"pc":[667,668]},{"teal":510,"source":203,"pc":[669,670]},{"teal":511,"source":203,"pc":[671,672]},{"teal":512,"source":203,"pc":[673]},{"teal":513,"source":203,"pc":[674,675]},{"teal":514,"source":203,"pc":[676]},{"teal":515,"source":203,"pc":[677]},{"teal":516,"source":203,"pc":[678,679]},{"teal":521,"source":198,"pc":[680,681]},{"teal":522,"source":198,"pc":[682]},{"teal":523,"source":198,"pc":[683]},{"teal":524,"source":198,"pc":[684,685]},{"teal":525,"source":198,"pc":[686,687,688]},{"teal":530,"source":205,"pc":[689,690]},{"teal":533,"source":195,"pc":[691,692]},{"teal":536,"source":195,"pc":[693,694]},{"teal":537,"source":195,"pc":[695]},{"teal":542,"source":212,"pc":[696]},{"teal":545,"source":212,"pc":[697,698,699]},{"teal":546,"source":212,"pc":[700]},{"teal":549,"source":212,"pc":[701,702,703]},{"teal":550,"source":212,"pc":[704]},{"teal":553,"source":212,"pc":[705,706,707]},{"teal":554,"source":212,"pc":[708]},{"teal":555,"source":212,"pc":[709]},{"teal":556,"source":212,"pc":[710]},{"teal":557,"source":212,"pc":[711]},{"teal":558,"source":212,"pc":[712]},{"teal":562,"source":212,"pc":[713,714,715]},{"teal":569,"source":214,"pc":[716,717]},{"teal":570,"source":214,"pc":[718]},{"teal":571,"source":214,"pc":[719]},{"teal":572,"source":214,"pc":[720]},{"teal":573,"source":214,"pc":[721,722,723]},{"teal":574,"source":214,"pc":[724,725]},{"teal":575,"source":214,"pc":[726]},{"teal":576,"source":214,"pc":[727]},{"teal":577,"source":214,"pc":[728]},{"teal":581,"source":213,"errorMessage":"pool id must be between 1 and number of pools for this validator","pc":[729]},{"teal":585,"source":217,"pc":[730,731]},{"teal":586,"source":217,"pc":[732,733]},{"teal":587,"source":217,"pc":[734]},{"teal":588,"source":217,"pc":[735]},{"teal":589,"source":217,"pc":[736,737]},{"teal":590,"source":217,"pc":[738]},{"teal":591,"source":217,"pc":[739]},{"teal":592,"source":217,"pc":[740]},{"teal":593,"source":217,"pc":[741]},{"teal":594,"source":217,"pc":[742]},{"teal":595,"source":217,"pc":[743]},{"teal":596,"source":217,"pc":[744,745]},{"teal":597,"source":217,"pc":[746]},{"teal":598,"source":217,"pc":[747]},{"teal":599,"source":217,"pc":[748,749]},{"teal":600,"source":217,"pc":[750]},{"teal":601,"source":217,"pc":[751]},{"teal":602,"source":212,"pc":[752]},{"teal":607,"source":221,"pc":[753]},{"teal":610,"source":221,"pc":[754,755,756]},{"teal":611,"source":221,"pc":[757]},{"teal":612,"source":221,"pc":[758]},{"teal":613,"source":221,"pc":[759]},{"teal":614,"source":221,"pc":[760]},{"teal":617,"source":221,"errorMessage":"argument 0 (poolKey) for getPoolInfo must be a (uint64,uint64,uint64)","pc":[761]},{"teal":620,"source":221,"pc":[762,763,764]},{"teal":621,"source":221,"pc":[765]},{"teal":622,"source":221,"pc":[766]},{"teal":623,"source":221,"pc":[767]},{"teal":624,"source":221,"pc":[768]},{"teal":628,"source":221,"pc":[769,770,771]},{"teal":632,"source":222,"pc":[772,773]},{"teal":633,"source":222,"pc":[774,775]},{"teal":634,"source":222,"pc":[776,777,778]},{"teal":635,"source":222,"pc":[779]},{"teal":636,"source":222,"pc":[780]},{"teal":637,"source":222,"pc":[781]},{"teal":638,"source":222,"pc":[782,783]},{"teal":639,"source":222,"pc":[784]},{"teal":640,"source":222,"pc":[785]},{"teal":641,"source":222,"pc":[786,787]},{"teal":642,"source":222,"pc":[788]},{"teal":643,"source":222,"pc":[789,790]},{"teal":644,"source":222,"pc":[791,792,793]},{"teal":645,"source":222,"pc":[794]},{"teal":646,"source":222,"pc":[795]},{"teal":647,"source":222,"pc":[796]},{"teal":648,"source":222,"pc":[797,798]},{"teal":649,"source":222,"pc":[799]},{"teal":650,"source":221,"pc":[800]},{"teal":655,"source":232,"pc":[801]},{"teal":658,"source":232,"pc":[802,803,804]},{"teal":659,"source":232,"pc":[805]},{"teal":662,"source":232,"pc":[806,807,808]},{"teal":663,"source":232,"pc":[809]},{"teal":664,"source":232,"pc":[810]},{"teal":665,"source":232,"pc":[811]},{"teal":666,"source":232,"pc":[812]},{"teal":667,"source":232,"pc":[813]},{"teal":677,"source":232,"pc":[814,815,816]},{"teal":680,"source":232,"pc":[817]},{"teal":681,"source":232,"pc":[818,819]},{"teal":685,"source":233,"pc":[820,821]},{"teal":686,"source":233,"pc":[822,823]},{"teal":687,"source":233,"pc":[824]},{"teal":688,"source":233,"pc":[825,826]},{"teal":689,"source":233,"pc":[827]},{"teal":690,"source":233,"pc":[828]},{"teal":691,"source":233,"pc":[829,830]},{"teal":692,"source":233,"pc":[831]},{"teal":693,"source":233,"pc":[832]},{"teal":694,"source":233,"pc":[833,834]},{"teal":698,"source":234,"pc":[835,836,837]},{"teal":699,"source":234,"pc":[838,839]},{"teal":700,"source":234,"pc":[840]},{"teal":701,"source":234,"pc":[841,842]},{"teal":705,"source":235,"pc":[843,844,845]},{"teal":706,"source":235,"pc":[846]},{"teal":707,"source":235,"pc":[847]},{"teal":708,"source":235,"pc":[848,849]},{"teal":709,"source":235,"pc":[850]},{"teal":710,"source":235,"pc":[851]},{"teal":711,"source":235,"pc":[852,853]},{"teal":712,"source":235,"pc":[854]},{"teal":713,"source":235,"pc":[855]},{"teal":714,"source":235,"pc":[856,857]},{"teal":719,"source":236,"pc":[858,859]},{"teal":720,"source":236,"pc":[860]},{"teal":721,"source":236,"pc":[861]},{"teal":722,"source":236,"pc":[862,863,864]},{"teal":727,"source":237,"pc":[865,866,867]},{"teal":728,"source":237,"pc":[868,869]},{"teal":734,"source":239,"pc":[870,871]},{"teal":735,"source":239,"pc":[872,873]},{"teal":736,"source":239,"pc":[874]},{"teal":737,"source":239,"pc":[875,876,877]},{"teal":742,"source":240,"pc":[878,879]},{"teal":743,"source":240,"pc":[880,881]},{"teal":748,"source":242,"pc":[882,883]},{"teal":751,"source":232,"pc":[884,885]},{"teal":754,"source":232,"pc":[886,887]},{"teal":755,"source":232,"pc":[888]},{"teal":760,"source":250,"pc":[889]},{"teal":763,"source":250,"pc":[890,891,892]},{"teal":764,"source":250,"pc":[893]},{"teal":765,"source":250,"pc":[894]},{"teal":766,"source":250,"pc":[895,896]},{"teal":767,"source":250,"pc":[897]},{"teal":770,"source":250,"errorMessage":"argument 0 (staker) for doesStakerNeedToPayMBR must be a address","pc":[898]},{"teal":773,"source":250,"pc":[899,900,901]},{"teal":774,"source":250,"pc":[902,903]},{"teal":775,"source":250,"pc":[904]},{"teal":776,"source":250,"pc":[905,906]},{"teal":777,"source":250,"pc":[907]},{"teal":778,"source":250,"pc":[908]},{"teal":779,"source":250,"pc":[909]},{"teal":780,"source":250,"pc":[910]},{"teal":781,"source":250,"pc":[911]},{"teal":788,"source":250,"pc":[912,913,914]},{"teal":792,"source":251,"pc":[915]},{"teal":793,"source":251,"pc":[916,917]},{"teal":794,"source":251,"pc":[918]},{"teal":795,"source":251,"pc":[919]},{"teal":796,"source":251,"pc":[920]},{"teal":797,"source":251,"pc":[921]},{"teal":798,"source":251,"pc":[922]},{"teal":799,"source":250,"pc":[923]},{"teal":804,"source":260,"pc":[924]},{"teal":807,"source":260,"pc":[925,926,927]},{"teal":808,"source":260,"pc":[928]},{"teal":809,"source":260,"pc":[929]},{"teal":810,"source":260,"pc":[930,931]},{"teal":811,"source":260,"pc":[932]},{"teal":814,"source":260,"errorMessage":"argument 0 (staker) for getStakedPoolsForAccount must be a address","pc":[933]},{"teal":817,"source":260,"pc":[934,935,936]},{"teal":818,"source":260,"pc":[937]},{"teal":819,"source":260,"pc":[938]},{"teal":820,"source":260,"pc":[939]},{"teal":821,"source":260,"pc":[940]},{"teal":822,"source":260,"pc":[941]},{"teal":823,"source":260,"pc":[942,943,944]},{"teal":824,"source":260,"pc":[945]},{"teal":825,"source":260,"pc":[946]},{"teal":826,"source":260,"pc":[947]},{"teal":827,"source":260,"pc":[948]},{"teal":828,"source":260,"pc":[949]},{"teal":829,"source":260,"pc":[950]},{"teal":838,"source":260,"pc":[951,952,953]},{"teal":841,"source":260,"pc":[954]},{"teal":842,"source":260,"pc":[955,956]},{"teal":847,"source":261,"pc":[957]},{"teal":848,"source":261,"pc":[958,959]},{"teal":849,"source":261,"pc":[960]},{"teal":850,"source":261,"pc":[961]},{"teal":851,"source":261,"pc":[962]},{"teal":852,"source":261,"pc":[963]},{"teal":853,"source":261,"pc":[964]},{"teal":854,"source":261,"pc":[965,966,967]},{"teal":859,"source":262,"pc":[968]},{"teal":860,"source":262,"pc":[969,970,971]},{"teal":865,"source":264,"pc":[972]},{"teal":866,"source":264,"pc":[973,974]},{"teal":870,"source":265,"pc":[975]},{"teal":871,"source":265,"pc":[976,977]},{"teal":872,"source":265,"pc":[978]},{"teal":873,"source":265,"pc":[979]},{"teal":876,"source":265,"errorMessage":"box value does not exist: this.stakerPoolSet(staker).value","pc":[980]},{"teal":877,"source":265,"pc":[981,982]},{"teal":881,"source":266,"pc":[983]},{"teal":882,"source":266,"pc":[984,985]},{"teal":887,"source":266,"pc":[986,987]},{"teal":888,"source":266,"pc":[988,989]},{"teal":889,"source":266,"pc":[990]},{"teal":890,"source":266,"pc":[991,992,993]},{"teal":895,"source":267,"pc":[994,995]},{"teal":896,"source":267,"pc":[996,997]},{"teal":897,"source":267,"pc":[998]},{"teal":898,"source":267,"pc":[999]},{"teal":899,"source":267,"pc":[1000]},{"teal":900,"source":267,"pc":[1001]},{"teal":901,"source":267,"pc":[1002]},{"teal":902,"source":267,"pc":[1003]},{"teal":903,"source":267,"pc":[1004]},{"teal":904,"source":267,"pc":[1005]},{"teal":905,"source":267,"pc":[1006]},{"teal":906,"source":267,"pc":[1007,1008,1009]},{"teal":911,"source":268,"pc":[1010,1011]},{"teal":912,"source":268,"pc":[1012,1013]},{"teal":913,"source":268,"pc":[1014,1015]},{"teal":914,"source":268,"pc":[1016]},{"teal":915,"source":268,"pc":[1017]},{"teal":916,"source":268,"pc":[1018]},{"teal":917,"source":268,"pc":[1019]},{"teal":918,"source":268,"pc":[1020]},{"teal":919,"source":268,"pc":[1021,1022]},{"teal":926,"source":266,"pc":[1023,1024]},{"teal":927,"source":266,"pc":[1025]},{"teal":928,"source":266,"pc":[1026]},{"teal":929,"source":266,"pc":[1027,1028]},{"teal":930,"source":266,"pc":[1029,1030,1031]},{"teal":935,"source":271,"pc":[1032,1033]},{"teal":939,"source":260,"pc":[1034,1035]},{"teal":942,"source":260,"pc":[1036,1037]},{"teal":943,"source":260,"pc":[1038]},{"teal":948,"source":282,"pc":[1039]},{"teal":951,"source":282,"pc":[1040,1041,1042]},{"teal":952,"source":282,"pc":[1043]},{"teal":955,"source":282,"pc":[1044,1045,1046]},{"teal":956,"source":282,"pc":[1047]},{"teal":957,"source":282,"pc":[1048]},{"teal":958,"source":282,"pc":[1049]},{"teal":959,"source":282,"pc":[1050]},{"teal":969,"source":282,"pc":[1051,1052,1053]},{"teal":973,"source":283,"pc":[1054,1055]},{"teal":974,"source":283,"pc":[1056,1057]},{"teal":975,"source":283,"pc":[1058]},{"teal":976,"source":283,"pc":[1059,1060]},{"teal":977,"source":283,"pc":[1061]},{"teal":978,"source":283,"pc":[1062]},{"teal":979,"source":283,"pc":[1063,1064]},{"teal":980,"source":283,"pc":[1065]},{"teal":981,"source":282,"pc":[1066]},{"teal":986,"source":287,"pc":[1067]},{"teal":989,"source":287,"pc":[1068,1069,1070]},{"teal":990,"source":287,"pc":[1071]},{"teal":993,"source":287,"pc":[1072,1073,1074]},{"teal":994,"source":287,"pc":[1075]},{"teal":995,"source":287,"pc":[1076]},{"teal":996,"source":287,"pc":[1077]},{"teal":997,"source":287,"pc":[1078]},{"teal":1001,"source":287,"pc":[1079,1080,1081]},{"teal":1005,"source":288,"pc":[1082]},{"teal":1006,"source":288,"pc":[1083,1084]},{"teal":1007,"source":288,"pc":[1085]},{"teal":1008,"source":288,"pc":[1086]},{"teal":1009,"source":288,"pc":[1087]},{"teal":1010,"source":288,"pc":[1088]},{"teal":1011,"source":288,"pc":[1089]},{"teal":1014,"source":288,"errorMessage":"the specified validator id doesn't exist","pc":[1090]},{"teal":1018,"source":290,"pc":[1091,1092]},{"teal":1019,"source":290,"pc":[1093,1094]},{"teal":1020,"source":290,"pc":[1095]},{"teal":1021,"source":290,"pc":[1096,1097]},{"teal":1022,"source":290,"pc":[1098]},{"teal":1023,"source":290,"pc":[1099]},{"teal":1024,"source":290,"pc":[1100,1101]},{"teal":1025,"source":290,"pc":[1102]},{"teal":1026,"source":287,"pc":[1103]},{"teal":1031,"source":293,"pc":[1104]},{"teal":1034,"source":293,"pc":[1105,1106,1107]},{"teal":1035,"source":293,"pc":[1108]},{"teal":1036,"source":293,"pc":[1109]},{"teal":1037,"source":293,"pc":[1110]},{"teal":1038,"source":293,"pc":[1111]},{"teal":1039,"source":293,"pc":[1112]},{"teal":1043,"source":293,"pc":[1113,1114,1115]},{"teal":1047,"source":294,"pc":[1116,1117]},{"teal":1048,"source":293,"pc":[1118]},{"teal":1053,"source":305,"pc":[1119]},{"teal":1056,"source":305,"pc":[1120,1121,1122]},{"teal":1057,"source":305,"pc":[1123]},{"teal":1058,"source":305,"pc":[1124]},{"teal":1059,"source":305,"pc":[1125,1126]},{"teal":1060,"source":305,"pc":[1127]},{"teal":1063,"source":305,"errorMessage":"argument 0 (config) for addValidator must be a (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)","pc":[1128]},{"teal":1066,"source":305,"pc":[1129,1130,1131]},{"teal":1067,"source":305,"pc":[1132,1133,1134]},{"teal":1070,"source":305,"pc":[1135,1136]},{"teal":1071,"source":305,"pc":[1137]},{"teal":1072,"source":305,"pc":[1138]},{"teal":1073,"source":305,"pc":[1139]},{"teal":1074,"source":305,"pc":[1140,1141]},{"teal":1075,"source":305,"pc":[1142]},{"teal":1076,"source":305,"pc":[1143]},{"teal":1079,"source":305,"errorMessage":"argument 2 (mbrPayment) for addValidator must be a pay transaction","pc":[1144]},{"teal":1082,"source":305,"pc":[1145,1146,1147]},{"teal":1083,"source":305,"pc":[1148]},{"teal":1084,"source":305,"pc":[1149]},{"teal":1085,"source":305,"pc":[1150]},{"teal":1086,"source":305,"pc":[1151]},{"teal":1087,"source":305,"pc":[1152]},{"teal":1099,"source":305,"pc":[1153,1154,1155]},{"teal":1102,"source":305,"pc":[1156]},{"teal":1106,"source":306,"pc":[1157,1158]},{"teal":1107,"source":306,"pc":[1159,1160,1161]},{"teal":1112,"source":308,"pc":[1162,1163]},{"teal":1113,"source":308,"pc":[1164,1165]},{"teal":1114,"source":308,"pc":[1166,1167]},{"teal":1115,"source":308,"pc":[1168]},{"teal":1118,"source":308,"errorMessage":"transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1169]},{"teal":1121,"source":308,"pc":[1170,1171]},{"teal":1122,"source":308,"pc":[1172,1173]},{"teal":1123,"source":308,"pc":[1174,1175,1176]},{"teal":1124,"source":308,"pc":[1177,1178,1179]},{"teal":1125,"source":308,"pc":[1180]},{"teal":1126,"source":308,"pc":[1181]},{"teal":1129,"source":308,"errorMessage":"transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"amount\",\"expected\":\"this.getMbrAmounts().addValidatorMbr\"}","pc":[1182]},{"teal":1133,"source":310,"pc":[1183,1184]},{"teal":1134,"source":310,"pc":[1185,1186]},{"teal":1135,"source":310,"pc":[1187,1188,1189,1190,1191]},{"teal":1136,"source":310,"pc":[1192]},{"teal":1139,"source":310,"errorMessage":"fee must be 10 ALGO or more to prevent spamming of validators","pc":[1193]},{"teal":1143,"source":313,"pc":[1194,1195]},{"teal":1144,"source":313,"pc":[1196]},{"teal":1145,"source":313,"pc":[1197]},{"teal":1146,"source":313,"pc":[1198]},{"teal":1147,"source":313,"pc":[1199,1200]},{"teal":1151,"source":314,"pc":[1201,1202]},{"teal":1152,"source":314,"pc":[1203,1204]},{"teal":1153,"source":314,"pc":[1205]},{"teal":1157,"source":316,"pc":[1206]},{"teal":1158,"source":316,"pc":[1207,1208]},{"teal":1159,"source":316,"pc":[1209]},{"teal":1160,"source":316,"pc":[1210]},{"teal":1161,"source":316,"pc":[1211,1212,1213]},{"teal":1162,"source":316,"pc":[1214]},{"teal":1163,"source":316,"pc":[1215]},{"teal":1167,"source":317,"pc":[1216]},{"teal":1168,"source":317,"pc":[1217,1218]},{"teal":1169,"source":317,"pc":[1219]},{"teal":1170,"source":317,"pc":[1220,1221]},{"teal":1171,"source":317,"pc":[1222]},{"teal":1172,"source":317,"pc":[1223]},{"teal":1173,"source":317,"pc":[1224,1225]},{"teal":1174,"source":317,"pc":[1226]},{"teal":1178,"source":318,"pc":[1227]},{"teal":1179,"source":318,"pc":[1228,1229]},{"teal":1180,"source":318,"pc":[1230]},{"teal":1181,"source":318,"pc":[1231]},{"teal":1182,"source":318,"pc":[1232,1233]},{"teal":1183,"source":318,"pc":[1234]},{"teal":1184,"source":318,"pc":[1235]},{"teal":1185,"source":318,"pc":[1236,1237]},{"teal":1186,"source":318,"pc":[1238]},{"teal":1191,"source":321,"pc":[1239,1240]},{"teal":1192,"source":321,"pc":[1241,1242,1243]},{"teal":1193,"source":321,"pc":[1244]},{"teal":1194,"source":321,"pc":[1245]},{"teal":1195,"source":321,"pc":[1246]},{"teal":1196,"source":321,"pc":[1247,1248,1249]},{"teal":1201,"source":323,"pc":[1250,1251]},{"teal":1202,"source":323,"pc":[1252,1253,1254]},{"teal":1203,"source":323,"pc":[1255]},{"teal":1204,"source":323,"pc":[1256,1257,1258]},{"teal":1207,"source":323,"errorMessage":"provided NFD must be valid","pc":[1259]},{"teal":1214,"source":326,"pc":[1260,1261]},{"teal":1215,"source":326,"pc":[1262,1263]},{"teal":1216,"source":326,"pc":[1264,1265,1266]},{"teal":1217,"source":326,"pc":[1267]},{"teal":1218,"source":326,"pc":[1268,1269]},{"teal":1219,"source":326,"pc":[1270]},{"teal":1222,"source":326,"errorMessage":"global state value does not exist: AppID.fromUint64(config.nfdForInfo).globalState('i.owner.a')","pc":[1271]},{"teal":1223,"source":326,"pc":[1272]},{"teal":1226,"source":325,"errorMessage":"If specifying NFD, account adding validator must be owner","pc":[1273]},{"teal":1233,"source":331,"pc":[1274,1275]},{"teal":1234,"source":331,"pc":[1276,1277,1278]},{"teal":1235,"source":331,"pc":[1279]},{"teal":1236,"source":331,"pc":[1280,1281]},{"teal":1237,"source":331,"pc":[1282]},{"teal":1238,"source":331,"pc":[1283]},{"teal":1239,"source":331,"pc":[1284,1285,1286]},{"teal":1240,"source":332,"pc":[1287,1288]},{"teal":1241,"source":332,"pc":[1289,1290,1291]},{"teal":1242,"source":332,"pc":[1292]},{"teal":1243,"source":332,"pc":[1293,1294]},{"teal":1244,"source":332,"pc":[1295]},{"teal":1245,"source":331,"pc":[1296]},{"teal":1248,"source":330,"pc":[1297,1298,1299]},{"teal":1256,"source":336,"pc":[1300,1301]},{"teal":1257,"source":336,"pc":[1302,1303,1304]},{"teal":1258,"source":336,"pc":[1305]},{"teal":1259,"source":336,"pc":[1306,1307,1308]},{"teal":1262,"source":335,"errorMessage":"provided NFD App id for gating must be valid NFD","pc":[1309]},{"teal":1267,"source":340,"pc":[1310,1311,1312,1313,1314,1315]},{"teal":1268,"source":340,"pc":[1316,1317]},{"teal":1269,"source":340,"pc":[1318]},{"teal":1270,"source":340,"pc":[1319,1320]},{"teal":1271,"source":340,"pc":[1321,1322,1323]},{"teal":1272,"source":340,"pc":[1324]},{"teal":1273,"source":340,"pc":[1325,1326]},{"teal":1274,"source":340,"pc":[1327,1328,1329]},{"teal":1275,"source":340,"pc":[1330]},{"teal":1276,"source":340,"pc":[1331]},{"teal":1277,"source":340,"pc":[1332]},{"teal":1281,"source":341,"pc":[1333,1334]},{"teal":1284,"source":305,"pc":[1335,1336]},{"teal":1285,"source":305,"pc":[1337]},{"teal":1290,"source":351,"pc":[1338,1339,1340]},{"teal":1291,"source":351,"pc":[1341]},{"teal":1292,"source":351,"pc":[1342]},{"teal":1293,"source":351,"pc":[1343,1344]},{"teal":1294,"source":351,"pc":[1345]},{"teal":1297,"source":351,"errorMessage":"argument 0 (manager) for changeValidatorManager must be a address","pc":[1346]},{"teal":1300,"source":351,"pc":[1347,1348,1349]},{"teal":1301,"source":351,"pc":[1350]},{"teal":1304,"source":351,"pc":[1351,1352,1353]},{"teal":1305,"source":351,"pc":[1354]},{"teal":1306,"source":351,"pc":[1355]},{"teal":1316,"source":351,"pc":[1356,1357,1358]},{"teal":1320,"source":352,"pc":[1359,1360]},{"teal":1321,"source":352,"pc":[1361,1362,1363]},{"teal":1325,"source":353,"pc":[1364,1365]},{"teal":1326,"source":353,"pc":[1366,1367]},{"teal":1327,"source":353,"pc":[1368]},{"teal":1330,"source":353,"errorMessage":"needs to at least be valid address","pc":[1369]},{"teal":1334,"source":354,"pc":[1370,1371]},{"teal":1335,"source":354,"pc":[1372,1373]},{"teal":1336,"source":354,"pc":[1374]},{"teal":1337,"source":354,"pc":[1375,1376]},{"teal":1338,"source":354,"pc":[1377]},{"teal":1339,"source":354,"pc":[1378]},{"teal":1340,"source":354,"pc":[1379,1380]},{"teal":1341,"source":354,"pc":[1381]},{"teal":1342,"source":351,"pc":[1382]},{"teal":1347,"source":365,"pc":[1383,1384,1385]},{"teal":1348,"source":365,"pc":[1386]},{"teal":1351,"source":365,"pc":[1387,1388,1389]},{"teal":1352,"source":365,"pc":[1390]},{"teal":1355,"source":365,"pc":[1391,1392,1393]},{"teal":1356,"source":365,"pc":[1394]},{"teal":1359,"source":365,"pc":[1395,1396,1397]},{"teal":1360,"source":365,"pc":[1398]},{"teal":1361,"source":365,"pc":[1399]},{"teal":1372,"source":365,"pc":[1400,1401,1402]},{"teal":1376,"source":366,"pc":[1403,1404]},{"teal":1377,"source":366,"pc":[1405,1406,1407]},{"teal":1381,"source":367,"pc":[1408,1409]},{"teal":1382,"source":367,"pc":[1410,1411]},{"teal":1383,"source":367,"pc":[1412]},{"teal":1384,"source":367,"pc":[1413]},{"teal":1385,"source":367,"pc":[1414,1415]},{"teal":1386,"source":367,"pc":[1416]},{"teal":1387,"source":367,"pc":[1417]},{"teal":1388,"source":367,"pc":[1418,1419]},{"teal":1389,"source":367,"pc":[1420]},{"teal":1393,"source":368,"pc":[1421,1422,1423]},{"teal":1394,"source":368,"pc":[1424,1425]},{"teal":1395,"source":368,"pc":[1426]},{"teal":1396,"source":368,"pc":[1427]},{"teal":1397,"source":368,"pc":[1428,1429]},{"teal":1398,"source":368,"pc":[1430]},{"teal":1399,"source":368,"pc":[1431]},{"teal":1400,"source":368,"pc":[1432,1433]},{"teal":1401,"source":368,"pc":[1434]},{"teal":1402,"source":365,"pc":[1435]},{"teal":1407,"source":379,"pc":[1436,1437,1438]},{"teal":1408,"source":379,"pc":[1439,1440,1441]},{"teal":1411,"source":379,"pc":[1442,1443,1444]},{"teal":1412,"source":379,"pc":[1445]},{"teal":1415,"source":379,"pc":[1446,1447,1448]},{"teal":1416,"source":379,"pc":[1449]},{"teal":1419,"source":379,"pc":[1450,1451,1452]},{"teal":1420,"source":379,"pc":[1453]},{"teal":1421,"source":379,"pc":[1454]},{"teal":1432,"source":379,"pc":[1455,1456,1457]},{"teal":1436,"source":380,"pc":[1458,1459]},{"teal":1437,"source":380,"pc":[1460,1461,1462]},{"teal":1441,"source":382,"pc":[1463,1464]},{"teal":1442,"source":382,"pc":[1465,1466,1467]},{"teal":1445,"source":382,"errorMessage":"provided NFD must be valid","pc":[1468]},{"teal":1452,"source":385,"pc":[1469,1470]},{"teal":1453,"source":385,"pc":[1471,1472]},{"teal":1454,"source":385,"pc":[1473,1474]},{"teal":1455,"source":385,"pc":[1475]},{"teal":1458,"source":385,"errorMessage":"global state value does not exist: AppID.fromUint64(nfdAppID).globalState('i.owner.a')","pc":[1476]},{"teal":1459,"source":385,"pc":[1477]},{"teal":1462,"source":384,"errorMessage":"If specifying NFD, account adding validator must be owner","pc":[1478]},{"teal":1466,"source":388,"pc":[1479,1480]},{"teal":1467,"source":388,"pc":[1481,1482]},{"teal":1468,"source":388,"pc":[1483]},{"teal":1469,"source":388,"pc":[1484]},{"teal":1470,"source":388,"pc":[1485,1486]},{"teal":1471,"source":388,"pc":[1487]},{"teal":1472,"source":388,"pc":[1488]},{"teal":1473,"source":388,"pc":[1489,1490]},{"teal":1474,"source":388,"pc":[1491]},{"teal":1475,"source":379,"pc":[1492]},{"teal":1480,"source":395,"pc":[1493,1494,1495]},{"teal":1481,"source":395,"pc":[1496]},{"teal":1482,"source":395,"pc":[1497]},{"teal":1483,"source":395,"pc":[1498,1499]},{"teal":1484,"source":395,"pc":[1500]},{"teal":1487,"source":395,"errorMessage":"argument 0 (commissionAddress) for changeValidatorCommissionAddress must be a address","pc":[1501]},{"teal":1490,"source":395,"pc":[1502,1503,1504]},{"teal":1491,"source":395,"pc":[1505]},{"teal":1494,"source":395,"pc":[1506,1507,1508]},{"teal":1495,"source":395,"pc":[1509]},{"teal":1496,"source":395,"pc":[1510]},{"teal":1503,"source":395,"pc":[1511,1512,1513]},{"teal":1507,"source":396,"pc":[1514,1515]},{"teal":1508,"source":396,"pc":[1516,1517,1518]},{"teal":1512,"source":397,"pc":[1519,1520]},{"teal":1513,"source":397,"pc":[1521,1522]},{"teal":1514,"source":397,"pc":[1523]},{"teal":1515,"source":397,"pc":[1524]},{"teal":1519,"source":398,"pc":[1525,1526,1527]},{"teal":1520,"source":398,"pc":[1528,1529]},{"teal":1521,"source":398,"pc":[1530]},{"teal":1522,"source":398,"pc":[1531,1532]},{"teal":1523,"source":398,"pc":[1533]},{"teal":1524,"source":398,"pc":[1534]},{"teal":1525,"source":398,"pc":[1535,1536]},{"teal":1526,"source":398,"pc":[1537]},{"teal":1527,"source":395,"pc":[1538]},{"teal":1532,"source":411,"pc":[1539,1540,1541]},{"teal":1533,"source":411,"pc":[1542]},{"teal":1536,"source":410,"pc":[1543,1544,1545]},{"teal":1537,"source":410,"pc":[1546]},{"teal":1540,"source":409,"pc":[1547,1548,1549]},{"teal":1541,"source":409,"pc":[1550]},{"teal":1542,"source":409,"pc":[1551]},{"teal":1543,"source":409,"pc":[1552,1553]},{"teal":1544,"source":409,"pc":[1554]},{"teal":1547,"source":409,"errorMessage":"argument 2 (EntryGatingAssets) for changeValidatorRewardInfo must be a uint64[4]","pc":[1555]},{"teal":1550,"source":408,"pc":[1556,1557,1558]},{"teal":1551,"source":408,"pc":[1559]},{"teal":1552,"source":408,"pc":[1560]},{"teal":1553,"source":408,"pc":[1561,1562]},{"teal":1554,"source":408,"pc":[1563]},{"teal":1557,"source":408,"errorMessage":"argument 3 (EntryGatingAddress) for changeValidatorRewardInfo must be a address","pc":[1564]},{"teal":1560,"source":407,"pc":[1565,1566,1567]},{"teal":1561,"source":407,"pc":[1568]},{"teal":1562,"source":407,"pc":[1569]},{"teal":1563,"source":407,"pc":[1570]},{"teal":1564,"source":407,"pc":[1571]},{"teal":1567,"source":407,"errorMessage":"argument 4 (EntryGatingType) for changeValidatorRewardInfo must be a uint8","pc":[1572]},{"teal":1568,"source":407,"pc":[1573]},{"teal":1571,"source":406,"pc":[1574,1575,1576]},{"teal":1572,"source":406,"pc":[1577]},{"teal":1575,"source":405,"pc":[1578,1579,1580]},{"teal":1576,"source":405,"pc":[1581]},{"teal":1577,"source":405,"pc":[1582]},{"teal":1584,"source":405,"pc":[1583,1584,1585]},{"teal":1588,"source":413,"pc":[1586,1587]},{"teal":1589,"source":413,"pc":[1588,1589,1590]},{"teal":1596,"source":416,"pc":[1591,1592]},{"teal":1597,"source":416,"pc":[1593]},{"teal":1598,"source":416,"pc":[1594]},{"teal":1599,"source":416,"pc":[1595]},{"teal":1600,"source":416,"pc":[1596,1597,1598]},{"teal":1601,"source":416,"pc":[1599,1600]},{"teal":1602,"source":416,"pc":[1601,1602]},{"teal":1603,"source":416,"pc":[1603]},{"teal":1604,"source":416,"pc":[1604]},{"teal":1608,"source":415,"errorMessage":"invalid Entry gating type","pc":[1605]},{"teal":1613,"source":419,"pc":[1606,1607]},{"teal":1614,"source":419,"pc":[1608]},{"teal":1615,"source":419,"pc":[1609]},{"teal":1616,"source":419,"pc":[1610,1611,1612]},{"teal":1621,"source":420,"pc":[1613,1614]},{"teal":1622,"source":420,"pc":[1615,1616]},{"teal":1623,"source":420,"pc":[1617]},{"teal":1624,"source":420,"pc":[1618]},{"teal":1631,"source":423,"pc":[1619,1620]},{"teal":1632,"source":423,"pc":[1621,1622]},{"teal":1633,"source":423,"pc":[1623]},{"teal":1634,"source":423,"pc":[1624]},{"teal":1635,"source":423,"pc":[1625,1626,1627]},{"teal":1636,"source":424,"pc":[1628,1629]},{"teal":1637,"source":424,"pc":[1630,1631]},{"teal":1638,"source":424,"pc":[1632]},{"teal":1639,"source":423,"pc":[1633]},{"teal":1642,"source":422,"pc":[1634,1635,1636]},{"teal":1647,"source":426,"pc":[1637,1638]},{"teal":1648,"source":426,"pc":[1639,1640,1641]},{"teal":1649,"source":426,"pc":[1642]},{"teal":1650,"source":426,"pc":[1643,1644,1645]},{"teal":1653,"source":426,"errorMessage":"provided NFD App id for gating must be valid NFD","pc":[1646]},{"teal":1658,"source":428,"pc":[1647,1648]},{"teal":1659,"source":428,"pc":[1649,1650]},{"teal":1660,"source":428,"pc":[1651]},{"teal":1661,"source":428,"pc":[1652,1653,1654]},{"teal":1662,"source":428,"pc":[1655]},{"teal":1663,"source":428,"pc":[1656,1657]},{"teal":1664,"source":428,"pc":[1658]},{"teal":1665,"source":428,"pc":[1659]},{"teal":1666,"source":428,"pc":[1660,1661]},{"teal":1667,"source":428,"pc":[1662]},{"teal":1671,"source":429,"pc":[1663,1664]},{"teal":1672,"source":429,"pc":[1665,1666]},{"teal":1673,"source":429,"pc":[1667]},{"teal":1674,"source":429,"pc":[1668,1669]},{"teal":1675,"source":429,"pc":[1670]},{"teal":1676,"source":429,"pc":[1671]},{"teal":1677,"source":429,"pc":[1672,1673]},{"teal":1678,"source":429,"pc":[1674]},{"teal":1682,"source":430,"pc":[1675,1676]},{"teal":1683,"source":430,"pc":[1677,1678]},{"teal":1684,"source":430,"pc":[1679]},{"teal":1685,"source":430,"pc":[1680,1681]},{"teal":1686,"source":430,"pc":[1682]},{"teal":1687,"source":430,"pc":[1683]},{"teal":1688,"source":430,"pc":[1684,1685]},{"teal":1689,"source":430,"pc":[1686]},{"teal":1693,"source":431,"pc":[1687,1688]},{"teal":1694,"source":431,"pc":[1689,1690]},{"teal":1695,"source":431,"pc":[1691]},{"teal":1696,"source":431,"pc":[1692]},{"teal":1697,"source":431,"pc":[1693,1694]},{"teal":1698,"source":431,"pc":[1695]},{"teal":1699,"source":431,"pc":[1696]},{"teal":1700,"source":431,"pc":[1697,1698]},{"teal":1701,"source":431,"pc":[1699]},{"teal":1705,"source":432,"pc":[1700,1701,1702]},{"teal":1706,"source":432,"pc":[1703,1704]},{"teal":1707,"source":432,"pc":[1705]},{"teal":1708,"source":432,"pc":[1706]},{"teal":1709,"source":432,"pc":[1707,1708]},{"teal":1710,"source":432,"pc":[1709]},{"teal":1711,"source":432,"pc":[1710]},{"teal":1712,"source":432,"pc":[1711,1712]},{"teal":1713,"source":432,"pc":[1713]},{"teal":1714,"source":405,"pc":[1714]},{"teal":1719,"source":446,"pc":[1715]},{"teal":1722,"source":446,"pc":[1716,1717,1718]},{"teal":1723,"source":446,"pc":[1719]},{"teal":1726,"source":446,"pc":[1720,1721,1722]},{"teal":1727,"source":446,"pc":[1723]},{"teal":1730,"source":446,"pc":[1724,1725]},{"teal":1731,"source":446,"pc":[1726]},{"teal":1732,"source":446,"pc":[1727]},{"teal":1733,"source":446,"pc":[1728]},{"teal":1734,"source":446,"pc":[1729,1730]},{"teal":1735,"source":446,"pc":[1731]},{"teal":1736,"source":446,"pc":[1732]},{"teal":1739,"source":446,"errorMessage":"argument 2 (mbrPayment) for addPool must be a pay transaction","pc":[1733]},{"teal":1742,"source":446,"pc":[1734,1735,1736]},{"teal":1743,"source":446,"pc":[1737]},{"teal":1744,"source":446,"pc":[1738]},{"teal":1745,"source":446,"pc":[1739]},{"teal":1746,"source":446,"pc":[1740]},{"teal":1759,"source":446,"pc":[1741,1742,1743]},{"teal":1762,"source":446,"pc":[1744]},{"teal":1763,"source":446,"pc":[1745]},{"teal":1767,"source":447,"pc":[1746,1747]},{"teal":1768,"source":447,"pc":[1748,1749,1750]},{"teal":1773,"source":450,"pc":[1751,1752]},{"teal":1774,"source":450,"pc":[1753,1754]},{"teal":1775,"source":450,"pc":[1755,1756]},{"teal":1776,"source":450,"pc":[1757]},{"teal":1779,"source":450,"errorMessage":"transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1758]},{"teal":1782,"source":450,"pc":[1759,1760]},{"teal":1783,"source":450,"pc":[1761,1762]},{"teal":1784,"source":450,"pc":[1763,1764,1765]},{"teal":1785,"source":450,"pc":[1766,1767,1768]},{"teal":1786,"source":450,"pc":[1769]},{"teal":1787,"source":450,"pc":[1770]},{"teal":1790,"source":450,"errorMessage":"transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"amount\",\"expected\":\"this.getMbrAmounts().addPoolMbr\"}","pc":[1771]},{"teal":1794,"source":452,"pc":[1772]},{"teal":1795,"source":452,"pc":[1773,1774]},{"teal":1796,"source":452,"pc":[1775]},{"teal":1797,"source":452,"pc":[1776]},{"teal":1798,"source":452,"pc":[1777]},{"teal":1799,"source":452,"pc":[1778]},{"teal":1800,"source":452,"pc":[1779]},{"teal":1803,"source":452,"errorMessage":"specified validator id isn't valid","pc":[1780]},{"teal":1807,"source":454,"pc":[1781,1782]},{"teal":1808,"source":454,"pc":[1783,1784]},{"teal":1809,"source":454,"pc":[1785]},{"teal":1810,"source":454,"pc":[1786,1787]},{"teal":1811,"source":454,"pc":[1788]},{"teal":1812,"source":454,"pc":[1789]},{"teal":1813,"source":454,"pc":[1790,1791]},{"teal":1814,"source":454,"pc":[1792]},{"teal":1815,"source":454,"pc":[1793]},{"teal":1816,"source":454,"pc":[1794,1795]},{"teal":1821,"source":455,"pc":[1796,1797]},{"teal":1822,"source":58,"pc":[1798]},{"teal":1823,"source":455,"pc":[1799]},{"teal":1824,"source":455,"pc":[1800,1801,1802]},{"teal":1828,"source":456,"errorMessage":"already at max pool size","pc":[1803]},{"teal":1833,"source":458,"pc":[1804,1805]},{"teal":1834,"source":458,"pc":[1806]},{"teal":1835,"source":458,"pc":[1807]},{"teal":1836,"source":458,"pc":[1808,1809]},{"teal":1858,"source":461,"pc":[1810]},{"teal":1859,"source":461,"pc":[1811,1812]},{"teal":1860,"source":461,"pc":[1813,1814]},{"teal":1864,"source":462,"pc":[1815]},{"teal":1865,"source":462,"pc":[1816,1817]},{"teal":1872,"source":464,"pc":[1818,1819]},{"teal":1873,"source":464,"pc":[1820]},{"teal":1874,"source":464,"pc":[1821,1822]},{"teal":1875,"source":464,"pc":[1823]},{"teal":1876,"source":464,"pc":[1824,1825]},{"teal":1877,"source":465,"pc":[1826,1827]},{"teal":1878,"source":465,"pc":[1828,1829]},{"teal":1879,"source":465,"pc":[1830,1831]},{"teal":1880,"source":465,"pc":[1832]},{"teal":1883,"source":465,"errorMessage":"box value does not exist: this.stakingPoolApprovalProgram.size","pc":[1833]},{"teal":1884,"source":465,"pc":[1834,1835]},{"teal":1885,"source":465,"pc":[1836]},{"teal":1886,"source":465,"pc":[1837]},{"teal":1887,"source":465,"pc":[1838,1839]},{"teal":1891,"source":467,"pc":[1840,1841,1842]},{"teal":1892,"source":467,"pc":[1843,1844]},{"teal":1896,"source":468,"pc":[1845,1846]},{"teal":1897,"source":468,"pc":[1847,1848]},{"teal":1901,"source":469,"pc":[1849,1850]},{"teal":1902,"source":469,"pc":[1851,1852]},{"teal":1906,"source":470,"pc":[1853,1854]},{"teal":1907,"source":470,"pc":[1855,1856]},{"teal":1918,"source":473,"pc":[1857,1858,1859,1860,1861,1862]},{"teal":1919,"source":473,"pc":[1863,1864]},{"teal":1920,"source":474,"pc":[1865,1866,1867]},{"teal":1921,"source":474,"pc":[1868]},{"teal":1922,"source":474,"pc":[1869,1870]},{"teal":1923,"source":475,"pc":[1871,1872]},{"teal":1924,"source":475,"pc":[1873]},{"teal":1925,"source":475,"pc":[1874,1875]},{"teal":1926,"source":476,"pc":[1876,1877]},{"teal":1927,"source":476,"pc":[1878]},{"teal":1928,"source":476,"pc":[1879,1880]},{"teal":1929,"source":477,"pc":[1881,1882]},{"teal":1930,"source":477,"pc":[1883]},{"teal":1931,"source":477,"pc":[1884]},{"teal":1932,"source":477,"pc":[1885,1886]},{"teal":1933,"source":477,"pc":[1887]},{"teal":1934,"source":477,"pc":[1888]},{"teal":1935,"source":477,"pc":[1889,1890]},{"teal":1936,"source":477,"pc":[1891]},{"teal":1937,"source":477,"pc":[1892]},{"teal":1938,"source":477,"pc":[1893]},{"teal":1939,"source":477,"pc":[1894,1895]},{"teal":1942,"source":461,"pc":[1896]},{"teal":1943,"source":461,"pc":[1897,1898]},{"teal":1946,"source":461,"pc":[1899]},{"teal":1950,"source":481,"pc":[1900,1901]},{"teal":1951,"source":481,"pc":[1902,1903]},{"teal":1952,"source":481,"pc":[1904]},{"teal":1953,"source":481,"pc":[1905,1906,1907]},{"teal":1954,"source":481,"pc":[1908]},{"teal":1955,"source":481,"pc":[1909,1910]},{"teal":1956,"source":481,"pc":[1911]},{"teal":1957,"source":481,"pc":[1912]},{"teal":1958,"source":481,"pc":[1913,1914]},{"teal":1959,"source":481,"pc":[1915]},{"teal":1963,"source":484,"pc":[1916,1917]},{"teal":1964,"source":484,"pc":[1918,1919]},{"teal":1968,"source":485,"pc":[1920,1921]},{"teal":1969,"source":485,"pc":[1922,1923]},{"teal":1970,"source":485,"pc":[1924]},{"teal":1971,"source":485,"pc":[1925]},{"teal":1972,"source":485,"pc":[1926,1927]},{"teal":1973,"source":485,"pc":[1928]},{"teal":1974,"source":485,"pc":[1929]},{"teal":1975,"source":485,"pc":[1930]},{"teal":1976,"source":485,"pc":[1931]},{"teal":1977,"source":485,"pc":[1932,1933]},{"teal":1978,"source":485,"pc":[1934]},{"teal":1979,"source":485,"pc":[1935]},{"teal":1980,"source":485,"pc":[1936,1937]},{"teal":1981,"source":485,"pc":[1938]},{"teal":1982,"source":485,"pc":[1939]},{"teal":1983,"source":485,"pc":[1940,1941]},{"teal":1984,"source":485,"pc":[1942]},{"teal":1988,"source":486,"pc":[1943,1944]},{"teal":1989,"source":486,"pc":[1945,1946]},{"teal":1990,"source":486,"pc":[1947,1948]},{"teal":1991,"source":486,"pc":[1949,1950,1951]},{"teal":1999,"source":488,"pc":[1952,1953,1954,1955,1956,1957]},{"teal":2000,"source":489,"pc":[1958,1959]},{"teal":2001,"source":489,"pc":[1960]},{"teal":2002,"source":490,"pc":[1961,1962]},{"teal":2003,"source":490,"pc":[1963]},{"teal":2004,"source":490,"pc":[1964]},{"teal":2005,"source":490,"pc":[1965]},{"teal":2006,"source":490,"pc":[1966,1967]},{"teal":2007,"source":490,"pc":[1968]},{"teal":2010,"source":490,"errorMessage":"numPools as uint16 overflowed 16 bits","pc":[1969]},{"teal":2011,"source":490,"pc":[1970,1971,1972]},{"teal":2012,"source":490,"pc":[1973]},{"teal":2013,"source":491,"pc":[1974,1975]},{"teal":2014,"source":491,"pc":[1976]},{"teal":2015,"source":491,"pc":[1977]},{"teal":2016,"source":488,"pc":[1978]},{"teal":2017,"source":488,"pc":[1979]},{"teal":2021,"source":494,"pc":[1980,1981]},{"teal":2022,"source":494,"pc":[1982]},{"teal":2023,"source":494,"pc":[1983,1984]},{"teal":2024,"source":494,"pc":[1985]},{"teal":2025,"source":494,"pc":[1986]},{"teal":2026,"source":494,"pc":[1987,1988]},{"teal":2027,"source":494,"pc":[1989]},{"teal":2028,"source":494,"pc":[1990]},{"teal":2031,"source":446,"pc":[1991,1992]},{"teal":2034,"source":446,"pc":[1993,1994]},{"teal":2035,"source":446,"pc":[1995]},{"teal":2040,"source":506,"pc":[1996]},{"teal":2043,"source":506,"pc":[1997,1998,1999]},{"teal":2044,"source":506,"pc":[2000]},{"teal":2047,"source":506,"pc":[2001,2002,2003]},{"teal":2048,"source":506,"pc":[2004]},{"teal":2051,"source":506,"pc":[2005,2006]},{"teal":2052,"source":506,"pc":[2007]},{"teal":2053,"source":506,"pc":[2008]},{"teal":2054,"source":506,"pc":[2009]},{"teal":2055,"source":506,"pc":[2010,2011]},{"teal":2056,"source":506,"pc":[2012]},{"teal":2057,"source":506,"pc":[2013]},{"teal":2060,"source":506,"errorMessage":"argument 2 (stakedAmountPayment) for addStake must be a pay transaction","pc":[2014]},{"teal":2063,"source":506,"pc":[2015,2016,2017]},{"teal":2064,"source":506,"pc":[2018]},{"teal":2065,"source":506,"pc":[2019]},{"teal":2066,"source":506,"pc":[2020]},{"teal":2067,"source":506,"pc":[2021]},{"teal":2079,"source":506,"pc":[2022,2023,2024]},{"teal":2082,"source":506,"pc":[2025]},{"teal":2083,"source":506,"pc":[2026,2027]},{"teal":2087,"source":507,"pc":[2028]},{"teal":2088,"source":507,"pc":[2029,2030]},{"teal":2089,"source":507,"pc":[2031]},{"teal":2090,"source":507,"pc":[2032]},{"teal":2091,"source":507,"pc":[2033]},{"teal":2092,"source":507,"pc":[2034]},{"teal":2093,"source":507,"pc":[2035]},{"teal":2096,"source":507,"errorMessage":"specified validator id isn't valid","pc":[2036]},{"teal":2101,"source":510,"pc":[2037,2038]},{"teal":2102,"source":510,"pc":[2039]},{"teal":2103,"source":510,"pc":[2040]},{"teal":2104,"source":510,"pc":[2041,2042]},{"teal":2105,"source":510,"pc":[2043]},{"teal":2106,"source":510,"pc":[2044]},{"teal":2107,"source":510,"pc":[2045,2046]},{"teal":2108,"source":510,"pc":[2047]},{"teal":2109,"source":510,"pc":[2048]},{"teal":2110,"source":510,"pc":[2049]},{"teal":2111,"source":510,"pc":[2050]},{"teal":2112,"source":510,"pc":[2051,2052,2053]},{"teal":2120,"source":513,"pc":[2054,2055]},{"teal":2121,"source":513,"pc":[2056]},{"teal":2122,"source":513,"pc":[2057]},{"teal":2123,"source":513,"pc":[2058,2059]},{"teal":2124,"source":513,"pc":[2060]},{"teal":2125,"source":513,"pc":[2061]},{"teal":2126,"source":513,"pc":[2062,2063]},{"teal":2127,"source":513,"pc":[2064]},{"teal":2128,"source":513,"pc":[2065]},{"teal":2129,"source":513,"pc":[2066,2067]},{"teal":2130,"source":513,"pc":[2068]},{"teal":2133,"source":512,"errorMessage":"can't stake with a validator that is past its sunsetting time","pc":[2069]},{"teal":2138,"source":518,"pc":[2070,2071]},{"teal":2139,"source":518,"pc":[2072,2073]},{"teal":2147,"source":522,"pc":[2074,2075]},{"teal":2148,"source":523,"pc":[2076,2077]},{"teal":2149,"source":523,"pc":[2078,2079]},{"teal":2150,"source":523,"pc":[2080]},{"teal":2153,"source":523,"errorMessage":"transaction verification failed: {\"txn\":\"stakedAmountPayment\",\"field\":\"sender\",\"expected\":\"staker\"}","pc":[2081]},{"teal":2156,"source":522,"pc":[2082,2083]},{"teal":2157,"source":524,"pc":[2084,2085]},{"teal":2158,"source":524,"pc":[2086,2087]},{"teal":2159,"source":524,"pc":[2088]},{"teal":2162,"source":524,"errorMessage":"transaction verification failed: {\"txn\":\"stakedAmountPayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[2089]},{"teal":2166,"source":530,"pc":[2090,2091]},{"teal":2167,"source":530,"pc":[2092,2093]},{"teal":2168,"source":530,"pc":[2094,2095,2096]},{"teal":2172,"source":532,"pc":[2097,2098]},{"teal":2173,"source":532,"pc":[2099,2100]},{"teal":2174,"source":532,"pc":[2101,2102]},{"teal":2178,"source":533,"pc":[2103]},{"teal":2179,"source":533,"pc":[2104,2105]},{"teal":2184,"source":535,"pc":[2106,2107]},{"teal":2185,"source":535,"pc":[2108,2109,2110]},{"teal":2186,"source":535,"pc":[2111,2112,2113]},{"teal":2191,"source":538,"pc":[2114,2115,2116]},{"teal":2192,"source":538,"pc":[2117,2118,2119]},{"teal":2193,"source":538,"pc":[2120]},{"teal":2194,"source":538,"pc":[2121,2122]},{"teal":2198,"source":539,"pc":[2123,2124]},{"teal":2199,"source":539,"pc":[2125,2126]},{"teal":2200,"source":539,"pc":[2127]},{"teal":2201,"source":539,"pc":[2128,2129]},{"teal":2205,"source":540,"pc":[2130]},{"teal":2206,"source":540,"pc":[2131,2132]},{"teal":2207,"source":540,"pc":[2133]},{"teal":2208,"source":540,"pc":[2134,2135,2136]},{"teal":2209,"source":540,"pc":[2137]},{"teal":2210,"source":540,"pc":[2138]},{"teal":2218,"source":545,"pc":[2139,2140]},{"teal":2219,"source":545,"pc":[2141]},{"teal":2220,"source":545,"pc":[2142]},{"teal":2221,"source":545,"pc":[2143,2144]},{"teal":2222,"source":545,"pc":[2145]},{"teal":2223,"source":545,"pc":[2146]},{"teal":2224,"source":545,"pc":[2147,2148]},{"teal":2225,"source":545,"pc":[2149]},{"teal":2226,"source":545,"pc":[2150]},{"teal":2227,"source":545,"pc":[2151,2152]},{"teal":2228,"source":545,"pc":[2153]},{"teal":2229,"source":545,"pc":[2154,2155,2156]},{"teal":2230,"source":545,"pc":[2157]},{"teal":2233,"source":544,"errorMessage":"total staked for all of a validators pools may not exceed hard cap","pc":[2158]},{"teal":2237,"source":551,"pc":[2159,2160]},{"teal":2238,"source":551,"pc":[2161,2162]},{"teal":2239,"source":551,"pc":[2163,2164]},{"teal":2240,"source":551,"pc":[2165,2166,2167]},{"teal":2241,"source":551,"pc":[2168,2169]},{"teal":2247,"source":553,"pc":[2170,2171]},{"teal":2248,"source":553,"pc":[2172,2173]},{"teal":2249,"source":553,"pc":[2174,2175]},{"teal":2250,"source":553,"pc":[2176,2177]},{"teal":2251,"source":553,"pc":[2178]},{"teal":2252,"source":553,"pc":[2179,2180]},{"teal":2256,"source":554,"pc":[2181,2182]},{"teal":2257,"source":554,"pc":[2183,2184]},{"teal":2258,"source":554,"pc":[2185,2186]},{"teal":2259,"source":554,"pc":[2187,2188,2189]},{"teal":2260,"source":554,"pc":[2190]},{"teal":2261,"source":554,"pc":[2191,2192]},{"teal":2266,"source":555,"pc":[2193,2194]},{"teal":2267,"source":555,"pc":[2195,2196]},{"teal":2268,"source":555,"pc":[2197,2198]},{"teal":2269,"source":555,"pc":[2199,2200,2201]},{"teal":2270,"source":555,"pc":[2202]},{"teal":2271,"source":555,"pc":[2203]},{"teal":2272,"source":555,"pc":[2204]},{"teal":2273,"source":555,"pc":[2205,2206,2207]},{"teal":2277,"source":556,"errorMessage":"No pool available with free stake.  Validator needs to add another pool","pc":[2208]},{"teal":2282,"source":560,"pc":[2209,2210]},{"teal":2283,"source":560,"pc":[2211,2212]},{"teal":2284,"source":560,"pc":[2213,2214]},{"teal":2285,"source":560,"pc":[2215,2216,2217]},{"teal":2286,"source":560,"pc":[2218,2219]},{"teal":2287,"source":560,"pc":[2220,2221,2222]},{"teal":2297,"source":568,"pc":[2223,2224]},{"teal":2298,"source":567,"pc":[2225,2226]},{"teal":2299,"source":566,"pc":[2227,2228]},{"teal":2300,"source":565,"pc":[2229,2230]},{"teal":2301,"source":565,"pc":[2231,2232]},{"teal":2302,"source":565,"pc":[2233,2234]},{"teal":2303,"source":565,"pc":[2235,2236,2237]},{"teal":2304,"source":564,"pc":[2238,2239]},{"teal":2305,"source":563,"pc":[2240,2241,2242]},{"teal":2315,"source":570,"pc":[2243,2244,2245,2246,2247,2248]},{"teal":2316,"source":571,"pc":[2249,2250]},{"teal":2317,"source":571,"pc":[2251]},{"teal":2318,"source":572,"pc":[2252,2253]},{"teal":2319,"source":572,"pc":[2254,2255]},{"teal":2320,"source":572,"pc":[2256,2257]},{"teal":2321,"source":572,"pc":[2258,2259,2260]},{"teal":2322,"source":572,"pc":[2261]},{"teal":2323,"source":572,"pc":[2262]},{"teal":2324,"source":572,"pc":[2263]},{"teal":2325,"source":572,"pc":[2264]},{"teal":2326,"source":572,"pc":[2265,2266]},{"teal":2327,"source":572,"pc":[2267]},{"teal":2330,"source":572,"errorMessage":"poolKey.poolId as uint16 overflowed 16 bits","pc":[2268]},{"teal":2331,"source":572,"pc":[2269,2270,2271]},{"teal":2332,"source":572,"pc":[2272]},{"teal":2333,"source":573,"pc":[2273,2274]},{"teal":2334,"source":573,"pc":[2275,2276]},{"teal":2335,"source":573,"pc":[2277,2278]},{"teal":2336,"source":573,"pc":[2279,2280,2281]},{"teal":2337,"source":573,"pc":[2282]},{"teal":2338,"source":573,"pc":[2283]},{"teal":2339,"source":573,"pc":[2284]},{"teal":2340,"source":575,"pc":[2285,2286]},{"teal":2341,"source":575,"pc":[2287]},{"teal":2342,"source":574,"pc":[2288,2289]},{"teal":2343,"source":574,"pc":[2290]},{"teal":2344,"source":574,"pc":[2291]},{"teal":2345,"source":570,"pc":[2292]},{"teal":2346,"source":570,"pc":[2293]},{"teal":2350,"source":578,"pc":[2294,2295]},{"teal":2351,"source":578,"pc":[2296,2297]},{"teal":2352,"source":578,"pc":[2298,2299]},{"teal":2353,"source":578,"pc":[2300,2301,2302]},{"teal":2356,"source":506,"pc":[2303,2304]},{"teal":2359,"source":506,"pc":[2305,2306]},{"teal":2360,"source":506,"pc":[2307]},{"teal":2365,"source":596,"pc":[2308]},{"teal":2368,"source":596,"pc":[2309,2310,2311]},{"teal":2369,"source":596,"pc":[2312]},{"teal":2372,"source":596,"pc":[2313,2314,2315]},{"teal":2373,"source":596,"pc":[2316]},{"teal":2374,"source":596,"pc":[2317]},{"teal":2375,"source":596,"pc":[2318]},{"teal":2376,"source":596,"pc":[2319]},{"teal":2394,"source":596,"pc":[2320,2321,2322]},{"teal":2397,"source":596,"pc":[2323]},{"teal":2398,"source":596,"pc":[2324,2325]},{"teal":2402,"source":598,"pc":[2326,2327]},{"teal":2403,"source":598,"pc":[2328]},{"teal":2404,"source":598,"pc":[2329]},{"teal":2405,"source":598,"pc":[2330,2331]},{"teal":2406,"source":598,"pc":[2332]},{"teal":2407,"source":598,"pc":[2333]},{"teal":2408,"source":598,"pc":[2334,2335]},{"teal":2409,"source":598,"pc":[2336]},{"teal":2410,"source":598,"pc":[2337]},{"teal":2411,"source":598,"pc":[2338,2339]},{"teal":2415,"source":599,"pc":[2340,2341]},{"teal":2416,"source":599,"pc":[2342]},{"teal":2417,"source":599,"pc":[2343]},{"teal":2418,"source":599,"pc":[2344]},{"teal":2423,"source":601,"pc":[2345,2346]},{"teal":2424,"source":601,"pc":[2347,2348]},{"teal":2425,"source":601,"pc":[2349,2350]},{"teal":2426,"source":601,"pc":[2351]},{"teal":2427,"source":601,"pc":[2352]},{"teal":2428,"source":601,"pc":[2353,2354,2355]},{"teal":2433,"source":602,"pc":[2356,2357]},{"teal":2434,"source":602,"pc":[2358,2359]},{"teal":2435,"source":602,"pc":[2360]},{"teal":2436,"source":602,"pc":[2361,2362]},{"teal":2437,"source":602,"pc":[2363]},{"teal":2438,"source":602,"pc":[2364]},{"teal":2439,"source":602,"pc":[2365,2366]},{"teal":2440,"source":602,"pc":[2367]},{"teal":2441,"source":602,"pc":[2368,2369,2370]},{"teal":2446,"source":608,"pc":[2371,2372]},{"teal":2447,"source":608,"pc":[2373,2374]},{"teal":2451,"source":609,"pc":[2375,2376]},{"teal":2452,"source":609,"pc":[2377]},{"teal":2453,"source":609,"pc":[2378]},{"teal":2454,"source":609,"pc":[2379,2380]},{"teal":2455,"source":609,"pc":[2381]},{"teal":2456,"source":609,"pc":[2382]},{"teal":2457,"source":609,"pc":[2383,2384]},{"teal":2458,"source":609,"pc":[2385]},{"teal":2459,"source":609,"pc":[2386]},{"teal":2460,"source":609,"pc":[2387,2388]},{"teal":2465,"source":610,"pc":[2389,2390]},{"teal":2466,"source":610,"pc":[2391]},{"teal":2467,"source":610,"pc":[2392]},{"teal":2468,"source":610,"pc":[2393,2394,2395]},{"teal":2474,"source":612,"pc":[2396,2397]},{"teal":2475,"source":612,"pc":[2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409]},{"teal":2476,"source":612,"pc":[2410]},{"teal":2479,"source":612,"errorMessage":"global state value does not exist: AppID.fromUint64(pool1AppID).globalState('lastPayout')","pc":[2411]},{"teal":2480,"source":612,"pc":[2412,2413]},{"teal":2481,"source":612,"pc":[2414]},{"teal":2482,"source":612,"pc":[2415,2416,2417]},{"teal":2487,"source":613,"pc":[2418,2419]},{"teal":2488,"source":613,"pc":[2420,2421]},{"teal":2489,"source":613,"pc":[2422]},{"teal":2490,"source":613,"pc":[2423,2424]},{"teal":2491,"source":613,"pc":[2425]},{"teal":2492,"source":613,"pc":[2426]},{"teal":2493,"source":613,"pc":[2427,2428]},{"teal":2494,"source":613,"pc":[2429]},{"teal":2495,"source":613,"pc":[2430,2431,2432]},{"teal":2500,"source":615,"pc":[2433,2434,2435]},{"teal":2501,"source":615,"pc":[2436,2437]},{"teal":2502,"source":615,"pc":[2438]},{"teal":2503,"source":615,"pc":[2439,2440]},{"teal":2504,"source":615,"pc":[2441]},{"teal":2505,"source":615,"pc":[2442]},{"teal":2506,"source":615,"pc":[2443,2444]},{"teal":2507,"source":615,"pc":[2445]},{"teal":2508,"source":615,"pc":[2446]},{"teal":2509,"source":615,"pc":[2447,2448]},{"teal":2513,"source":616,"pc":[2449,2450]},{"teal":2514,"source":616,"pc":[2451,2452]},{"teal":2515,"source":616,"pc":[2453,2454]},{"teal":2516,"source":616,"pc":[2455]},{"teal":2517,"source":616,"pc":[2456]},{"teal":2518,"source":616,"pc":[2457,2458]},{"teal":2523,"source":618,"pc":[2459,2460]},{"teal":2524,"source":618,"pc":[2461,2462]},{"teal":2525,"source":618,"pc":[2463,2464]},{"teal":2526,"source":618,"pc":[2465]},{"teal":2527,"source":618,"pc":[2466]},{"teal":2528,"source":618,"pc":[2467,2468]},{"teal":2529,"source":618,"pc":[2469]},{"teal":2530,"source":618,"pc":[2470,2471,2472]},{"teal":2535,"source":619,"pc":[2473,2474]},{"teal":2536,"source":619,"pc":[2475,2476]},{"teal":2537,"source":619,"pc":[2477]},{"teal":2538,"source":619,"pc":[2478,2479]},{"teal":2539,"source":619,"pc":[2480]},{"teal":2540,"source":619,"pc":[2481]},{"teal":2541,"source":619,"pc":[2482,2483]},{"teal":2542,"source":619,"pc":[2484]},{"teal":2543,"source":619,"pc":[2485,2486,2487]},{"teal":2550,"source":622,"pc":[2488,2489]},{"teal":2551,"source":622,"pc":[2490,2491]},{"teal":2552,"source":622,"pc":[2492]},{"teal":2553,"source":622,"pc":[2493]},{"teal":2554,"source":622,"pc":[2494,2495]},{"teal":2555,"source":622,"pc":[2496]},{"teal":2556,"source":622,"pc":[2497]},{"teal":2557,"source":622,"pc":[2498,2499]},{"teal":2558,"source":622,"pc":[2500]},{"teal":2562,"source":624,"pc":[2501,2502]},{"teal":2563,"source":624,"pc":[2503,2504]},{"teal":2564,"source":624,"pc":[2505]},{"teal":2565,"source":624,"pc":[2506,2507]},{"teal":2566,"source":624,"pc":[2508]},{"teal":2567,"source":624,"pc":[2509]},{"teal":2568,"source":624,"pc":[2510,2511]},{"teal":2569,"source":624,"pc":[2512]},{"teal":2570,"source":624,"pc":[2513]},{"teal":2571,"source":624,"pc":[2514,2515]},{"teal":2575,"source":625,"pc":[2516,2517]},{"teal":2576,"source":625,"pc":[2518]},{"teal":2577,"source":625,"pc":[2519]},{"teal":2578,"source":625,"pc":[2520,2521]},{"teal":2579,"source":625,"pc":[2522]},{"teal":2580,"source":625,"pc":[2523]},{"teal":2581,"source":625,"pc":[2524,2525]},{"teal":2582,"source":625,"pc":[2526]},{"teal":2583,"source":625,"pc":[2527]},{"teal":2584,"source":625,"pc":[2528,2529]},{"teal":2588,"source":626,"pc":[2530]},{"teal":2589,"source":626,"pc":[2531,2532]},{"teal":2594,"source":626,"pc":[2533,2534]},{"teal":2595,"source":626,"pc":[2535,2536]},{"teal":2596,"source":626,"pc":[2537]},{"teal":2597,"source":626,"pc":[2538,2539,2540]},{"teal":2604,"source":632,"pc":[2541,2542]},{"teal":2605,"source":632,"pc":[2543,2544]},{"teal":2606,"source":632,"pc":[2545,2546]},{"teal":2607,"source":632,"pc":[2547]},{"teal":2608,"source":632,"pc":[2548]},{"teal":2609,"source":632,"pc":[2549,2550]},{"teal":2610,"source":632,"pc":[2551]},{"teal":2611,"source":632,"pc":[2552]},{"teal":2612,"source":632,"pc":[2553]},{"teal":2613,"source":632,"pc":[2554,2555]},{"teal":2614,"source":632,"pc":[2556]},{"teal":2615,"source":632,"pc":[2557]},{"teal":2616,"source":632,"pc":[2558,2559]},{"teal":2617,"source":632,"pc":[2560]},{"teal":2618,"source":632,"pc":[2561]},{"teal":2619,"source":632,"pc":[2562,2563]},{"teal":2620,"source":631,"pc":[2564]},{"teal":2621,"source":631,"pc":[2565]},{"teal":2622,"source":633,"pc":[2566,2567]},{"teal":2623,"source":631,"pc":[2568]},{"teal":2624,"source":631,"pc":[2569]},{"teal":2625,"source":631,"pc":[2570]},{"teal":2626,"source":631,"pc":[2571]},{"teal":2627,"source":631,"pc":[2572]},{"teal":2630,"source":631,"errorMessage":"wideRatio failed","pc":[2573]},{"teal":2631,"source":631,"pc":[2574,2575]},{"teal":2635,"source":635,"pc":[2576,2577]},{"teal":2636,"source":635,"pc":[2578,2579]},{"teal":2637,"source":635,"pc":[2580]},{"teal":2638,"source":635,"pc":[2581]},{"teal":2639,"source":635,"pc":[2582]},{"teal":2640,"source":635,"pc":[2583,2584]},{"teal":2641,"source":635,"pc":[2585]},{"teal":2642,"source":635,"pc":[2586]},{"teal":2643,"source":635,"pc":[2587,2588]},{"teal":2644,"source":635,"pc":[2589]},{"teal":2645,"source":635,"pc":[2590]},{"teal":2646,"source":635,"pc":[2591,2592]},{"teal":2647,"source":635,"pc":[2593]},{"teal":2652,"source":626,"pc":[2594,2595]},{"teal":2653,"source":626,"pc":[2596]},{"teal":2654,"source":626,"pc":[2597]},{"teal":2655,"source":626,"pc":[2598,2599]},{"teal":2656,"source":626,"pc":[2600,2601,2602]},{"teal":2661,"source":637,"pc":[2603,2604]},{"teal":2662,"source":637,"pc":[2605,2606]},{"teal":2663,"source":637,"pc":[2607]},{"teal":2664,"source":637,"pc":[2608,2609]},{"teal":2665,"source":637,"pc":[2610]},{"teal":2666,"source":637,"pc":[2611]},{"teal":2667,"source":637,"pc":[2612,2613]},{"teal":2668,"source":637,"pc":[2614]},{"teal":2672,"source":596,"pc":[2615,2616]},{"teal":2675,"source":596,"pc":[2617,2618]},{"teal":2676,"source":596,"pc":[2619]},{"teal":2681,"source":656,"pc":[2620,2621,2622]},{"teal":2682,"source":656,"pc":[2623]},{"teal":2685,"source":655,"pc":[2624,2625,2626]},{"teal":2686,"source":655,"pc":[2627]},{"teal":2689,"source":654,"pc":[2628,2629,2630]},{"teal":2690,"source":654,"pc":[2631]},{"teal":2693,"source":653,"pc":[2632,2633,2634]},{"teal":2694,"source":653,"pc":[2635]},{"teal":2697,"source":652,"pc":[2636,2637,2638]},{"teal":2698,"source":652,"pc":[2639]},{"teal":2699,"source":652,"pc":[2640]},{"teal":2700,"source":652,"pc":[2641]},{"teal":2701,"source":652,"pc":[2642]},{"teal":2704,"source":652,"errorMessage":"argument 4 (poolKey) for stakeUpdatedViaRewards must be a (uint64,uint64,uint64)","pc":[2643]},{"teal":2707,"source":651,"pc":[2644,2645,2646]},{"teal":2708,"source":651,"pc":[2647]},{"teal":2709,"source":651,"pc":[2648]},{"teal":2723,"source":651,"pc":[2649,2650,2651]},{"teal":2727,"source":658,"pc":[2652,2653]},{"teal":2728,"source":658,"pc":[2654,2655,2656]},{"teal":2732,"source":661,"pc":[2657,2658]},{"teal":2733,"source":661,"pc":[2659,2660]},{"teal":2734,"source":661,"pc":[2661,2662,2663]},{"teal":2735,"source":661,"pc":[2664]},{"teal":2736,"source":661,"pc":[2665]},{"teal":2737,"source":661,"pc":[2666]},{"teal":2738,"source":661,"pc":[2667,2668]},{"teal":2739,"source":661,"pc":[2669]},{"teal":2740,"source":661,"pc":[2670]},{"teal":2741,"source":661,"pc":[2671,2672]},{"teal":2742,"source":661,"pc":[2673]},{"teal":2743,"source":661,"pc":[2674,2675]},{"teal":2744,"source":661,"pc":[2676,2677]},{"teal":2745,"source":661,"pc":[2678,2679,2680]},{"teal":2746,"source":661,"pc":[2681]},{"teal":2747,"source":661,"pc":[2682]},{"teal":2748,"source":661,"pc":[2683]},{"teal":2749,"source":661,"pc":[2684,2685]},{"teal":2750,"source":661,"pc":[2686]},{"teal":2751,"source":661,"pc":[2687]},{"teal":2752,"source":661,"pc":[2688,2689]},{"teal":2753,"source":661,"pc":[2690]},{"teal":2754,"source":661,"pc":[2691]},{"teal":2755,"source":661,"pc":[2692]},{"teal":2756,"source":661,"pc":[2693,2694]},{"teal":2757,"source":661,"pc":[2695,2696,2697]},{"teal":2758,"source":661,"pc":[2698]},{"teal":2759,"source":661,"pc":[2699]},{"teal":2760,"source":661,"pc":[2700]},{"teal":2761,"source":661,"pc":[2701,2702]},{"teal":2762,"source":661,"pc":[2703]},{"teal":2763,"source":661,"pc":[2704]},{"teal":2764,"source":661,"pc":[2705,2706]},{"teal":2765,"source":661,"pc":[2707]},{"teal":2766,"source":661,"pc":[2708]},{"teal":2767,"source":661,"pc":[2709]},{"teal":2768,"source":661,"pc":[2710,2711]},{"teal":2769,"source":661,"pc":[2712,2713,2714]},{"teal":2770,"source":661,"pc":[2715]},{"teal":2771,"source":661,"pc":[2716]},{"teal":2772,"source":661,"pc":[2717]},{"teal":2773,"source":661,"pc":[2718,2719]},{"teal":2774,"source":661,"pc":[2720]},{"teal":2778,"source":662,"pc":[2721,2722]},{"teal":2779,"source":662,"pc":[2723]},{"teal":2780,"source":662,"pc":[2724]},{"teal":2781,"source":662,"pc":[2725]},{"teal":2782,"source":662,"pc":[2726,2727]},{"teal":2783,"source":662,"pc":[2728,2729,2730]},{"teal":2784,"source":662,"pc":[2731]},{"teal":2785,"source":662,"pc":[2732]},{"teal":2786,"source":662,"pc":[2733]},{"teal":2787,"source":662,"pc":[2734,2735]},{"teal":2788,"source":662,"pc":[2736]},{"teal":2789,"source":662,"pc":[2737]},{"teal":2790,"source":662,"pc":[2738,2739]},{"teal":2791,"source":662,"pc":[2740]},{"teal":2792,"source":662,"pc":[2741]},{"teal":2793,"source":662,"pc":[2742]},{"teal":2794,"source":662,"pc":[2743,2744]},{"teal":2795,"source":662,"pc":[2745,2746,2747]},{"teal":2796,"source":662,"pc":[2748]},{"teal":2797,"source":662,"pc":[2749]},{"teal":2798,"source":662,"pc":[2750]},{"teal":2799,"source":662,"pc":[2751,2752]},{"teal":2800,"source":662,"pc":[2753]},{"teal":2804,"source":663,"pc":[2754,2755]},{"teal":2805,"source":663,"pc":[2756]},{"teal":2806,"source":663,"pc":[2757]},{"teal":2807,"source":663,"pc":[2758]},{"teal":2808,"source":663,"pc":[2759,2760]},{"teal":2809,"source":663,"pc":[2761,2762,2763]},{"teal":2810,"source":663,"pc":[2764]},{"teal":2811,"source":663,"pc":[2765]},{"teal":2812,"source":663,"pc":[2766]},{"teal":2813,"source":663,"pc":[2767,2768]},{"teal":2814,"source":663,"pc":[2769]},{"teal":2815,"source":663,"pc":[2770]},{"teal":2816,"source":663,"pc":[2771,2772]},{"teal":2817,"source":663,"pc":[2773]},{"teal":2818,"source":663,"pc":[2774]},{"teal":2819,"source":663,"pc":[2775]},{"teal":2820,"source":663,"pc":[2776,2777]},{"teal":2821,"source":663,"pc":[2778,2779,2780]},{"teal":2822,"source":663,"pc":[2781]},{"teal":2823,"source":663,"pc":[2782]},{"teal":2824,"source":663,"pc":[2783]},{"teal":2825,"source":663,"pc":[2784,2785]},{"teal":2826,"source":663,"pc":[2786]},{"teal":2830,"source":665,"pc":[2787,2788]},{"teal":2831,"source":665,"pc":[2789]},{"teal":2832,"source":665,"pc":[2790,2791]},{"teal":2833,"source":665,"pc":[2792]},{"teal":2834,"source":665,"pc":[2793,2794]},{"teal":2835,"source":665,"pc":[2795]},{"teal":2836,"source":665,"pc":[2796]},{"teal":2840,"source":668,"pc":[2797,2798]},{"teal":2841,"source":668,"pc":[2799,2800,2801]},{"teal":2842,"source":668,"pc":[2802]},{"teal":2843,"source":668,"pc":[2803,2804,2805]},{"teal":2855,"source":670,"pc":[2806,2807,2808,2809,2810,2811]},{"teal":2856,"source":671,"pc":[2812,2813]},{"teal":2857,"source":671,"pc":[2814,2815,2816]},{"teal":2858,"source":671,"pc":[2817]},{"teal":2859,"source":671,"pc":[2818]},{"teal":2860,"source":672,"pc":[2819,2820]},{"teal":2861,"source":672,"pc":[2821,2822,2823]},{"teal":2862,"source":672,"pc":[2824]},{"teal":2863,"source":672,"pc":[2825]},{"teal":2864,"source":672,"pc":[2826]},{"teal":2865,"source":672,"pc":[2827]},{"teal":2866,"source":672,"pc":[2828,2829]},{"teal":2867,"source":672,"pc":[2830]},{"teal":2870,"source":672,"errorMessage":"poolKey.poolId as uint16 overflowed 16 bits","pc":[2831]},{"teal":2871,"source":672,"pc":[2832,2833,2834]},{"teal":2872,"source":672,"pc":[2835]},{"teal":2873,"source":673,"pc":[2836,2837]},{"teal":2874,"source":673,"pc":[2838,2839,2840]},{"teal":2875,"source":673,"pc":[2841]},{"teal":2876,"source":673,"pc":[2842]},{"teal":2877,"source":673,"pc":[2843]},{"teal":2878,"source":677,"pc":[2844,2845]},{"teal":2879,"source":677,"pc":[2846]},{"teal":2880,"source":677,"pc":[2847]},{"teal":2881,"source":676,"pc":[2848,2849]},{"teal":2882,"source":676,"pc":[2850]},{"teal":2883,"source":676,"pc":[2851]},{"teal":2884,"source":674,"pc":[2852,2853]},{"teal":2885,"source":674,"pc":[2854]},{"teal":2886,"source":674,"pc":[2855]},{"teal":2887,"source":675,"pc":[2856,2857]},{"teal":2888,"source":675,"pc":[2858]},{"teal":2889,"source":675,"pc":[2859]},{"teal":2890,"source":670,"pc":[2860]},{"teal":2891,"source":670,"pc":[2861]},{"teal":2892,"source":651,"pc":[2862]},{"teal":2897,"source":698,"pc":[2863,2864,2865]},{"teal":2898,"source":698,"pc":[2866]},{"teal":2899,"source":698,"pc":[2867]},{"teal":2900,"source":698,"pc":[2868]},{"teal":2901,"source":698,"pc":[2869]},{"teal":2904,"source":698,"errorMessage":"argument 0 (stakerRemoved) for stakeRemoved must be a bool","pc":[2870]},{"teal":2905,"source":698,"pc":[2871]},{"teal":2906,"source":698,"pc":[2872]},{"teal":2909,"source":697,"pc":[2873,2874,2875]},{"teal":2910,"source":697,"pc":[2876]},{"teal":2913,"source":696,"pc":[2877,2878,2879]},{"teal":2914,"source":696,"pc":[2880]},{"teal":2917,"source":695,"pc":[2881,2882,2883]},{"teal":2918,"source":695,"pc":[2884]},{"teal":2919,"source":695,"pc":[2885]},{"teal":2920,"source":695,"pc":[2886,2887]},{"teal":2921,"source":695,"pc":[2888]},{"teal":2924,"source":695,"errorMessage":"argument 3 (staker) for stakeRemoved must be a address","pc":[2889]},{"teal":2927,"source":694,"pc":[2890,2891,2892]},{"teal":2928,"source":694,"pc":[2893]},{"teal":2929,"source":694,"pc":[2894]},{"teal":2930,"source":694,"pc":[2895]},{"teal":2931,"source":694,"pc":[2896]},{"teal":2934,"source":694,"errorMessage":"argument 4 (poolKey) for stakeRemoved must be a (uint64,uint64,uint64)","pc":[2897]},{"teal":2937,"source":693,"pc":[2898,2899,2900]},{"teal":2938,"source":693,"pc":[2901]},{"teal":2939,"source":693,"pc":[2902]},{"teal":2954,"source":693,"pc":[2903,2904,2905]},{"teal":2957,"source":693,"pc":[2906]},{"teal":2958,"source":693,"pc":[2907,2908]},{"teal":2963,"source":700,"pc":[2909,2910]},{"teal":2964,"source":700,"pc":[2911,2912]},{"teal":2965,"source":700,"pc":[2913]},{"teal":2966,"source":700,"pc":[2914,2915,2916]},{"teal":2971,"source":701,"pc":[2917]},{"teal":2972,"source":701,"pc":[2918,2919]},{"teal":2973,"source":701,"pc":[2920,2921]},{"teal":2974,"source":701,"pc":[2922]},{"teal":2975,"source":701,"pc":[2923,2924]},{"teal":2976,"source":701,"pc":[2925,2926]},{"teal":2977,"source":701,"pc":[2927]},{"teal":2978,"source":701,"pc":[2928,2929]},{"teal":2979,"source":701,"pc":[2930,2931]},{"teal":2980,"source":701,"pc":[2932,2933]},{"teal":2981,"source":701,"pc":[2934,2935]},{"teal":2982,"source":701,"pc":[2936]},{"teal":2987,"source":703,"pc":[2937,2938]},{"teal":2988,"source":703,"pc":[2939,2940,2941]},{"teal":2992,"source":707,"pc":[2942,2943]},{"teal":2993,"source":707,"pc":[2944]},{"teal":2994,"source":707,"pc":[2945]},{"teal":2995,"source":707,"pc":[2946]},{"teal":2996,"source":707,"pc":[2947,2948,2949]},{"teal":2997,"source":707,"pc":[2950,2951]},{"teal":2998,"source":707,"pc":[2952]},{"teal":2999,"source":707,"pc":[2953]},{"teal":3000,"source":707,"pc":[2954]},{"teal":3004,"source":707,"errorMessage":"should only be called if algo or reward was removed","pc":[2955]},{"teal":3008,"source":710,"pc":[2956,2957]},{"teal":3009,"source":710,"pc":[2958,2959]},{"teal":3010,"source":710,"pc":[2960,2961,2962]},{"teal":3011,"source":710,"pc":[2963]},{"teal":3012,"source":710,"pc":[2964]},{"teal":3013,"source":710,"pc":[2965]},{"teal":3014,"source":710,"pc":[2966,2967]},{"teal":3015,"source":710,"pc":[2968]},{"teal":3016,"source":710,"pc":[2969]},{"teal":3017,"source":710,"pc":[2970,2971]},{"teal":3018,"source":710,"pc":[2972]},{"teal":3019,"source":710,"pc":[2973,2974]},{"teal":3020,"source":710,"pc":[2975,2976]},{"teal":3021,"source":710,"pc":[2977,2978,2979]},{"teal":3022,"source":710,"pc":[2980]},{"teal":3023,"source":710,"pc":[2981]},{"teal":3024,"source":710,"pc":[2982]},{"teal":3025,"source":710,"pc":[2983,2984]},{"teal":3026,"source":710,"pc":[2985]},{"teal":3027,"source":710,"pc":[2986]},{"teal":3028,"source":710,"pc":[2987,2988]},{"teal":3029,"source":710,"pc":[2989]},{"teal":3030,"source":710,"pc":[2990]},{"teal":3031,"source":710,"pc":[2991]},{"teal":3032,"source":710,"pc":[2992,2993]},{"teal":3033,"source":710,"pc":[2994,2995,2996]},{"teal":3034,"source":710,"pc":[2997]},{"teal":3035,"source":710,"pc":[2998]},{"teal":3036,"source":710,"pc":[2999]},{"teal":3037,"source":710,"pc":[3000,3001]},{"teal":3038,"source":710,"pc":[3002]},{"teal":3039,"source":710,"pc":[3003]},{"teal":3040,"source":710,"pc":[3004,3005]},{"teal":3041,"source":710,"pc":[3006]},{"teal":3042,"source":710,"pc":[3007]},{"teal":3043,"source":710,"pc":[3008]},{"teal":3044,"source":710,"pc":[3009,3010]},{"teal":3045,"source":710,"pc":[3011,3012,3013]},{"teal":3046,"source":710,"pc":[3014]},{"teal":3047,"source":710,"pc":[3015]},{"teal":3048,"source":710,"pc":[3016]},{"teal":3049,"source":710,"pc":[3017,3018]},{"teal":3050,"source":710,"pc":[3019]},{"teal":3054,"source":711,"pc":[3020,3021]},{"teal":3055,"source":711,"pc":[3022]},{"teal":3056,"source":711,"pc":[3023]},{"teal":3057,"source":711,"pc":[3024]},{"teal":3058,"source":711,"pc":[3025,3026]},{"teal":3059,"source":711,"pc":[3027,3028,3029]},{"teal":3060,"source":711,"pc":[3030]},{"teal":3061,"source":711,"pc":[3031]},{"teal":3062,"source":711,"pc":[3032]},{"teal":3063,"source":711,"pc":[3033,3034]},{"teal":3064,"source":711,"pc":[3035]},{"teal":3065,"source":711,"pc":[3036]},{"teal":3066,"source":711,"pc":[3037,3038]},{"teal":3067,"source":711,"pc":[3039]},{"teal":3068,"source":711,"pc":[3040]},{"teal":3069,"source":711,"pc":[3041]},{"teal":3070,"source":711,"pc":[3042,3043]},{"teal":3071,"source":711,"pc":[3044,3045,3046]},{"teal":3072,"source":711,"pc":[3047]},{"teal":3073,"source":711,"pc":[3048]},{"teal":3074,"source":711,"pc":[3049]},{"teal":3075,"source":711,"pc":[3050,3051]},{"teal":3076,"source":711,"pc":[3052]},{"teal":3080,"source":712,"pc":[3053,3054]},{"teal":3081,"source":712,"pc":[3055]},{"teal":3082,"source":712,"pc":[3056,3057]},{"teal":3083,"source":712,"pc":[3058]},{"teal":3084,"source":712,"pc":[3059,3060]},{"teal":3085,"source":712,"pc":[3061]},{"teal":3086,"source":712,"pc":[3062]},{"teal":3091,"source":714,"pc":[3063,3064]},{"teal":3092,"source":714,"pc":[3065]},{"teal":3093,"source":714,"pc":[3066]},{"teal":3094,"source":714,"pc":[3067,3068,3069]},{"teal":3099,"source":715,"pc":[3070,3071]},{"teal":3100,"source":715,"pc":[3072]},{"teal":3101,"source":715,"pc":[3073]},{"teal":3102,"source":715,"pc":[3074,3075]},{"teal":3103,"source":715,"pc":[3076,3077,3078]},{"teal":3104,"source":715,"pc":[3079]},{"teal":3105,"source":715,"pc":[3080]},{"teal":3106,"source":715,"pc":[3081]},{"teal":3107,"source":715,"pc":[3082,3083]},{"teal":3108,"source":715,"pc":[3084]},{"teal":3109,"source":715,"pc":[3085]},{"teal":3110,"source":715,"pc":[3086,3087]},{"teal":3114,"source":716,"pc":[3088,3089]},{"teal":3115,"source":716,"pc":[3090]},{"teal":3116,"source":716,"pc":[3091]},{"teal":3119,"source":716,"errorMessage":"rewardRemoved can't be set if validator doesn't have reward token!","pc":[3092]},{"teal":3126,"source":718,"pc":[3093,3094]},{"teal":3127,"source":718,"pc":[3095]},{"teal":3128,"source":718,"pc":[3096]},{"teal":3129,"source":718,"pc":[3097,3098]},{"teal":3130,"source":718,"pc":[3099,3100,3101]},{"teal":3131,"source":718,"pc":[3102]},{"teal":3132,"source":718,"pc":[3103]},{"teal":3133,"source":718,"pc":[3104]},{"teal":3134,"source":718,"pc":[3105,3106]},{"teal":3135,"source":718,"pc":[3107]},{"teal":3136,"source":718,"pc":[3108]},{"teal":3137,"source":718,"pc":[3109,3110]},{"teal":3138,"source":718,"pc":[3111]},{"teal":3141,"source":717,"errorMessage":"reward being removed must be covered by hold back amount","pc":[3112]},{"teal":3145,"source":723,"pc":[3113,3114]},{"teal":3146,"source":723,"pc":[3115]},{"teal":3147,"source":723,"pc":[3116]},{"teal":3148,"source":723,"pc":[3117]},{"teal":3149,"source":723,"pc":[3118,3119]},{"teal":3150,"source":723,"pc":[3120,3121,3122]},{"teal":3151,"source":723,"pc":[3123]},{"teal":3152,"source":723,"pc":[3124]},{"teal":3153,"source":723,"pc":[3125]},{"teal":3154,"source":723,"pc":[3126,3127]},{"teal":3155,"source":723,"pc":[3128]},{"teal":3156,"source":723,"pc":[3129]},{"teal":3157,"source":723,"pc":[3130,3131]},{"teal":3158,"source":723,"pc":[3132]},{"teal":3159,"source":723,"pc":[3133]},{"teal":3160,"source":723,"pc":[3134]},{"teal":3161,"source":723,"pc":[3135,3136]},{"teal":3162,"source":723,"pc":[3137,3138,3139]},{"teal":3163,"source":723,"pc":[3140]},{"teal":3164,"source":723,"pc":[3141]},{"teal":3165,"source":723,"pc":[3142]},{"teal":3166,"source":723,"pc":[3143,3144]},{"teal":3167,"source":723,"pc":[3145]},{"teal":3172,"source":728,"pc":[3146,3147]},{"teal":3173,"source":728,"pc":[3148,3149,3150]},{"teal":3174,"source":728,"pc":[3151]},{"teal":3175,"source":728,"pc":[3152]},{"teal":3176,"source":728,"pc":[3153]},{"teal":3177,"source":728,"pc":[3154,3155,3156]},{"teal":3185,"source":729,"pc":[3157]},{"teal":3186,"source":729,"pc":[3158,3159]},{"teal":3187,"source":729,"pc":[3160,3161]},{"teal":3188,"source":729,"pc":[3162,3163]},{"teal":3189,"source":729,"pc":[3164,3165]},{"teal":3193,"source":730,"pc":[3166,3167]},{"teal":3194,"source":730,"pc":[3168]},{"teal":3195,"source":730,"pc":[3169]},{"teal":3196,"source":730,"pc":[3170,3171]},{"teal":3197,"source":730,"pc":[3172,3173,3174]},{"teal":3198,"source":730,"pc":[3175]},{"teal":3199,"source":730,"pc":[3176]},{"teal":3200,"source":730,"pc":[3177]},{"teal":3201,"source":730,"pc":[3178,3179]},{"teal":3202,"source":730,"pc":[3180]},{"teal":3203,"source":730,"pc":[3181]},{"teal":3204,"source":730,"pc":[3182,3183]},{"teal":3208,"source":731,"pc":[3184,3185]},{"teal":3209,"source":731,"pc":[3186,3187]},{"teal":3210,"source":731,"pc":[3188,3189]},{"teal":3211,"source":731,"pc":[3190]},{"teal":3212,"source":731,"pc":[3191,3192]},{"teal":3213,"source":731,"pc":[3193,3194]},{"teal":3214,"source":731,"pc":[3195]},{"teal":3215,"source":731,"pc":[3196,3197]},{"teal":3218,"source":729,"pc":[3198]},{"teal":3219,"source":729,"pc":[3199,3200]},{"teal":3222,"source":729,"pc":[3201]},{"teal":3235,"source":734,"pc":[3202,3203]},{"teal":3236,"source":735,"pc":[3204,3205]},{"teal":3237,"source":735,"pc":[3206,3207,3208]},{"teal":3238,"source":735,"pc":[3209]},{"teal":3239,"source":735,"pc":[3210]},{"teal":3240,"source":736,"pc":[3211,3212]},{"teal":3241,"source":736,"pc":[3213,3214,3215]},{"teal":3242,"source":736,"pc":[3216]},{"teal":3243,"source":736,"pc":[3217]},{"teal":3244,"source":736,"pc":[3218]},{"teal":3245,"source":736,"pc":[3219]},{"teal":3246,"source":736,"pc":[3220,3221]},{"teal":3247,"source":736,"pc":[3222]},{"teal":3250,"source":736,"errorMessage":"poolKey.poolId as uint16 overflowed 16 bits","pc":[3223]},{"teal":3251,"source":736,"pc":[3224,3225,3226]},{"teal":3252,"source":736,"pc":[3227]},{"teal":3253,"source":737,"pc":[3228,3229]},{"teal":3254,"source":737,"pc":[3230,3231,3232]},{"teal":3255,"source":737,"pc":[3233]},{"teal":3256,"source":737,"pc":[3234]},{"teal":3257,"source":737,"pc":[3235]},{"teal":3258,"source":738,"pc":[3236,3237]},{"teal":3259,"source":738,"pc":[3238]},{"teal":3260,"source":739,"pc":[3239,3240]},{"teal":3261,"source":739,"pc":[3241]},{"teal":3262,"source":739,"pc":[3242]},{"teal":3263,"source":741,"pc":[3243,3244]},{"teal":3264,"source":741,"pc":[3245]},{"teal":3265,"source":741,"pc":[3246]},{"teal":3266,"source":740,"pc":[3247,3248]},{"teal":3267,"source":740,"pc":[3249]},{"teal":3268,"source":740,"pc":[3250]},{"teal":3269,"source":734,"pc":[3251]},{"teal":3270,"source":734,"pc":[3252]},{"teal":3271,"source":714,"pc":[3253,3254,3255]},{"teal":3285,"source":744,"pc":[3256,3257]},{"teal":3286,"source":745,"pc":[3258,3259]},{"teal":3287,"source":745,"pc":[3260,3261,3262]},{"teal":3288,"source":745,"pc":[3263]},{"teal":3289,"source":745,"pc":[3264]},{"teal":3290,"source":746,"pc":[3265,3266]},{"teal":3291,"source":746,"pc":[3267,3268,3269]},{"teal":3292,"source":746,"pc":[3270]},{"teal":3293,"source":746,"pc":[3271]},{"teal":3294,"source":746,"pc":[3272]},{"teal":3295,"source":746,"pc":[3273]},{"teal":3296,"source":746,"pc":[3274,3275]},{"teal":3297,"source":746,"pc":[3276]},{"teal":3300,"source":746,"errorMessage":"poolKey.poolId as uint16 overflowed 16 bits","pc":[3277]},{"teal":3301,"source":746,"pc":[3278,3279,3280]},{"teal":3302,"source":746,"pc":[3281]},{"teal":3303,"source":747,"pc":[3282,3283]},{"teal":3304,"source":747,"pc":[3284,3285,3286]},{"teal":3305,"source":747,"pc":[3287]},{"teal":3306,"source":747,"pc":[3288]},{"teal":3307,"source":747,"pc":[3289]},{"teal":3308,"source":748,"pc":[3290,3291]},{"teal":3309,"source":748,"pc":[3292]},{"teal":3310,"source":749,"pc":[3293,3294]},{"teal":3311,"source":749,"pc":[3295]},{"teal":3312,"source":749,"pc":[3296]},{"teal":3313,"source":752,"pc":[3297,3298]},{"teal":3314,"source":752,"pc":[3299]},{"teal":3315,"source":751,"pc":[3300,3301]},{"teal":3316,"source":751,"pc":[3302]},{"teal":3317,"source":744,"pc":[3303]},{"teal":3318,"source":744,"pc":[3304]},{"teal":3324,"source":756,"pc":[3305,3306]},{"teal":3325,"source":756,"pc":[3307,3308,3309]},{"teal":3330,"source":758,"pc":[3310,3311]},{"teal":3331,"source":758,"pc":[3312,3313]},{"teal":3332,"source":758,"pc":[3314,3315,3316]},{"teal":3333,"source":758,"pc":[3317]},{"teal":3334,"source":758,"pc":[3318]},{"teal":3335,"source":758,"pc":[3319]},{"teal":3336,"source":758,"pc":[3320,3321]},{"teal":3337,"source":758,"pc":[3322]},{"teal":3338,"source":758,"pc":[3323]},{"teal":3339,"source":758,"pc":[3324]},{"teal":3340,"source":758,"pc":[3325]},{"teal":3341,"source":758,"pc":[3326,3327]},{"teal":3342,"source":758,"pc":[3328,3329]},{"teal":3343,"source":758,"pc":[3330,3331,3332]},{"teal":3344,"source":758,"pc":[3333]},{"teal":3345,"source":758,"pc":[3334]},{"teal":3346,"source":758,"pc":[3335]},{"teal":3347,"source":758,"pc":[3336,3337]},{"teal":3348,"source":758,"pc":[3338]},{"teal":3349,"source":758,"pc":[3339]},{"teal":3350,"source":758,"pc":[3340]},{"teal":3351,"source":758,"pc":[3341]},{"teal":3352,"source":758,"pc":[3342,3343]},{"teal":3353,"source":758,"pc":[3344]},{"teal":3354,"source":758,"pc":[3345,3346]},{"teal":3355,"source":758,"pc":[3347,3348,3349]},{"teal":3356,"source":758,"pc":[3350]},{"teal":3357,"source":758,"pc":[3351]},{"teal":3358,"source":758,"pc":[3352]},{"teal":3359,"source":758,"pc":[3353,3354]},{"teal":3360,"source":758,"pc":[3355]},{"teal":3361,"source":758,"pc":[3356]},{"teal":3362,"source":758,"pc":[3357]},{"teal":3363,"source":758,"pc":[3358]},{"teal":3364,"source":758,"pc":[3359]},{"teal":3365,"source":758,"pc":[3360,3361,3362]},{"teal":3366,"source":758,"pc":[3363]},{"teal":3367,"source":758,"pc":[3364,3365]},{"teal":3368,"source":758,"pc":[3366,3367,3368]},{"teal":3369,"source":758,"pc":[3369]},{"teal":3370,"source":758,"pc":[3370]},{"teal":3371,"source":758,"pc":[3371]},{"teal":3372,"source":758,"pc":[3372,3373]},{"teal":3373,"source":758,"pc":[3374]},{"teal":3381,"source":761,"pc":[3375,3376]},{"teal":3382,"source":761,"pc":[3377,3378,3379]},{"teal":3383,"source":761,"pc":[3380]},{"teal":3384,"source":761,"pc":[3381]},{"teal":3385,"source":762,"pc":[3382,3383]},{"teal":3386,"source":762,"pc":[3384,3385,3386]},{"teal":3387,"source":762,"pc":[3387]},{"teal":3388,"source":762,"pc":[3388]},{"teal":3389,"source":762,"pc":[3389]},{"teal":3390,"source":763,"pc":[3390,3391]},{"teal":3391,"source":763,"pc":[3392,3393,3394]},{"teal":3392,"source":763,"pc":[3395]},{"teal":3393,"source":763,"pc":[3396]},{"teal":3394,"source":763,"pc":[3397]},{"teal":3395,"source":760,"pc":[3398,3399]},{"teal":3396,"source":760,"pc":[3400,3401,3402]},{"teal":3397,"source":760,"pc":[3403,3404]},{"teal":3401,"source":765,"pc":[3405,3406]},{"teal":3402,"source":765,"pc":[3407,3408]},{"teal":3403,"source":765,"pc":[3409,3410]},{"teal":3404,"source":765,"pc":[3411]},{"teal":3405,"source":765,"pc":[3412]},{"teal":3406,"source":765,"pc":[3413,3414]},{"teal":3410,"source":766,"pc":[3415,3416]},{"teal":3411,"source":766,"pc":[3417,3418]},{"teal":3412,"source":766,"pc":[3419,3420]},{"teal":3413,"source":766,"pc":[3421]},{"teal":3414,"source":766,"pc":[3422]},{"teal":3415,"source":766,"pc":[3423,3424]},{"teal":3420,"source":768,"pc":[3425,3426]},{"teal":3421,"source":768,"pc":[3427,3428,3429]},{"teal":3426,"source":769,"pc":[3430,3431]},{"teal":3427,"source":769,"pc":[3432]},{"teal":3428,"source":769,"pc":[3433]},{"teal":3429,"source":769,"pc":[3434]},{"teal":3430,"source":769,"pc":[3435,3436]},{"teal":3431,"source":769,"pc":[3437,3438,3439]},{"teal":3432,"source":769,"pc":[3440]},{"teal":3433,"source":769,"pc":[3441]},{"teal":3434,"source":769,"pc":[3442]},{"teal":3435,"source":769,"pc":[3443,3444]},{"teal":3436,"source":769,"pc":[3445]},{"teal":3437,"source":769,"pc":[3446]},{"teal":3438,"source":769,"pc":[3447]},{"teal":3439,"source":769,"pc":[3448]},{"teal":3440,"source":769,"pc":[3449]},{"teal":3441,"source":769,"pc":[3450]},{"teal":3442,"source":769,"pc":[3451,3452]},{"teal":3443,"source":769,"pc":[3453,3454,3455]},{"teal":3444,"source":769,"pc":[3456]},{"teal":3445,"source":769,"pc":[3457]},{"teal":3446,"source":769,"pc":[3458]},{"teal":3447,"source":769,"pc":[3459,3460]},{"teal":3448,"source":769,"pc":[3461]},{"teal":3454,"source":772,"pc":[3462,3463]},{"teal":3455,"source":772,"pc":[3464,3465,3466]},{"teal":3460,"source":773,"pc":[3467,3468]},{"teal":3461,"source":773,"pc":[3469]},{"teal":3462,"source":773,"pc":[3470]},{"teal":3463,"source":773,"pc":[3471]},{"teal":3464,"source":773,"pc":[3472,3473]},{"teal":3465,"source":773,"pc":[3474]},{"teal":3466,"source":773,"pc":[3475]},{"teal":3471,"source":693,"pc":[3476]},{"teal":3476,"source":789,"pc":[3477]},{"teal":3479,"source":792,"pc":[3478,3479,3480]},{"teal":3480,"source":792,"pc":[3481]},{"teal":3483,"source":791,"pc":[3482,3483,3484]},{"teal":3484,"source":791,"pc":[3485]},{"teal":3485,"source":791,"pc":[3486]},{"teal":3486,"source":791,"pc":[3487,3488]},{"teal":3487,"source":791,"pc":[3489]},{"teal":3490,"source":791,"errorMessage":"argument 1 (staker) for findPoolForStaker must be a address","pc":[3490]},{"teal":3493,"source":790,"pc":[3491,3492,3493]},{"teal":3494,"source":790,"pc":[3494]},{"teal":3497,"source":789,"pc":[3495,3496,3497]},{"teal":3498,"source":789,"pc":[3498]},{"teal":3499,"source":789,"pc":[3499]},{"teal":3500,"source":789,"pc":[3500]},{"teal":3501,"source":789,"pc":[3501]},{"teal":3515,"source":789,"pc":[3502,3503,3504]},{"teal":3518,"source":789,"pc":[3505]},{"teal":3519,"source":789,"pc":[3506,3507]},{"teal":3523,"source":794,"pc":[3508]},{"teal":3524,"source":794,"pc":[3509,3510]},{"teal":3528,"source":795,"pc":[3511]},{"teal":3529,"source":795,"pc":[3512,3513]},{"teal":3533,"source":803,"pc":[3514,3515]},{"teal":3534,"source":803,"pc":[3516,3517,3518]},{"teal":3535,"source":803,"pc":[3519,3520]},{"teal":3540,"source":806,"pc":[3521]},{"teal":3541,"source":806,"pc":[3522,3523]},{"teal":3542,"source":806,"pc":[3524]},{"teal":3543,"source":806,"pc":[3525]},{"teal":3544,"source":806,"pc":[3526]},{"teal":3545,"source":806,"pc":[3527]},{"teal":3546,"source":806,"pc":[3528,3529,3530]},{"teal":3551,"source":807,"pc":[3531]},{"teal":3552,"source":807,"pc":[3532,3533]},{"teal":3553,"source":807,"pc":[3534]},{"teal":3554,"source":807,"pc":[3535]},{"teal":3557,"source":807,"errorMessage":"box value does not exist: this.stakerPoolSet(staker).value","pc":[3536]},{"teal":3558,"source":807,"pc":[3537,3538]},{"teal":3562,"source":808,"pc":[3539,3540]},{"teal":3563,"source":808,"pc":[3541]},{"teal":3564,"source":808,"pc":[3542]},{"teal":3565,"source":808,"pc":[3543]},{"teal":3569,"source":809,"pc":[3544]},{"teal":3570,"source":809,"pc":[3545,3546]},{"teal":3575,"source":809,"pc":[3547,3548]},{"teal":3576,"source":809,"pc":[3549,3550]},{"teal":3577,"source":809,"pc":[3551]},{"teal":3578,"source":809,"pc":[3552,3553,3554]},{"teal":3583,"source":810,"pc":[3555,3556]},{"teal":3584,"source":810,"pc":[3557,3558]},{"teal":3585,"source":810,"pc":[3559]},{"teal":3586,"source":810,"pc":[3560,3561,3562]},{"teal":3591,"source":811,"pc":[3563]},{"teal":3592,"source":811,"pc":[3564,3565]},{"teal":3593,"source":811,"pc":[3566,3567]},{"teal":3594,"source":811,"pc":[3568]},{"teal":3595,"source":811,"pc":[3569,3570]},{"teal":3596,"source":811,"pc":[3571,3572]},{"teal":3597,"source":811,"pc":[3573]},{"teal":3598,"source":811,"pc":[3574,3575]},{"teal":3599,"source":811,"pc":[3576,3577]},{"teal":3600,"source":811,"pc":[3578,3579]},{"teal":3601,"source":811,"pc":[3580,3581]},{"teal":3602,"source":811,"pc":[3582]},{"teal":3608,"source":813,"pc":[3583,3584]},{"teal":3609,"source":813,"pc":[3585,3586]},{"teal":3610,"source":813,"pc":[3587]},{"teal":3611,"source":813,"pc":[3588]},{"teal":3612,"source":813,"pc":[3589]},{"teal":3613,"source":813,"pc":[3590]},{"teal":3614,"source":813,"pc":[3591]},{"teal":3615,"source":813,"pc":[3592]},{"teal":3616,"source":813,"pc":[3593]},{"teal":3617,"source":813,"pc":[3594]},{"teal":3618,"source":813,"pc":[3595]},{"teal":3619,"source":813,"pc":[3596,3597,3598]},{"teal":3622,"source":814,"pc":[3599,3600,3601]},{"teal":3627,"source":816,"pc":[3602]},{"teal":3628,"source":816,"pc":[3603,3604]},{"teal":3633,"source":817,"pc":[3605,3606]},{"teal":3634,"source":817,"pc":[3607,3608]},{"teal":3635,"source":817,"pc":[3609]},{"teal":3636,"source":817,"pc":[3610]},{"teal":3637,"source":817,"pc":[3611]},{"teal":3638,"source":817,"pc":[3612]},{"teal":3639,"source":817,"pc":[3613]},{"teal":3640,"source":817,"pc":[3614]},{"teal":3641,"source":817,"pc":[3615]},{"teal":3642,"source":817,"pc":[3616,3617]},{"teal":3643,"source":817,"pc":[3618]},{"teal":3644,"source":817,"pc":[3619,3620,3621]},{"teal":3649,"source":819,"pc":[3622]},{"teal":3650,"source":819,"pc":[3623,3624]},{"teal":3657,"source":821,"pc":[3625,3626]},{"teal":3658,"source":821,"pc":[3627,3628]},{"teal":3659,"source":821,"pc":[3629,3630]},{"teal":3660,"source":821,"pc":[3631]},{"teal":3661,"source":821,"pc":[3632]},{"teal":3662,"source":821,"pc":[3633]},{"teal":3663,"source":821,"pc":[3634]},{"teal":3664,"source":821,"pc":[3635]},{"teal":3665,"source":821,"pc":[3636]},{"teal":3666,"source":821,"pc":[3637]},{"teal":3667,"source":821,"pc":[3638]},{"teal":3668,"source":821,"pc":[3639]},{"teal":3669,"source":821,"pc":[3640,3641]},{"teal":3670,"source":821,"pc":[3642]},{"teal":3671,"source":821,"pc":[3643]},{"teal":3672,"source":821,"pc":[3644,3645]},{"teal":3673,"source":821,"pc":[3646]},{"teal":3674,"source":821,"pc":[3647]},{"teal":3675,"source":821,"pc":[3648]},{"teal":3676,"source":821,"pc":[3649,3650]},{"teal":3677,"source":821,"pc":[3651]},{"teal":3678,"source":821,"pc":[3652]},{"teal":3679,"source":821,"pc":[3653,3654]},{"teal":3680,"source":821,"pc":[3655]},{"teal":3681,"source":821,"pc":[3656]},{"teal":3682,"source":822,"pc":[3657,3658]},{"teal":3683,"source":821,"pc":[3659]},{"teal":3684,"source":823,"pc":[3660,3661]},{"teal":3685,"source":822,"pc":[3662]},{"teal":3686,"source":820,"pc":[3663,3664,3665]},{"teal":3691,"source":825,"pc":[3666,3667]},{"teal":3692,"source":825,"pc":[3668,3669]},{"teal":3693,"source":825,"pc":[3670]},{"teal":3694,"source":825,"pc":[3671]},{"teal":3695,"source":825,"pc":[3672]},{"teal":3696,"source":825,"pc":[3673]},{"teal":3697,"source":825,"pc":[3674,3675]},{"teal":3698,"source":825,"pc":[3676]},{"teal":3699,"source":825,"pc":[3677,3678]},{"teal":3700,"source":825,"pc":[3679]},{"teal":3701,"source":825,"pc":[3680]},{"teal":3702,"source":825,"pc":[3681,3682]},{"teal":3703,"source":825,"pc":[3683]},{"teal":3704,"source":825,"pc":[3684]},{"teal":3705,"source":825,"pc":[3685,3686,3687]},{"teal":3714,"source":809,"pc":[3688,3689]},{"teal":3715,"source":809,"pc":[3690]},{"teal":3716,"source":809,"pc":[3691]},{"teal":3717,"source":809,"pc":[3692,3693]},{"teal":3718,"source":809,"pc":[3694,3695,3696]},{"teal":3728,"source":833,"pc":[3697,3698]},{"teal":3729,"source":833,"pc":[3699,3700]},{"teal":3730,"source":833,"pc":[3701]},{"teal":3731,"source":833,"pc":[3702]},{"teal":3732,"source":833,"pc":[3703,3704]},{"teal":3733,"source":833,"pc":[3705]},{"teal":3734,"source":833,"pc":[3706]},{"teal":3735,"source":833,"pc":[3707,3708]},{"teal":3736,"source":833,"pc":[3709]},{"teal":3737,"source":833,"pc":[3710]},{"teal":3738,"source":833,"pc":[3711]},{"teal":3741,"source":832,"errorMessage":"must stake at least the minimum for this pool","pc":[3712]},{"teal":3745,"source":838,"pc":[3713,3714]},{"teal":3746,"source":838,"pc":[3715,3716]},{"teal":3747,"source":838,"pc":[3717]},{"teal":3748,"source":838,"pc":[3718,3719]},{"teal":3749,"source":838,"pc":[3720]},{"teal":3750,"source":838,"pc":[3721]},{"teal":3751,"source":838,"pc":[3722,3723]},{"teal":3752,"source":838,"pc":[3724]},{"teal":3753,"source":838,"pc":[3725,3726]},{"teal":3757,"source":839,"pc":[3727,3728]},{"teal":3758,"source":839,"pc":[3729,3730]},{"teal":3759,"source":839,"pc":[3731]},{"teal":3760,"source":839,"pc":[3732,3733]},{"teal":3761,"source":839,"pc":[3734]},{"teal":3762,"source":839,"pc":[3735]},{"teal":3763,"source":839,"pc":[3736,3737]},{"teal":3764,"source":839,"pc":[3738]},{"teal":3765,"source":839,"pc":[3739]},{"teal":3766,"source":839,"pc":[3740,3741]},{"teal":3770,"source":840,"pc":[3742]},{"teal":3771,"source":840,"pc":[3743,3744]},{"teal":3776,"source":840,"pc":[3745,3746]},{"teal":3777,"source":840,"pc":[3747,3748]},{"teal":3778,"source":840,"pc":[3749]},{"teal":3779,"source":840,"pc":[3750,3751,3752]},{"teal":3784,"source":841,"pc":[3753,3754]},{"teal":3785,"source":841,"pc":[3755,3756]},{"teal":3786,"source":841,"pc":[3757,3758]},{"teal":3787,"source":841,"pc":[3759]},{"teal":3788,"source":841,"pc":[3760,3761]},{"teal":3789,"source":841,"pc":[3762]},{"teal":3790,"source":841,"pc":[3763]},{"teal":3791,"source":841,"pc":[3764]},{"teal":3792,"source":841,"pc":[3765]},{"teal":3793,"source":841,"pc":[3766,3767]},{"teal":3794,"source":841,"pc":[3768]},{"teal":3795,"source":841,"pc":[3769,3770]},{"teal":3796,"source":841,"pc":[3771]},{"teal":3797,"source":841,"pc":[3772,3773,3774]},{"teal":3806,"source":843,"pc":[3775,3776]},{"teal":3807,"source":843,"pc":[3777]},{"teal":3808,"source":843,"pc":[3778,3779]},{"teal":3809,"source":843,"pc":[3780]},{"teal":3810,"source":843,"pc":[3781]},{"teal":3811,"source":843,"pc":[3782]},{"teal":3812,"source":843,"pc":[3783]},{"teal":3813,"source":843,"pc":[3784,3785]},{"teal":3814,"source":843,"pc":[3786,3787]},{"teal":3815,"source":843,"pc":[3788,3789]},{"teal":3816,"source":843,"pc":[3790]},{"teal":3817,"source":843,"pc":[3791]},{"teal":3818,"source":843,"pc":[3792]},{"teal":3819,"source":843,"pc":[3793]},{"teal":3820,"source":843,"pc":[3794]},{"teal":3821,"source":843,"pc":[3795]},{"teal":3822,"source":843,"pc":[3796]},{"teal":3823,"source":843,"pc":[3797]},{"teal":3824,"source":844,"pc":[3798,3799]},{"teal":3825,"source":844,"pc":[3800]},{"teal":3826,"source":844,"pc":[3801,3802]},{"teal":3827,"source":844,"pc":[3803]},{"teal":3828,"source":845,"pc":[3804]},{"teal":3829,"source":845,"pc":[3805,3806]},{"teal":3830,"source":845,"pc":[3807]},{"teal":3831,"source":842,"pc":[3808]},{"teal":3832,"source":842,"pc":[3809,3810,3811]},{"teal":3839,"source":840,"pc":[3812,3813]},{"teal":3840,"source":840,"pc":[3814]},{"teal":3841,"source":840,"pc":[3815]},{"teal":3842,"source":840,"pc":[3816,3817]},{"teal":3843,"source":840,"pc":[3818,3819,3820]},{"teal":3848,"source":850,"pc":[3821,3822]},{"teal":3849,"source":850,"pc":[3823]},{"teal":3850,"source":850,"pc":[3824,3825]},{"teal":3851,"source":850,"pc":[3826]},{"teal":3852,"source":850,"pc":[3827,3828]},{"teal":3853,"source":850,"pc":[3829]},{"teal":3854,"source":850,"pc":[3830,3831]},{"teal":3855,"source":850,"pc":[3832]},{"teal":3856,"source":850,"pc":[3833,3834]},{"teal":3857,"source":850,"pc":[3835]},{"teal":3858,"source":850,"pc":[3836]},{"teal":3859,"source":850,"pc":[3837,3838]},{"teal":3860,"source":850,"pc":[3839]},{"teal":3861,"source":850,"pc":[3840]},{"teal":3865,"source":789,"pc":[3841,3842]},{"teal":3868,"source":789,"pc":[3843,3844]},{"teal":3869,"source":789,"pc":[3845]},{"teal":3874,"source":864,"pc":[3846,3847,3848]},{"teal":3875,"source":864,"pc":[3849]},{"teal":3878,"source":864,"pc":[3850,3851,3852]},{"teal":3879,"source":864,"pc":[3853]},{"teal":3882,"source":864,"pc":[3854,3855,3856]},{"teal":3883,"source":864,"pc":[3857]},{"teal":3886,"source":864,"pc":[3858,3859,3860]},{"teal":3887,"source":864,"pc":[3861]},{"teal":3888,"source":864,"pc":[3862]},{"teal":3902,"source":864,"pc":[3863,3864,3865]},{"teal":3905,"source":864,"pc":[3866]},{"teal":3906,"source":864,"pc":[3867,3868]},{"teal":3910,"source":865,"pc":[3869,3870]},{"teal":3911,"source":865,"pc":[3871,3872,3873]},{"teal":3915,"source":867,"pc":[3874,3875]},{"teal":3916,"source":867,"pc":[3876,3877]},{"teal":3917,"source":867,"pc":[3878]},{"teal":3918,"source":867,"pc":[3879,3880]},{"teal":3919,"source":867,"pc":[3881]},{"teal":3920,"source":867,"pc":[3882]},{"teal":3921,"source":867,"pc":[3883,3884]},{"teal":3922,"source":867,"pc":[3885]},{"teal":3923,"source":867,"pc":[3886,3887]},{"teal":3927,"source":868,"pc":[3888,3889]},{"teal":3928,"source":868,"pc":[3890]},{"teal":3929,"source":868,"pc":[3891]},{"teal":3930,"source":868,"pc":[3892]},{"teal":3931,"source":868,"pc":[3893,3894,3895]},{"teal":3932,"source":868,"pc":[3896,3897]},{"teal":3933,"source":868,"pc":[3898]},{"teal":3934,"source":868,"pc":[3899]},{"teal":3935,"source":868,"pc":[3900]},{"teal":3939,"source":868,"errorMessage":"node number out of allowable range","pc":[3901]},{"teal":3943,"source":870,"pc":[3902]},{"teal":3944,"source":870,"pc":[3903,3904]},{"teal":3949,"source":870,"pc":[3905,3906]},{"teal":3950,"source":870,"pc":[3907]},{"teal":3951,"source":870,"pc":[3908]},{"teal":3952,"source":870,"pc":[3909,3910,3911]},{"teal":3956,"source":871,"pc":[3912]},{"teal":3957,"source":871,"pc":[3913,3914]},{"teal":3962,"source":871,"pc":[3915,3916]},{"teal":3963,"source":871,"pc":[3917,3918]},{"teal":3964,"source":871,"pc":[3919]},{"teal":3965,"source":871,"pc":[3920,3921,3922]},{"teal":3970,"source":872,"pc":[3923,3924]},{"teal":3971,"source":872,"pc":[3925]},{"teal":3972,"source":872,"pc":[3926,3927]},{"teal":3973,"source":872,"pc":[3928]},{"teal":3974,"source":872,"pc":[3929]},{"teal":3975,"source":872,"pc":[3930]},{"teal":3976,"source":872,"pc":[3931]},{"teal":3977,"source":872,"pc":[3932]},{"teal":3978,"source":872,"pc":[3933,3934]},{"teal":3979,"source":872,"pc":[3935]},{"teal":3980,"source":872,"pc":[3936]},{"teal":3981,"source":872,"pc":[3937]},{"teal":3982,"source":872,"pc":[3938]},{"teal":3983,"source":872,"pc":[3939]},{"teal":3984,"source":872,"pc":[3940]},{"teal":3985,"source":872,"pc":[3941,3942]},{"teal":3986,"source":872,"pc":[3943]},{"teal":3987,"source":872,"pc":[3944,3945,3946]},{"teal":3992,"source":873,"pc":[3947,3948]},{"teal":3993,"source":873,"pc":[3949]},{"teal":3994,"source":873,"pc":[3950]},{"teal":3995,"source":873,"pc":[3951,3952]},{"teal":3996,"source":873,"pc":[3953]},{"teal":3999,"source":873,"errorMessage":"can't move to same node","pc":[3954]},{"teal":4003,"source":875,"pc":[3955,3956]},{"teal":4004,"source":875,"pc":[3957,3958]},{"teal":4005,"source":875,"pc":[3959]},{"teal":4006,"source":875,"pc":[3960]},{"teal":4007,"source":875,"pc":[3961]},{"teal":4008,"source":875,"pc":[3962]},{"teal":4009,"source":875,"pc":[3963]},{"teal":4010,"source":875,"pc":[3964,3965]},{"teal":4011,"source":875,"pc":[3966]},{"teal":4012,"source":875,"pc":[3967]},{"teal":4013,"source":875,"pc":[3968]},{"teal":4014,"source":875,"pc":[3969,3970]},{"teal":4015,"source":875,"pc":[3971]},{"teal":4016,"source":875,"pc":[3972,3973]},{"teal":4017,"source":875,"pc":[3974]},{"teal":4018,"source":875,"pc":[3975]},{"teal":4019,"source":875,"pc":[3976,3977]},{"teal":4020,"source":875,"pc":[3978]},{"teal":4026,"source":878,"pc":[3979]},{"teal":4027,"source":878,"pc":[3980,3981]},{"teal":4028,"source":878,"pc":[3982,3983]},{"teal":4029,"source":878,"pc":[3984,3985,3986,3987,3988,3989]},{"teal":4030,"source":878,"pc":[3990,3991]},{"teal":4034,"source":879,"pc":[3992,3993]},{"teal":4035,"source":879,"pc":[3994,3995]},{"teal":4038,"source":878,"pc":[3996]},{"teal":4039,"source":878,"pc":[3997,3998]},{"teal":4042,"source":878,"pc":[3999]},{"teal":4046,"source":883,"pc":[4000,4001]},{"teal":4047,"source":883,"pc":[4002,4003]},{"teal":4048,"source":883,"pc":[4004,4005]},{"teal":4049,"source":883,"pc":[4006,4007,4008]},{"teal":4053,"source":884,"pc":[4009]},{"teal":4060,"source":871,"pc":[4010,4011]},{"teal":4061,"source":871,"pc":[4012]},{"teal":4062,"source":871,"pc":[4013]},{"teal":4063,"source":871,"pc":[4014,4015]},{"teal":4064,"source":871,"pc":[4016,4017,4018]},{"teal":4071,"source":870,"pc":[4019,4020]},{"teal":4072,"source":870,"pc":[4021]},{"teal":4073,"source":870,"pc":[4022]},{"teal":4074,"source":870,"pc":[4023,4024]},{"teal":4075,"source":870,"pc":[4025,4026,4027]},{"teal":4079,"source":888,"errorMessage":"couldn't find pool app id in nodes to move","pc":[4028]},{"teal":4080,"source":864,"pc":[4029]},{"teal":4085,"source":902,"pc":[4030]},{"teal":4088,"source":902,"pc":[4031,4032,4033]},{"teal":4089,"source":902,"pc":[4034]},{"teal":4090,"source":902,"pc":[4035]},{"teal":4091,"source":902,"pc":[4036,4037]},{"teal":4092,"source":902,"pc":[4038]},{"teal":4095,"source":902,"errorMessage":"argument 0 (receiver) for emptyTokenRewards must be a address","pc":[4039]},{"teal":4098,"source":902,"pc":[4040,4041,4042]},{"teal":4099,"source":902,"pc":[4043]},{"teal":4102,"source":902,"pc":[4044,4045,4046]},{"teal":4103,"source":902,"pc":[4047]},{"teal":4104,"source":902,"pc":[4048]},{"teal":4105,"source":902,"pc":[4049]},{"teal":4106,"source":902,"pc":[4050]},{"teal":4107,"source":902,"pc":[4051]},{"teal":4121,"source":902,"pc":[4052,4053,4054]},{"teal":4124,"source":902,"pc":[4055]},{"teal":4125,"source":902,"pc":[4056,4057]},{"teal":4129,"source":903,"pc":[4058,4059]},{"teal":4130,"source":903,"pc":[4060,4061,4062]},{"teal":4134,"source":904,"pc":[4063,4064]},{"teal":4135,"source":904,"pc":[4065]},{"teal":4136,"source":904,"pc":[4066]},{"teal":4137,"source":904,"pc":[4067,4068]},{"teal":4138,"source":904,"pc":[4069]},{"teal":4139,"source":904,"pc":[4070]},{"teal":4140,"source":904,"pc":[4071,4072]},{"teal":4141,"source":904,"pc":[4073]},{"teal":4142,"source":904,"pc":[4074]},{"teal":4143,"source":904,"pc":[4075,4076]},{"teal":4147,"source":905,"pc":[4077,4078]},{"teal":4148,"source":905,"pc":[4079]},{"teal":4149,"source":905,"pc":[4080]},{"teal":4150,"source":905,"pc":[4081,4082]},{"teal":4151,"source":905,"pc":[4083]},{"teal":4152,"source":905,"pc":[4084]},{"teal":4153,"source":905,"pc":[4085,4086]},{"teal":4154,"source":905,"pc":[4087]},{"teal":4155,"source":905,"pc":[4088]},{"teal":4156,"source":905,"pc":[4089,4090]},{"teal":4160,"source":906,"pc":[4091,4092]},{"teal":4161,"source":906,"pc":[4093]},{"teal":4162,"source":906,"pc":[4094]},{"teal":4165,"source":906,"errorMessage":"this validator doesn't have a reward token defined","pc":[4095]},{"teal":4169,"source":907,"pc":[4096,4097]},{"teal":4170,"source":907,"pc":[4098]},{"teal":4171,"source":907,"pc":[4099]},{"teal":4172,"source":907,"pc":[4100,4101]},{"teal":4173,"source":907,"pc":[4102]},{"teal":4174,"source":907,"pc":[4103]},{"teal":4175,"source":907,"pc":[4104,4105]},{"teal":4176,"source":907,"pc":[4106]},{"teal":4177,"source":907,"pc":[4107]},{"teal":4178,"source":907,"pc":[4108,4109]},{"teal":4183,"source":910,"pc":[4110,4111]},{"teal":4184,"source":910,"pc":[4112,4113]},{"teal":4185,"source":910,"pc":[4114]},{"teal":4186,"source":910,"pc":[4115,4116]},{"teal":4187,"source":910,"pc":[4117,4118]},{"teal":4188,"source":910,"pc":[4119]},{"teal":4189,"source":910,"pc":[4120,4121]},{"teal":4190,"source":910,"pc":[4122]},{"teal":4191,"source":909,"pc":[4123,4124]},{"teal":4198,"source":913,"pc":[4125]},{"teal":4199,"source":913,"pc":[4126,4127]},{"teal":4200,"source":913,"pc":[4128,4129]},{"teal":4201,"source":913,"pc":[4130,4131]},{"teal":4202,"source":913,"pc":[4132,4133]},{"teal":4206,"source":914,"pc":[4134,4135]},{"teal":4207,"source":914,"pc":[4136,4137]},{"teal":4211,"source":915,"pc":[4138,4139]},{"teal":4212,"source":915,"pc":[4140,4141]},{"teal":4213,"source":915,"pc":[4142,4143]},{"teal":4214,"source":915,"pc":[4144]},{"teal":4215,"source":915,"pc":[4145,4146]},{"teal":4216,"source":915,"pc":[4147,4148]},{"teal":4217,"source":915,"pc":[4149]},{"teal":4218,"source":915,"pc":[4150,4151]},{"teal":4221,"source":913,"pc":[4152]},{"teal":4222,"source":913,"pc":[4153,4154]},{"teal":4225,"source":913,"pc":[4155]},{"teal":4232,"source":918,"pc":[4156,4157]},{"teal":4233,"source":918,"pc":[4158,4159]},{"teal":4234,"source":918,"pc":[4160]},{"teal":4235,"source":918,"pc":[4161,4162]},{"teal":4236,"source":918,"pc":[4163,4164]},{"teal":4237,"source":918,"pc":[4165]},{"teal":4238,"source":918,"pc":[4166,4167]},{"teal":4239,"source":918,"pc":[4168]},{"teal":4242,"source":917,"errorMessage":"balance of remaining reward tokens should match the held back amount","pc":[4169]},{"teal":4246,"source":921,"pc":[4170,4171]},{"teal":4249,"source":902,"pc":[4172,4173]},{"teal":4252,"source":902,"pc":[4174,4175]},{"teal":4253,"source":902,"pc":[4176]},{"teal":4257,"source":1013,"pc":[4177,4178,4179]},{"teal":4264,"source":1015,"pc":[4180,4181]},{"teal":4265,"source":1015,"pc":[4182]},{"teal":4266,"source":1015,"pc":[4183,4184]},{"teal":4267,"source":1015,"pc":[4185]},{"teal":4268,"source":1015,"pc":[4186,4187]},{"teal":4269,"source":1015,"pc":[4188]},{"teal":4270,"source":1015,"pc":[4189]},{"teal":4271,"source":1015,"pc":[4190,4191]},{"teal":4272,"source":1015,"pc":[4192]},{"teal":4273,"source":1015,"pc":[4193]},{"teal":4276,"source":1014,"errorMessage":"can only be called by validator owner","pc":[4194]},{"teal":4277,"source":1013,"pc":[4195]},{"teal":4281,"source":1020,"pc":[4196,4197,4198]},{"teal":4289,"source":1022,"pc":[4199,4200]},{"teal":4290,"source":1022,"pc":[4201]},{"teal":4291,"source":1022,"pc":[4202,4203]},{"teal":4292,"source":1022,"pc":[4204]},{"teal":4293,"source":1022,"pc":[4205,4206]},{"teal":4294,"source":1022,"pc":[4207]},{"teal":4295,"source":1022,"pc":[4208]},{"teal":4296,"source":1022,"pc":[4209,4210]},{"teal":4297,"source":1022,"pc":[4211]},{"teal":4298,"source":1022,"pc":[4212]},{"teal":4299,"source":1022,"pc":[4213]},{"teal":4300,"source":1022,"pc":[4214,4215,4216]},{"teal":4301,"source":1023,"pc":[4217,4218]},{"teal":4302,"source":1023,"pc":[4219,4220]},{"teal":4303,"source":1023,"pc":[4221,4222]},{"teal":4304,"source":1023,"pc":[4223]},{"teal":4305,"source":1023,"pc":[4224,4225]},{"teal":4306,"source":1023,"pc":[4226]},{"teal":4307,"source":1023,"pc":[4227]},{"teal":4308,"source":1023,"pc":[4228,4229]},{"teal":4309,"source":1023,"pc":[4230]},{"teal":4310,"source":1023,"pc":[4231]},{"teal":4311,"source":1022,"pc":[4232]},{"teal":4315,"source":1021,"errorMessage":"can only be called by owner or manager of validator","pc":[4233]},{"teal":4316,"source":1020,"pc":[4234]},{"teal":4324,"source":1033,"pc":[4235,4236,4237]},{"teal":4328,"source":1034,"pc":[4238]},{"teal":4329,"source":1034,"pc":[4239,4240]},{"teal":4330,"source":1034,"pc":[4241,4242,4243]},{"teal":4331,"source":1034,"pc":[4244]},{"teal":4332,"source":1034,"pc":[4245]},{"teal":4333,"source":1034,"pc":[4246]},{"teal":4334,"source":1034,"pc":[4247]},{"teal":4335,"source":1034,"pc":[4248]},{"teal":4336,"source":1034,"pc":[4249]},{"teal":4339,"source":1034,"errorMessage":"the specified validator id isn't valid","pc":[4250]},{"teal":4343,"source":1035,"pc":[4251,4252]},{"teal":4344,"source":1035,"pc":[4253,4254,4255]},{"teal":4345,"source":1035,"pc":[4256]},{"teal":4346,"source":58,"pc":[4257]},{"teal":4347,"source":1035,"pc":[4258]},{"teal":4350,"source":1035,"errorMessage":"pool id not in valid range","pc":[4259]},{"teal":4357,"source":1037,"pc":[4260,4261]},{"teal":4358,"source":1037,"pc":[4262,4263,4264]},{"teal":4359,"source":1037,"pc":[4265]},{"teal":4360,"source":1037,"pc":[4266]},{"teal":4361,"source":1037,"pc":[4267]},{"teal":4362,"source":1037,"pc":[4268]},{"teal":4363,"source":1037,"pc":[4269,4270,4271]},{"teal":4364,"source":1037,"pc":[4272,4273]},{"teal":4365,"source":1037,"pc":[4274,4275,4276]},{"teal":4366,"source":1037,"pc":[4277]},{"teal":4367,"source":1037,"pc":[4278,4279]},{"teal":4368,"source":1037,"pc":[4280,4281]},{"teal":4369,"source":1037,"pc":[4282]},{"teal":4370,"source":1037,"pc":[4283,4284]},{"teal":4371,"source":1037,"pc":[4285,4286,4287]},{"teal":4372,"source":1037,"pc":[4288]},{"teal":4373,"source":1037,"pc":[4289]},{"teal":4374,"source":1037,"pc":[4290]},{"teal":4375,"source":1037,"pc":[4291,4292]},{"teal":4376,"source":1037,"pc":[4293]},{"teal":4377,"source":1037,"pc":[4294]},{"teal":4378,"source":1037,"pc":[4295]},{"teal":4379,"source":1037,"pc":[4296]},{"teal":4383,"source":1036,"errorMessage":"pool id outside of range of pools created for this validator","pc":[4297]},{"teal":4390,"source":1043,"pc":[4298,4299]},{"teal":4391,"source":1043,"pc":[4300,4301,4302]},{"teal":4392,"source":1043,"pc":[4303]},{"teal":4393,"source":1043,"pc":[4304,4305]},{"teal":4394,"source":1043,"pc":[4306,4307]},{"teal":4395,"source":1043,"pc":[4308,4309,4310]},{"teal":4396,"source":1043,"pc":[4311]},{"teal":4397,"source":1043,"pc":[4312]},{"teal":4398,"source":1043,"pc":[4313]},{"teal":4399,"source":1043,"pc":[4314,4315]},{"teal":4400,"source":1043,"pc":[4316]},{"teal":4401,"source":1043,"pc":[4317]},{"teal":4402,"source":1043,"pc":[4318]},{"teal":4403,"source":1043,"pc":[4319]},{"teal":4404,"source":1043,"pc":[4320]},{"teal":4405,"source":1043,"pc":[4321]},{"teal":4406,"source":1043,"pc":[4322,4323]},{"teal":4407,"source":1043,"pc":[4324,4325,4326]},{"teal":4408,"source":1043,"pc":[4327]},{"teal":4409,"source":1043,"pc":[4328]},{"teal":4410,"source":1043,"pc":[4329]},{"teal":4411,"source":1043,"pc":[4330,4331]},{"teal":4412,"source":1043,"pc":[4332]},{"teal":4413,"source":1043,"pc":[4333]},{"teal":4414,"source":1043,"pc":[4334]},{"teal":4417,"source":1042,"errorMessage":"The passed in app id doesn't match the passed in ids","pc":[4335]},{"teal":4421,"source":1047,"pc":[4336,4337]},{"teal":4422,"source":1047,"pc":[4338,4339]},{"teal":4423,"source":1047,"pc":[4340,4341,4342]},{"teal":4424,"source":1047,"pc":[4343]},{"teal":4425,"source":1047,"pc":[4344,4345]},{"teal":4426,"source":1047,"pc":[4346]},{"teal":4427,"source":1047,"pc":[4347]},{"teal":4428,"source":1047,"pc":[4348]},{"teal":4432,"source":1049,"pc":[4349,4350]},{"teal":4433,"source":1049,"pc":[4351,4352,4353]},{"teal":4434,"source":1049,"pc":[4354]},{"teal":4435,"source":1049,"pc":[4355,4356]},{"teal":4436,"source":1049,"pc":[4357,4358,4359]},{"teal":4437,"source":1049,"pc":[4360]},{"teal":4438,"source":1049,"pc":[4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373]},{"teal":4439,"source":1049,"pc":[4374]},{"teal":4442,"source":1049,"errorMessage":"global state value does not exist: AppID.fromUint64(poolKey.poolAppId).globalState('validatorId')","pc":[4375]},{"teal":4443,"source":1049,"pc":[4376]},{"teal":4444,"source":1049,"pc":[4377]},{"teal":4448,"source":1050,"pc":[4378,4379]},{"teal":4449,"source":1050,"pc":[4380,4381,4382]},{"teal":4450,"source":1050,"pc":[4383]},{"teal":4451,"source":1050,"pc":[4384,4385]},{"teal":4452,"source":1050,"pc":[4386,4387,4388]},{"teal":4453,"source":1050,"pc":[4389]},{"teal":4454,"source":1050,"pc":[4390,4391,4392,4393,4394,4395,4396,4397]},{"teal":4455,"source":1050,"pc":[4398]},{"teal":4458,"source":1050,"errorMessage":"global state value does not exist: AppID.fromUint64(poolKey.poolAppId).globalState('poolId')","pc":[4399]},{"teal":4459,"source":1050,"pc":[4400]},{"teal":4460,"source":1050,"pc":[4401]},{"teal":4461,"source":1033,"pc":[4402]},{"teal":4470,"source":1059,"pc":[4403,4404,4405]},{"teal":4473,"source":1059,"pc":[4406]},{"teal":4474,"source":1059,"pc":[4407]},{"teal":4478,"source":1060,"pc":[4408]},{"teal":4479,"source":1060,"pc":[4409,4410]},{"teal":4480,"source":1060,"pc":[4411]},{"teal":4481,"source":1060,"pc":[4412]},{"teal":4482,"source":1060,"pc":[4413,4414]},{"teal":4487,"source":1061,"pc":[4415,4416]},{"teal":4488,"source":1061,"pc":[4417]},{"teal":4489,"source":1060,"pc":[4418]},{"teal":4490,"source":1060,"pc":[4419,4420]},{"teal":4491,"source":1060,"pc":[4421]},{"teal":4492,"source":1060,"pc":[4422]},{"teal":4493,"source":1060,"pc":[4423,4424]},{"teal":4494,"source":1060,"pc":[4425]},{"teal":4495,"source":1061,"pc":[4426]},{"teal":4496,"source":1061,"pc":[4427]},{"teal":4497,"source":1061,"pc":[4428]},{"teal":4498,"source":1061,"pc":[4429,4430,4431]},{"teal":4503,"source":1064,"pc":[4432,4433]},{"teal":4504,"source":1064,"pc":[4434]},{"teal":4505,"source":1060,"pc":[4435]},{"teal":4506,"source":1060,"pc":[4436,4437]},{"teal":4507,"source":1060,"pc":[4438]},{"teal":4508,"source":1060,"pc":[4439]},{"teal":4509,"source":1060,"pc":[4440,4441]},{"teal":4510,"source":1060,"pc":[4442]},{"teal":4511,"source":1064,"pc":[4443]},{"teal":4512,"source":1064,"pc":[4444,4445]},{"teal":4513,"source":1064,"pc":[4446]},{"teal":4516,"source":1064,"errorMessage":"global state value does not exist: AppID.fromUint64(validatorConfig.nfdForInfo).globalState('i.owner.a')","pc":[4447]},{"teal":4517,"source":1064,"pc":[4448,4449]},{"teal":4522,"source":1066,"pc":[4450]},{"teal":4523,"source":1066,"pc":[4451,4452]},{"teal":4524,"source":1060,"pc":[4453]},{"teal":4525,"source":1060,"pc":[4454,4455]},{"teal":4526,"source":1060,"pc":[4456]},{"teal":4527,"source":1060,"pc":[4457]},{"teal":4528,"source":1060,"pc":[4458,4459]},{"teal":4529,"source":1060,"pc":[4460]},{"teal":4530,"source":1066,"pc":[4461,4462]},{"teal":4531,"source":1066,"pc":[4463]},{"teal":4532,"source":1066,"pc":[4464]},{"teal":4533,"source":1066,"pc":[4465,4466,4467]},{"teal":4534,"source":1066,"pc":[4468,4469]},{"teal":4535,"source":1066,"pc":[4470,4471]},{"teal":4536,"source":1060,"pc":[4472]},{"teal":4537,"source":1060,"pc":[4473,4474]},{"teal":4538,"source":1060,"pc":[4475]},{"teal":4539,"source":1060,"pc":[4476]},{"teal":4540,"source":1060,"pc":[4477,4478]},{"teal":4541,"source":1060,"pc":[4479]},{"teal":4542,"source":1066,"pc":[4480,4481]},{"teal":4543,"source":1066,"pc":[4482]},{"teal":4544,"source":1066,"pc":[4483]},{"teal":4547,"source":1066,"pc":[4484,4485,4486]},{"teal":4552,"source":1068,"pc":[4487,4488]},{"teal":4553,"source":1068,"pc":[4489,4490]},{"teal":4554,"source":1068,"pc":[4491]},{"teal":4555,"source":1068,"pc":[4492,4493]},{"teal":4556,"source":1068,"pc":[4494]},{"teal":4557,"source":1068,"pc":[4495]},{"teal":4558,"source":1068,"pc":[4496,4497]},{"teal":4559,"source":1068,"pc":[4498]},{"teal":4564,"source":1059,"pc":[4499]},{"teal":4568,"source":1073,"pc":[4500,4501,4502]},{"teal":4572,"source":1075,"pc":[4503,4504]},{"teal":4573,"source":1075,"pc":[4505,4506,4507]},{"teal":4574,"source":1075,"pc":[4508,4509]},{"teal":4575,"source":1075,"pc":[4510]},{"teal":4576,"source":1075,"pc":[4511]},{"teal":4580,"source":1076,"pc":[4512,4513]},{"teal":4581,"source":1076,"pc":[4514,4515,4516]},{"teal":4582,"source":1076,"pc":[4517,4518]},{"teal":4583,"source":1076,"pc":[4519]},{"teal":4584,"source":1076,"pc":[4520]},{"teal":4588,"source":1077,"pc":[4521,4522]},{"teal":4589,"source":1077,"pc":[4523,4524]},{"teal":4590,"source":1077,"pc":[4525,4526,4527]},{"teal":4591,"source":1077,"pc":[4528]},{"teal":4594,"source":1077,"errorMessage":"sender must be owner to add new validator","pc":[4529]},{"teal":4601,"source":1080,"pc":[4530,4531]},{"teal":4602,"source":1080,"pc":[4532,4533,4534]},{"teal":4603,"source":1080,"pc":[4535]},{"teal":4604,"source":1080,"pc":[4536]},{"teal":4605,"source":1080,"pc":[4537]},{"teal":4606,"source":1080,"pc":[4538]},{"teal":4607,"source":1080,"pc":[4539,4540,4541]},{"teal":4608,"source":1080,"pc":[4542,4543]},{"teal":4609,"source":1080,"pc":[4544,4545,4546]},{"teal":4610,"source":1080,"pc":[4547]},{"teal":4611,"source":1080,"pc":[4548,4549]},{"teal":4612,"source":1080,"pc":[4550]},{"teal":4613,"source":1080,"pc":[4551]},{"teal":4617,"source":1079,"errorMessage":"gating type not valid","pc":[4552]},{"teal":4624,"source":1084,"pc":[4553,4554]},{"teal":4625,"source":1084,"pc":[4555,4556,4557]},{"teal":4626,"source":1084,"pc":[4558]},{"teal":4627,"source":1084,"pc":[4559]},{"teal":4628,"source":1084,"pc":[4560]},{"teal":4629,"source":1084,"pc":[4561]},{"teal":4630,"source":1084,"pc":[4562,4563,4564]},{"teal":4631,"source":1084,"pc":[4565,4566]},{"teal":4632,"source":1084,"pc":[4567,4568,4569]},{"teal":4633,"source":1084,"pc":[4570]},{"teal":4634,"source":1084,"pc":[4571,4572]},{"teal":4635,"source":1084,"pc":[4573]},{"teal":4636,"source":1084,"pc":[4574]},{"teal":4640,"source":1083,"errorMessage":"epoch length not in allowable range","pc":[4575]},{"teal":4647,"source":1088,"pc":[4576,4577]},{"teal":4648,"source":1088,"pc":[4578,4579,4580]},{"teal":4649,"source":1088,"pc":[4581]},{"teal":4650,"source":1088,"pc":[4582]},{"teal":4651,"source":1088,"pc":[4583]},{"teal":4652,"source":1088,"pc":[4584]},{"teal":4653,"source":1088,"pc":[4585,4586,4587]},{"teal":4654,"source":1088,"pc":[4588,4589]},{"teal":4655,"source":1088,"pc":[4590,4591,4592]},{"teal":4656,"source":1088,"pc":[4593]},{"teal":4657,"source":1088,"pc":[4594,4595]},{"teal":4658,"source":1088,"pc":[4596]},{"teal":4659,"source":1088,"pc":[4597]},{"teal":4663,"source":1087,"errorMessage":"commission percentage not valid","pc":[4598]},{"teal":4668,"source":1091,"pc":[4599,4600]},{"teal":4669,"source":1091,"pc":[4601,4602,4603]},{"teal":4670,"source":1091,"pc":[4604]},{"teal":4671,"source":1091,"pc":[4605]},{"teal":4672,"source":1091,"pc":[4606]},{"teal":4673,"source":1091,"pc":[4607,4608,4609]},{"teal":4681,"source":1093,"pc":[4610,4611]},{"teal":4682,"source":1093,"pc":[4612,4613,4614]},{"teal":4683,"source":1093,"pc":[4615,4616]},{"teal":4684,"source":1093,"pc":[4617]},{"teal":4687,"source":1092,"errorMessage":"validatorCommissionAddress must be set if percent to validator is not 0","pc":[4618]},{"teal":4692,"source":1097,"pc":[4619,4620]},{"teal":4693,"source":1097,"pc":[4621,4622,4623]},{"teal":4694,"source":1097,"pc":[4624]},{"teal":4695,"source":1097,"pc":[4625,4626]},{"teal":4696,"source":1097,"pc":[4627]},{"teal":4699,"source":1097,"errorMessage":"staking pool must have minimum entry of 1 algo","pc":[4628]},{"teal":4706,"source":1100,"pc":[4629,4630]},{"teal":4707,"source":1100,"pc":[4631,4632,4633]},{"teal":4708,"source":1100,"pc":[4634]},{"teal":4709,"source":1100,"pc":[4635]},{"teal":4710,"source":1100,"pc":[4636]},{"teal":4711,"source":1100,"pc":[4637]},{"teal":4712,"source":1100,"pc":[4638,4639,4640]},{"teal":4713,"source":1100,"pc":[4641,4642]},{"teal":4714,"source":1100,"pc":[4643,4644,4645]},{"teal":4715,"source":1100,"pc":[4646]},{"teal":4716,"source":1100,"pc":[4647,4648]},{"teal":4717,"source":1100,"pc":[4649]},{"teal":4718,"source":1100,"pc":[4650]},{"teal":4722,"source":1099,"errorMessage":"number of pools per node must be be between 1 and the maximum allowed number","pc":[4651]},{"teal":4727,"source":1103,"pc":[4652,4653]},{"teal":4728,"source":1103,"pc":[4654,4655,4656]},{"teal":4729,"source":1103,"pc":[4657]},{"teal":4730,"source":1103,"pc":[4658]},{"teal":4731,"source":1103,"pc":[4659]},{"teal":4732,"source":1103,"pc":[4660,4661,4662]},{"teal":4737,"source":1104,"pc":[4663,4664]},{"teal":4738,"source":1104,"pc":[4665,4666,4667]},{"teal":4739,"source":1104,"pc":[4668]},{"teal":4740,"source":1104,"pc":[4669,4670]},{"teal":4741,"source":1104,"pc":[4671]},{"teal":4744,"source":1104,"errorMessage":"sunsettingOn must be later than now if set","pc":[4672]},{"teal":4747,"source":1073,"pc":[4673]},{"teal":4761,"source":1119,"pc":[4674,4675,4676]},{"teal":4764,"source":1119,"pc":[4677]},{"teal":4765,"source":1119,"pc":[4678,4679]},{"teal":4769,"source":1126,"pc":[4680,4681]},{"teal":4770,"source":1126,"pc":[4682,4683]},{"teal":4771,"source":1126,"pc":[4684,4685,4686]},{"teal":4772,"source":1126,"pc":[4687]},{"teal":4773,"source":1126,"pc":[4688]},{"teal":4774,"source":1126,"pc":[4689]},{"teal":4775,"source":1126,"pc":[4690,4691]},{"teal":4776,"source":1126,"pc":[4692]},{"teal":4777,"source":1126,"pc":[4693]},{"teal":4778,"source":1126,"pc":[4694]},{"teal":4779,"source":1126,"pc":[4695]},{"teal":4780,"source":1126,"pc":[4696]},{"teal":4781,"source":1126,"pc":[4697]},{"teal":4782,"source":1126,"pc":[4698,4699]},{"teal":4783,"source":1126,"pc":[4700,4701,4702]},{"teal":4784,"source":1126,"pc":[4703]},{"teal":4785,"source":1126,"pc":[4704]},{"teal":4786,"source":1126,"pc":[4705]},{"teal":4787,"source":1126,"pc":[4706,4707]},{"teal":4788,"source":1126,"pc":[4708]},{"teal":4789,"source":1126,"pc":[4709]},{"teal":4790,"source":1126,"pc":[4710,4711]},{"teal":4803,"source":1135,"pc":[4712]},{"teal":4804,"source":1135,"pc":[4713]},{"teal":4805,"source":1135,"pc":[4714,4715]},{"teal":4809,"source":1135,"pc":[4716,4717]},{"teal":4810,"source":1135,"pc":[4718,4719]},{"teal":4811,"source":1135,"pc":[4720,4721]},{"teal":4812,"source":1135,"pc":[4722]},{"teal":4813,"source":1135,"pc":[4723,4724]},{"teal":4817,"source":1135,"pc":[4725,4726]},{"teal":4818,"source":1135,"pc":[4727,4728]},{"teal":4819,"source":1135,"pc":[4729]},{"teal":4820,"source":1135,"pc":[4730,4731]},{"teal":4823,"source":1135,"pc":[4732]},{"teal":4824,"source":1135,"pc":[4733,4734]},{"teal":4825,"source":1130,"pc":[4735]},{"teal":4826,"source":1130,"pc":[4736,4737]},{"teal":4827,"source":1130,"pc":[4738,4739]},{"teal":4828,"source":1130,"pc":[4740,4741,4742,4743,4744,4745]},{"teal":4829,"source":1130,"pc":[4746,4747]},{"teal":4833,"source":1131,"pc":[4748,4749]},{"teal":4834,"source":1131,"pc":[4750,4751]},{"teal":4844,"source":1137,"pc":[4752,4753]},{"teal":4845,"source":1137,"pc":[4754,4755]},{"teal":4846,"source":1137,"pc":[4756,4757]},{"teal":4849,"source":1130,"pc":[4758]},{"teal":4850,"source":1130,"pc":[4759,4760]},{"teal":4853,"source":1130,"pc":[4761]},{"teal":4854,"source":1130,"pc":[4762,4763]},{"teal":4855,"source":1130,"pc":[4764]},{"teal":4856,"source":1130,"pc":[4765]},{"teal":4857,"source":1130,"pc":[4766,4767]},{"teal":4858,"source":1130,"pc":[4768,4769,4770]},{"teal":4859,"source":1130,"pc":[4771]},{"teal":4864,"source":1140,"pc":[4772,4773]},{"teal":4865,"source":1140,"pc":[4774,4775,4776]},{"teal":4866,"source":1140,"pc":[4777]},{"teal":4867,"source":1140,"pc":[4778,4779,4780]},{"teal":4872,"source":1141,"pc":[4781]},{"teal":4873,"source":1141,"pc":[4782,4783]},{"teal":4874,"source":1141,"pc":[4784,4785]},{"teal":4875,"source":1141,"pc":[4786]},{"teal":4876,"source":1141,"pc":[4787,4788]},{"teal":4877,"source":1141,"pc":[4789,4790]},{"teal":4878,"source":1141,"pc":[4791]},{"teal":4879,"source":1141,"pc":[4792,4793]},{"teal":4880,"source":1141,"pc":[4794,4795]},{"teal":4881,"source":1141,"pc":[4796,4797]},{"teal":4882,"source":1141,"pc":[4798,4799]},{"teal":4883,"source":1141,"pc":[4800]},{"teal":4888,"source":1145,"pc":[4801,4802]},{"teal":4889,"source":1145,"pc":[4803,4804]},{"teal":4890,"source":1145,"pc":[4805]},{"teal":4893,"source":1145,"errorMessage":"global state value does not exist: AppID.fromUint64(poolAppId).globalState('numStakers')","pc":[4806]},{"teal":4894,"source":1145,"pc":[4807,4808]},{"teal":4898,"source":1146,"pc":[4809,4810]},{"teal":4899,"source":1146,"pc":[4811,4812]},{"teal":4900,"source":1146,"pc":[4813]},{"teal":4903,"source":1146,"errorMessage":"global state value does not exist: AppID.fromUint64(poolAppId).globalState('staked')","pc":[4814]},{"teal":4904,"source":1146,"pc":[4815,4816]},{"teal":4908,"source":1147,"pc":[4817,4818]},{"teal":4909,"source":1147,"pc":[4819,4820]},{"teal":4910,"source":1147,"pc":[4821,4822,4823]},{"teal":4911,"source":1147,"pc":[4824]},{"teal":4912,"source":1147,"pc":[4825]},{"teal":4913,"source":1147,"pc":[4826]},{"teal":4914,"source":1147,"pc":[4827,4828]},{"teal":4915,"source":1147,"pc":[4829]},{"teal":4916,"source":1147,"pc":[4830]},{"teal":4917,"source":1147,"pc":[4831]},{"teal":4918,"source":1147,"pc":[4832]},{"teal":4919,"source":1147,"pc":[4833,4834]},{"teal":4920,"source":1147,"pc":[4835]},{"teal":4921,"source":1147,"pc":[4836,4837,4838]},{"teal":4922,"source":1147,"pc":[4839]},{"teal":4923,"source":1147,"pc":[4840,4841]},{"teal":4924,"source":1147,"pc":[4842,4843,4844]},{"teal":4925,"source":1147,"pc":[4845]},{"teal":4926,"source":1147,"pc":[4846]},{"teal":4927,"source":1147,"pc":[4847]},{"teal":4928,"source":1147,"pc":[4848,4849]},{"teal":4929,"source":1147,"pc":[4850]},{"teal":4933,"source":1148,"pc":[4851,4852]},{"teal":4934,"source":1148,"pc":[4853,4854]},{"teal":4935,"source":1148,"pc":[4855,4856,4857]},{"teal":4936,"source":1148,"pc":[4858]},{"teal":4937,"source":1148,"pc":[4859]},{"teal":4938,"source":1148,"pc":[4860]},{"teal":4939,"source":1148,"pc":[4861,4862]},{"teal":4940,"source":1148,"pc":[4863]},{"teal":4941,"source":1148,"pc":[4864]},{"teal":4942,"source":1148,"pc":[4865,4866]},{"teal":4943,"source":1148,"pc":[4867]},{"teal":4944,"source":1148,"pc":[4868,4869]},{"teal":4945,"source":1148,"pc":[4870]},{"teal":4946,"source":1148,"pc":[4871]},{"teal":4947,"source":1148,"pc":[4872,4873]},{"teal":4948,"source":1148,"pc":[4874,4875,4876]},{"teal":4949,"source":1148,"pc":[4877]},{"teal":4950,"source":1148,"pc":[4878]},{"teal":4951,"source":1148,"pc":[4879]},{"teal":4952,"source":1148,"pc":[4880,4881]},{"teal":4953,"source":1148,"pc":[4882]},{"teal":4958,"source":1151,"pc":[4883,4884]},{"teal":4959,"source":1151,"pc":[4885,4886,4887]},{"teal":4964,"source":1152,"pc":[4888,4889]},{"teal":4965,"source":1152,"pc":[4890]},{"teal":4966,"source":1152,"pc":[4891]},{"teal":4967,"source":1152,"pc":[4892]},{"teal":4968,"source":1152,"pc":[4893,4894]},{"teal":4969,"source":1152,"pc":[4895,4896,4897]},{"teal":4970,"source":1152,"pc":[4898]},{"teal":4971,"source":1152,"pc":[4899]},{"teal":4972,"source":1152,"pc":[4900]},{"teal":4973,"source":1152,"pc":[4901,4902]},{"teal":4974,"source":1152,"pc":[4903]},{"teal":4975,"source":1152,"pc":[4904]},{"teal":4976,"source":1152,"pc":[4905]},{"teal":4977,"source":1152,"pc":[4906]},{"teal":4978,"source":1152,"pc":[4907]},{"teal":4979,"source":1152,"pc":[4908]},{"teal":4980,"source":1152,"pc":[4909,4910]},{"teal":4981,"source":1152,"pc":[4911,4912,4913]},{"teal":4982,"source":1152,"pc":[4914]},{"teal":4983,"source":1152,"pc":[4915]},{"teal":4984,"source":1152,"pc":[4916]},{"teal":4985,"source":1152,"pc":[4917,4918]},{"teal":4986,"source":1152,"pc":[4919]},{"teal":4992,"source":1154,"pc":[4920,4921]},{"teal":4993,"source":1154,"pc":[4922,4923,4924]},{"teal":4998,"source":1155,"pc":[4925,4926]},{"teal":4999,"source":1155,"pc":[4927]},{"teal":5000,"source":1155,"pc":[4928]},{"teal":5001,"source":1155,"pc":[4929]},{"teal":5002,"source":1155,"pc":[4930,4931]},{"teal":5003,"source":1155,"pc":[4932]},{"teal":5004,"source":1155,"pc":[4933]},{"teal":5009,"source":1157,"pc":[4934,4935]},{"teal":5010,"source":1157,"pc":[4936]},{"teal":5011,"source":1157,"pc":[4937]},{"teal":5012,"source":1157,"pc":[4938]},{"teal":5013,"source":1157,"pc":[4939,4940]},{"teal":5014,"source":1157,"pc":[4941,4942,4943]},{"teal":5015,"source":1157,"pc":[4944]},{"teal":5016,"source":1157,"pc":[4945]},{"teal":5017,"source":1157,"pc":[4946]},{"teal":5018,"source":1157,"pc":[4947,4948]},{"teal":5019,"source":1157,"pc":[4949]},{"teal":5020,"source":1157,"pc":[4950]},{"teal":5021,"source":1157,"pc":[4951,4952]},{"teal":5022,"source":1157,"pc":[4953,4954]},{"teal":5023,"source":1157,"pc":[4955,4956]},{"teal":5024,"source":1157,"pc":[4957]},{"teal":5025,"source":1157,"pc":[4958]},{"teal":5026,"source":1157,"pc":[4959]},{"teal":5027,"source":1157,"pc":[4960]},{"teal":5028,"source":1157,"pc":[4961,4962]},{"teal":5029,"source":1157,"pc":[4963,4964,4965]},{"teal":5030,"source":1157,"pc":[4966]},{"teal":5031,"source":1157,"pc":[4967]},{"teal":5032,"source":1157,"pc":[4968]},{"teal":5033,"source":1157,"pc":[4969,4970]},{"teal":5034,"source":1157,"pc":[4971]},{"teal":5038,"source":1158,"pc":[4972,4973]},{"teal":5039,"source":1158,"pc":[4974]},{"teal":5040,"source":1158,"pc":[4975,4976]},{"teal":5041,"source":1158,"pc":[4977,4978]},{"teal":5042,"source":1158,"pc":[4979,4980]},{"teal":5043,"source":1158,"pc":[4981]},{"teal":5044,"source":1158,"pc":[4982]},{"teal":5045,"source":1158,"pc":[4983,4984]},{"teal":5046,"source":1158,"pc":[4985]},{"teal":5047,"source":1158,"pc":[4986]},{"teal":5048,"source":1119,"pc":[4987]},{"teal":5052,"source":1161,"pc":[4988,4989,4990]},{"teal":5055,"source":1161,"pc":[4991]},{"teal":5056,"source":1161,"pc":[4992,4993]},{"teal":5060,"source":1162,"pc":[4994]},{"teal":5061,"source":1162,"pc":[4995,4996]},{"teal":5062,"source":1162,"pc":[4997]},{"teal":5063,"source":1162,"pc":[4998]},{"teal":5064,"source":1162,"pc":[4999]},{"teal":5065,"source":1162,"pc":[5000]},{"teal":5066,"source":1162,"pc":[5001]},{"teal":5070,"source":1164,"pc":[5002]},{"teal":5071,"source":1164,"pc":[5003,5004]},{"teal":5072,"source":1164,"pc":[5005]},{"teal":5073,"source":1164,"pc":[5006]},{"teal":5076,"source":1164,"errorMessage":"box value does not exist: this.stakerPoolSet(staker).value","pc":[5007]},{"teal":5077,"source":1164,"pc":[5008,5009]},{"teal":5081,"source":1165,"pc":[5010]},{"teal":5082,"source":1165,"pc":[5011,5012]},{"teal":5086,"source":1166,"pc":[5013]},{"teal":5087,"source":1166,"pc":[5014,5015]},{"teal":5092,"source":1166,"pc":[5016,5017]},{"teal":5093,"source":1166,"pc":[5018,5019]},{"teal":5094,"source":1166,"pc":[5020]},{"teal":5095,"source":1166,"pc":[5021,5022,5023]},{"teal":5100,"source":1167,"pc":[5024,5025]},{"teal":5101,"source":1167,"pc":[5026,5027]},{"teal":5102,"source":1167,"pc":[5028]},{"teal":5103,"source":1167,"pc":[5029]},{"teal":5104,"source":1167,"pc":[5030]},{"teal":5105,"source":1167,"pc":[5031]},{"teal":5106,"source":1167,"pc":[5032,5033]},{"teal":5107,"source":1167,"pc":[5034]},{"teal":5108,"source":1167,"pc":[5035,5036,5037]},{"teal":5113,"source":1169,"pc":[5038]},{"teal":5119,"source":1171,"pc":[5039,5040]},{"teal":5120,"source":1171,"pc":[5041]},{"teal":5121,"source":1171,"pc":[5042]},{"teal":5122,"source":1171,"pc":[5043]},{"teal":5123,"source":1171,"pc":[5044,5045,5046]},{"teal":5124,"source":1171,"pc":[5047,5048]},{"teal":5125,"source":1171,"pc":[5049,5050]},{"teal":5126,"source":1171,"pc":[5051]},{"teal":5127,"source":1171,"pc":[5052]},{"teal":5128,"source":1171,"pc":[5053]},{"teal":5129,"source":1171,"pc":[5054]},{"teal":5130,"source":1171,"pc":[5055]},{"teal":5131,"source":1171,"pc":[5056]},{"teal":5132,"source":1171,"pc":[5057]},{"teal":5133,"source":1171,"pc":[5058]},{"teal":5134,"source":1171,"pc":[5059]},{"teal":5135,"source":1171,"pc":[5060]},{"teal":5138,"source":1171,"pc":[5061,5062,5063]},{"teal":5143,"source":1172,"pc":[5064,5065]},{"teal":5144,"source":1172,"pc":[5066]},{"teal":5145,"source":1172,"pc":[5067]},{"teal":5146,"source":1172,"pc":[5068,5069]},{"teal":5153,"source":1166,"pc":[5070,5071]},{"teal":5154,"source":1166,"pc":[5072]},{"teal":5155,"source":1166,"pc":[5073]},{"teal":5156,"source":1166,"pc":[5074,5075]},{"teal":5157,"source":1166,"pc":[5076,5077,5078]},{"teal":5163,"source":1175,"pc":[5079,5080]},{"teal":5164,"source":1175,"pc":[5081]},{"teal":5165,"source":1175,"pc":[5082]},{"teal":5166,"source":1175,"pc":[5083,5084,5085]},{"teal":5170,"source":1176,"errorMessage":"No empty slot available in the staker pool set","pc":[5086]},{"teal":5175,"source":1178,"pc":[5087,5088]},{"teal":5176,"source":1178,"pc":[5089]},{"teal":5177,"source":1178,"pc":[5090]},{"teal":5178,"source":1178,"pc":[5091]},{"teal":5179,"source":1178,"pc":[5092]},{"teal":5180,"source":1178,"pc":[5093,5094]},{"teal":5181,"source":1178,"pc":[5095]},{"teal":5182,"source":1178,"pc":[5096,5097]},{"teal":5183,"source":1178,"pc":[5098]},{"teal":5184,"source":1178,"pc":[5099,5100]},{"teal":5185,"source":1178,"pc":[5101]},{"teal":5186,"source":1161,"pc":[5102]},{"teal":5197,"source":1189,"pc":[5103,5104,5105]},{"teal":5200,"source":1189,"pc":[5106]},{"teal":5201,"source":1189,"pc":[5107,5108]},{"teal":5205,"source":1191,"pc":[5109]},{"teal":5206,"source":1191,"pc":[5110,5111]},{"teal":5210,"source":1192,"pc":[5112]},{"teal":5211,"source":1192,"pc":[5113,5114]},{"teal":5215,"source":1193,"pc":[5115]},{"teal":5216,"source":1193,"pc":[5116,5117]},{"teal":5220,"source":1195,"pc":[5118]},{"teal":5221,"source":1195,"pc":[5119,5120]},{"teal":5222,"source":1195,"pc":[5121]},{"teal":5223,"source":1195,"pc":[5122]},{"teal":5226,"source":1195,"errorMessage":"box value does not exist: this.stakerPoolSet(staker).value","pc":[5123]},{"teal":5227,"source":1195,"pc":[5124,5125]},{"teal":5231,"source":1196,"pc":[5126]},{"teal":5232,"source":1196,"pc":[5127,5128]},{"teal":5237,"source":1196,"pc":[5129,5130]},{"teal":5238,"source":1196,"pc":[5131,5132]},{"teal":5239,"source":1196,"pc":[5133]},{"teal":5240,"source":1196,"pc":[5134,5135,5136]},{"teal":5245,"source":1197,"pc":[5137,5138]},{"teal":5246,"source":1197,"pc":[5139,5140]},{"teal":5247,"source":1197,"pc":[5141]},{"teal":5248,"source":1197,"pc":[5142]},{"teal":5249,"source":1197,"pc":[5143]},{"teal":5250,"source":1197,"pc":[5144]},{"teal":5251,"source":1197,"pc":[5145]},{"teal":5252,"source":1197,"pc":[5146]},{"teal":5253,"source":1197,"pc":[5147]},{"teal":5254,"source":1197,"pc":[5148]},{"teal":5255,"source":1197,"pc":[5149]},{"teal":5256,"source":1197,"pc":[5150,5151,5152]},{"teal":5259,"source":1198,"pc":[5153,5154,5155]},{"teal":5264,"source":1200,"pc":[5156,5157]},{"teal":5265,"source":1200,"pc":[5158]},{"teal":5266,"source":1200,"pc":[5159]},{"teal":5267,"source":1200,"pc":[5160,5161]},{"teal":5272,"source":1201,"pc":[5162,5163]},{"teal":5273,"source":1201,"pc":[5164,5165]},{"teal":5274,"source":1201,"pc":[5166]},{"teal":5275,"source":1201,"pc":[5167]},{"teal":5276,"source":1201,"pc":[5168]},{"teal":5277,"source":1201,"pc":[5169]},{"teal":5278,"source":1201,"pc":[5170]},{"teal":5279,"source":1201,"pc":[5171]},{"teal":5280,"source":1201,"pc":[5172]},{"teal":5281,"source":1201,"pc":[5173,5174]},{"teal":5282,"source":1201,"pc":[5175,5176,5177]},{"teal":5283,"source":1201,"pc":[5178]},{"teal":5284,"source":1201,"pc":[5179]},{"teal":5285,"source":1201,"pc":[5180,5181,5182]},{"teal":5291,"source":1202,"pc":[5183,5184]},{"teal":5292,"source":1202,"pc":[5185,5186]},{"teal":5293,"source":1202,"pc":[5187]},{"teal":5294,"source":1202,"pc":[5188]},{"teal":5295,"source":1202,"pc":[5189]},{"teal":5296,"source":1202,"pc":[5190]},{"teal":5297,"source":1202,"pc":[5191,5192]},{"teal":5298,"source":1202,"pc":[5193]},{"teal":5299,"source":1202,"pc":[5194,5195,5196]},{"teal":5304,"source":1203,"pc":[5197]},{"teal":5305,"source":1203,"pc":[5198,5199]},{"teal":5309,"source":1205,"pc":[5200,5201]},{"teal":5310,"source":1205,"pc":[5202]},{"teal":5311,"source":1205,"pc":[5203]},{"teal":5312,"source":1205,"pc":[5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229]},{"teal":5313,"source":1205,"pc":[5230]},{"teal":5314,"source":1205,"pc":[5231,5232]},{"teal":5315,"source":1205,"pc":[5233]},{"teal":5316,"source":1205,"pc":[5234,5235]},{"teal":5317,"source":1205,"pc":[5236]},{"teal":5318,"source":1202,"pc":[5237,5238,5239]},{"teal":5323,"source":1207,"pc":[5240,5241]},{"teal":5324,"source":1207,"pc":[5242]},{"teal":5325,"source":1207,"pc":[5243]},{"teal":5326,"source":1207,"pc":[5244,5245]},{"teal":5335,"source":1196,"pc":[5246,5247]},{"teal":5336,"source":1196,"pc":[5248]},{"teal":5337,"source":1196,"pc":[5249]},{"teal":5338,"source":1196,"pc":[5250,5251]},{"teal":5339,"source":1196,"pc":[5252,5253,5254]},{"teal":5345,"source":1211,"pc":[5255,5256]},{"teal":5346,"source":1211,"pc":[5257]},{"teal":5347,"source":1211,"pc":[5258,5259,5260]},{"teal":5351,"source":1212,"errorMessage":"No matching slot found when told to remove a pool from the stakers set","pc":[5261]},{"teal":5356,"source":1215,"pc":[5262,5263]},{"teal":5357,"source":1215,"pc":[5264]},{"teal":5358,"source":1215,"pc":[5265,5266]},{"teal":5359,"source":1215,"pc":[5267]},{"teal":5360,"source":1215,"pc":[5268]},{"teal":5361,"source":1215,"pc":[5269]},{"teal":5362,"source":1215,"pc":[5270]},{"teal":5363,"source":1215,"pc":[5271,5272]},{"teal":5364,"source":1215,"pc":[5273]},{"teal":5365,"source":1215,"pc":[5274]},{"teal":5366,"source":1215,"pc":[5275]},{"teal":5369,"source":1189,"pc":[5276,5277]},{"teal":5372,"source":1189,"pc":[5278,5279]},{"teal":5373,"source":1189,"pc":[5280]},{"teal":5377,"source":1218,"pc":[5281,5282,5283]},{"teal":5380,"source":1218,"pc":[5284]},{"teal":5381,"source":1218,"pc":[5285,5286]},{"teal":5385,"source":1219,"pc":[5287,5288]},{"teal":5386,"source":1219,"pc":[5289,5290]},{"teal":5387,"source":1219,"pc":[5291]},{"teal":5388,"source":1219,"pc":[5292,5293]},{"teal":5389,"source":1219,"pc":[5294]},{"teal":5390,"source":1219,"pc":[5295]},{"teal":5391,"source":1219,"pc":[5296,5297]},{"teal":5392,"source":1219,"pc":[5298]},{"teal":5393,"source":1219,"pc":[5299,5300]},{"teal":5397,"source":1220,"pc":[5301,5302,5303]},{"teal":5398,"source":1220,"pc":[5304]},{"teal":5399,"source":1220,"pc":[5305]},{"teal":5400,"source":1220,"pc":[5306,5307]},{"teal":5401,"source":1220,"pc":[5308]},{"teal":5402,"source":1220,"pc":[5309]},{"teal":5403,"source":1220,"pc":[5310,5311]},{"teal":5404,"source":1220,"pc":[5312]},{"teal":5405,"source":1220,"pc":[5313]},{"teal":5406,"source":1220,"pc":[5314,5315]},{"teal":5410,"source":1222,"pc":[5316,5317]},{"teal":5411,"source":1222,"pc":[5318]},{"teal":5412,"source":1222,"pc":[5319]},{"teal":5413,"source":1222,"pc":[5320]},{"teal":5414,"source":1222,"pc":[5321,5322,5323]},{"teal":5415,"source":1222,"pc":[5324,5325]},{"teal":5416,"source":1222,"pc":[5326]},{"teal":5417,"source":1222,"pc":[5327]},{"teal":5418,"source":1222,"pc":[5328]},{"teal":5422,"source":1222,"errorMessage":"node number not in valid range","pc":[5329]},{"teal":5426,"source":1224,"pc":[5330]},{"teal":5427,"source":1224,"pc":[5331,5332]},{"teal":5432,"source":1224,"pc":[5333,5334]},{"teal":5433,"source":1224,"pc":[5335,5336]},{"teal":5434,"source":1224,"pc":[5337]},{"teal":5435,"source":1224,"pc":[5338,5339,5340]},{"teal":5440,"source":1225,"pc":[5341,5342]},{"teal":5441,"source":1225,"pc":[5343]},{"teal":5442,"source":1225,"pc":[5344,5345]},{"teal":5443,"source":1225,"pc":[5346]},{"teal":5444,"source":1225,"pc":[5347]},{"teal":5445,"source":1225,"pc":[5348]},{"teal":5446,"source":1225,"pc":[5349]},{"teal":5447,"source":1225,"pc":[5350]},{"teal":5448,"source":1225,"pc":[5351]},{"teal":5449,"source":1225,"pc":[5352]},{"teal":5450,"source":1225,"pc":[5353,5354]},{"teal":5451,"source":1225,"pc":[5355]},{"teal":5452,"source":1225,"pc":[5356]},{"teal":5453,"source":1225,"pc":[5357]},{"teal":5454,"source":1225,"pc":[5358]},{"teal":5455,"source":1225,"pc":[5359]},{"teal":5456,"source":1225,"pc":[5360]},{"teal":5457,"source":1225,"pc":[5361]},{"teal":5458,"source":1225,"pc":[5362]},{"teal":5459,"source":1225,"pc":[5363,5364,5365]},{"teal":5464,"source":1227,"pc":[5366,5367]},{"teal":5465,"source":1227,"pc":[5368,5369]},{"teal":5466,"source":1227,"pc":[5370]},{"teal":5467,"source":1227,"pc":[5371]},{"teal":5468,"source":1227,"pc":[5372]},{"teal":5469,"source":1227,"pc":[5373]},{"teal":5470,"source":1227,"pc":[5374]},{"teal":5471,"source":1227,"pc":[5375]},{"teal":5472,"source":1227,"pc":[5376]},{"teal":5473,"source":1227,"pc":[5377,5378]},{"teal":5474,"source":1227,"pc":[5379]},{"teal":5475,"source":1227,"pc":[5380]},{"teal":5476,"source":1227,"pc":[5381]},{"teal":5477,"source":1227,"pc":[5382,5383]},{"teal":5478,"source":1227,"pc":[5384]},{"teal":5479,"source":1227,"pc":[5385]},{"teal":5480,"source":1227,"pc":[5386,5387]},{"teal":5481,"source":1227,"pc":[5388]},{"teal":5482,"source":1227,"pc":[5389]},{"teal":5483,"source":1227,"pc":[5390,5391]},{"teal":5484,"source":1227,"pc":[5392]},{"teal":5488,"source":1228,"pc":[5393]},{"teal":5495,"source":1224,"pc":[5394,5395]},{"teal":5496,"source":1224,"pc":[5396]},{"teal":5497,"source":1224,"pc":[5397]},{"teal":5498,"source":1224,"pc":[5398,5399]},{"teal":5499,"source":1224,"pc":[5400,5401,5402]},{"teal":5503,"source":1231,"errorMessage":"no available space in specified node for this pool","pc":[5403]},{"teal":5504,"source":1218,"pc":[5404]},{"teal":5514,"source":1241,"pc":[5405,5406,5407]},{"teal":5517,"source":1241,"pc":[5408]},{"teal":5518,"source":1241,"pc":[5409,5410]},{"teal":5522,"source":1242,"pc":[5411,5412]},{"teal":5523,"source":1242,"pc":[5413]},{"teal":5524,"source":1242,"pc":[5414]},{"teal":5525,"source":1242,"pc":[5415,5416]},{"teal":5526,"source":1242,"pc":[5417]},{"teal":5527,"source":1242,"pc":[5418]},{"teal":5528,"source":1242,"pc":[5419,5420]},{"teal":5529,"source":1242,"pc":[5421]},{"teal":5530,"source":1242,"pc":[5422]},{"teal":5531,"source":1242,"pc":[5423,5424]},{"teal":5536,"source":1243,"pc":[5425,5426]},{"teal":5537,"source":1243,"pc":[5427]},{"teal":5538,"source":1243,"pc":[5428]},{"teal":5539,"source":1243,"pc":[5429,5430,5431]},{"teal":5544,"source":1244,"pc":[5432]},{"teal":5549,"source":1246,"pc":[5433,5434]},{"teal":5550,"source":1246,"pc":[5435,5436]},{"teal":5554,"source":1247,"pc":[5437]},{"teal":5555,"source":1247,"pc":[5438,5439]},{"teal":5556,"source":1247,"pc":[5440]},{"teal":5557,"source":1247,"pc":[5441,5442]},{"teal":5558,"source":1247,"pc":[5443]},{"teal":5559,"source":1247,"pc":[5444]},{"teal":5560,"source":1247,"pc":[5445,5446]},{"teal":5561,"source":1247,"pc":[5447]},{"teal":5562,"source":1247,"pc":[5448,5449]},{"teal":5569,"source":1251,"pc":[5450,5451]},{"teal":5570,"source":1251,"pc":[5452]},{"teal":5571,"source":1251,"pc":[5453]},{"teal":5572,"source":1251,"pc":[5454]},{"teal":5573,"source":1251,"pc":[5455,5456,5457]},{"teal":5574,"source":1252,"pc":[5458,5459]},{"teal":5575,"source":1252,"pc":[5460,5461]},{"teal":5576,"source":1252,"pc":[5462]},{"teal":5577,"source":1251,"pc":[5463]},{"teal":5580,"source":1252,"pc":[5464]},{"teal":5581,"source":1252,"pc":[5465,5466,5467]},{"teal":5582,"source":1253,"pc":[5468,5469]},{"teal":5583,"source":1253,"pc":[5470,5471]},{"teal":5584,"source":1253,"pc":[5472]},{"teal":5585,"source":1252,"pc":[5473]},{"teal":5588,"source":1250,"pc":[5474,5475,5476]},{"teal":5593,"source":1255,"pc":[5477,5478]},{"teal":5594,"source":1255,"pc":[5479]},{"teal":5595,"source":1255,"pc":[5480]},{"teal":5596,"source":1255,"pc":[5481]},{"teal":5600,"source":1256,"pc":[5482,5483]},{"teal":5601,"source":1256,"pc":[5484]},{"teal":5602,"source":1256,"pc":[5485]},{"teal":5603,"source":1256,"pc":[5486,5487]},{"teal":5604,"source":1256,"pc":[5488]},{"teal":5605,"source":1256,"pc":[5489]},{"teal":5606,"source":1256,"pc":[5490,5491]},{"teal":5607,"source":1256,"pc":[5492]},{"teal":5608,"source":1256,"pc":[5493]},{"teal":5609,"source":1256,"pc":[5494,5495]},{"teal":5614,"source":1257,"pc":[5496,5497]},{"teal":5615,"source":1257,"pc":[5498]},{"teal":5616,"source":1257,"pc":[5499]},{"teal":5617,"source":1257,"pc":[5500,5501,5502]},{"teal":5622,"source":1258,"pc":[5503]},{"teal":5623,"source":1258,"pc":[5504,5505]},{"teal":5631,"source":1261,"pc":[5506,5507]},{"teal":5632,"source":1261,"pc":[5508,5509]},{"teal":5633,"source":1261,"pc":[5510,5511]},{"teal":5634,"source":1261,"pc":[5512]},{"teal":5635,"source":1261,"pc":[5513,5514]},{"teal":5636,"source":1261,"pc":[5515]},{"teal":5639,"source":1260,"errorMessage":"must have required minimum balance of validator defined token to add stake","pc":[5516]},{"teal":5645,"source":1265,"pc":[5517,5518]},{"teal":5646,"source":1265,"pc":[5519]},{"teal":5647,"source":1265,"pc":[5520]},{"teal":5648,"source":1265,"pc":[5521,5522,5523]},{"teal":5656,"source":1267,"pc":[5524,5525]},{"teal":5657,"source":1267,"pc":[5526,5527]},{"teal":5658,"source":1267,"pc":[5528]},{"teal":5659,"source":1267,"pc":[5529,5530]},{"teal":5660,"source":1267,"pc":[5531,5532,5533]},{"teal":5661,"source":1267,"pc":[5534]},{"teal":5664,"source":1266,"errorMessage":"specified asset must be created by creator that the validator defined as a requirement to stake","pc":[5535]},{"teal":5670,"source":1271,"pc":[5536,5537]},{"teal":5671,"source":1271,"pc":[5538,5539]},{"teal":5672,"source":1271,"pc":[5540]},{"teal":5673,"source":1271,"pc":[5541,5542,5543]},{"teal":5678,"source":1272,"pc":[5544]},{"teal":5679,"source":1272,"pc":[5545,5546]},{"teal":5683,"source":1273,"pc":[5547,5548]},{"teal":5684,"source":1273,"pc":[5549,5550,5551]},{"teal":5685,"source":1273,"pc":[5552]},{"teal":5686,"source":1273,"pc":[5553,5554]},{"teal":5687,"source":1273,"pc":[5555,5556,5557]},{"teal":5688,"source":1273,"pc":[5558]},{"teal":5689,"source":1273,"pc":[5559,5560]},{"teal":5690,"source":1273,"pc":[5561]},{"teal":5691,"source":1273,"pc":[5562,5563]},{"teal":5697,"source":1274,"pc":[5564,5565]},{"teal":5698,"source":1274,"pc":[5566,5567]},{"teal":5699,"source":1274,"pc":[5568]},{"teal":5700,"source":1274,"pc":[5569,5570,5571]},{"teal":5705,"source":1275,"pc":[5572]},{"teal":5706,"source":1275,"pc":[5573,5574]},{"teal":5707,"source":1276,"pc":[5575,5576,5577]},{"teal":5713,"source":1273,"pc":[5578,5579]},{"teal":5714,"source":1273,"pc":[5580]},{"teal":5715,"source":1273,"pc":[5581]},{"teal":5716,"source":1273,"pc":[5582]},{"teal":5717,"source":1273,"pc":[5583,5584]},{"teal":5718,"source":1273,"pc":[5585]},{"teal":5719,"source":1273,"pc":[5586,5587,5588]},{"teal":5720,"source":1273,"pc":[5589,5590]},{"teal":5721,"source":1273,"pc":[5591,5592]},{"teal":5722,"source":1273,"pc":[5593,5594]},{"teal":5723,"source":1273,"pc":[5595]},{"teal":5724,"source":1273,"pc":[5596]},{"teal":5725,"source":1273,"pc":[5597]},{"teal":5726,"source":1273,"pc":[5598,5599]},{"teal":5727,"source":1273,"pc":[5600,5601,5602]},{"teal":5732,"source":1279,"pc":[5603,5604]},{"teal":5735,"source":1279,"errorMessage":"specified asset must be identical to the asset id defined as a requirement to stake","pc":[5605]},{"teal":5741,"source":1281,"pc":[5606,5607]},{"teal":5742,"source":1281,"pc":[5608,5609]},{"teal":5743,"source":1281,"pc":[5610]},{"teal":5744,"source":1281,"pc":[5611,5612,5613]},{"teal":5752,"source":1285,"pc":[5614,5615]},{"teal":5753,"source":1285,"pc":[5616,5617]},{"teal":5754,"source":1285,"pc":[5618]},{"teal":5755,"source":1285,"pc":[5619,5620]},{"teal":5756,"source":1285,"pc":[5621,5622,5623]},{"teal":5757,"source":1285,"pc":[5624]},{"teal":5758,"source":1285,"pc":[5625,5626,5627]},{"teal":5761,"source":1284,"errorMessage":"specified asset must be created by creator that is one of the linked addresses in an nfd","pc":[5628]},{"teal":5767,"source":1289,"pc":[5629,5630]},{"teal":5768,"source":1289,"pc":[5631,5632]},{"teal":5769,"source":1289,"pc":[5633]},{"teal":5770,"source":1289,"pc":[5634,5635,5636]},{"teal":5775,"source":1291,"pc":[5637,5638]},{"teal":5776,"source":1291,"pc":[5639,5640]},{"teal":5780,"source":1292,"pc":[5641,5642]},{"teal":5781,"source":1292,"pc":[5643,5644,5645]},{"teal":5784,"source":1292,"errorMessage":"provided NFD must be valid","pc":[5646]},{"teal":5792,"source":1296,"pc":[5647,5648]},{"teal":5793,"source":1296,"pc":[5649,5650]},{"teal":5794,"source":1296,"pc":[5651]},{"teal":5797,"source":1296,"errorMessage":"global state value does not exist: AppID.fromUint64(userOfferedNFDAppID).globalState('i.owner.a')","pc":[5652]},{"teal":5798,"source":1297,"pc":[5653,5654]},{"teal":5799,"source":1296,"pc":[5655]},{"teal":5800,"source":1297,"pc":[5656]},{"teal":5801,"source":1297,"pc":[5657,5658,5659]},{"teal":5802,"source":1297,"pc":[5660,5661]},{"teal":5803,"source":1297,"pc":[5662,5663]},{"teal":5804,"source":1297,"pc":[5664,5665,5666]},{"teal":5805,"source":1297,"pc":[5667]},{"teal":5809,"source":1295,"errorMessage":"provided nfd for entry isn't owned or linked to the staker","pc":[5668]},{"teal":5817,"source":1303,"pc":[5669,5670]},{"teal":5818,"source":1303,"pc":[5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685]},{"teal":5819,"source":1303,"pc":[5686]},{"teal":5822,"source":1303,"errorMessage":"global state value does not exist: AppID.fromUint64(userOfferedNFDAppID).globalState('i.parentAppID')","pc":[5687]},{"teal":5823,"source":1303,"pc":[5688]},{"teal":5824,"source":1304,"pc":[5689,5690]},{"teal":5825,"source":1304,"pc":[5691,5692,5693]},{"teal":5826,"source":1304,"pc":[5694]},{"teal":5827,"source":1303,"pc":[5695]},{"teal":5830,"source":1302,"errorMessage":"specified nfd must be a segment of the nfd the validator specified as a requirement","pc":[5696]},{"teal":5833,"source":1241,"pc":[5697]},{"teal":5845,"source":1319,"pc":[5698,5699,5700]},{"teal":5848,"source":1319,"pc":[5701]},{"teal":5852,"source":1321,"pc":[5702,5703]},{"teal":5853,"source":1321,"pc":[5704,5705,5706,5707,5708,5709,5710,5711]},{"teal":5854,"source":1321,"pc":[5712]},{"teal":5857,"source":1321,"errorMessage":"global state value does not exist: AppID.fromUint64(nfdAppID).globalState('i.name')","pc":[5713]},{"teal":5858,"source":1321,"pc":[5714,5715]},{"teal":5866,"source":1323,"pc":[5716]},{"teal":5867,"source":1323,"pc":[5717,5718]},{"teal":5868,"source":1323,"pc":[5719,5720]},{"teal":5869,"source":1325,"pc":[5721,5722,5723,5724,5725,5726]},{"teal":5870,"source":1325,"pc":[5727,5728]},{"teal":5874,"source":1324,"pc":[5729,5730]},{"teal":5875,"source":1324,"pc":[5731,5732]},{"teal":5879,"source":1326,"pc":[5733,5734]},{"teal":5880,"source":1326,"pc":[5735]},{"teal":5881,"source":1326,"pc":[5736]},{"teal":5882,"source":1326,"pc":[5737]},{"teal":5883,"source":1326,"pc":[5738,5739,5740]},{"teal":5884,"source":1326,"pc":[5741]},{"teal":5885,"source":1326,"pc":[5742]},{"teal":5886,"source":1326,"pc":[5743,5744]},{"teal":5887,"source":1326,"pc":[5745,5746]},{"teal":5888,"source":1326,"pc":[5747]},{"teal":5889,"source":1326,"pc":[5748,5749]},{"teal":5892,"source":1323,"pc":[5750]},{"teal":5893,"source":1323,"pc":[5751,5752]},{"teal":5896,"source":1323,"pc":[5753]},{"teal":5897,"source":1323,"pc":[5754,5755]},{"teal":5898,"source":1323,"pc":[5756]},{"teal":5899,"source":1323,"pc":[5757]},{"teal":5900,"source":1323,"pc":[5758,5759]},{"teal":5901,"source":1323,"pc":[5760,5761,5762]},{"teal":5902,"source":1323,"pc":[5763]},{"teal":5903,"source":1323,"pc":[5764]},{"teal":5906,"source":1319,"pc":[5765,5766]},{"teal":5907,"source":1319,"pc":[5767]},{"teal":5918,"source":1338,"pc":[5768,5769,5770]},{"teal":5921,"source":1338,"pc":[5771]},{"teal":5922,"source":1338,"pc":[5772,5773]},{"teal":5929,"source":1339,"pc":[5774]},{"teal":5930,"source":1339,"pc":[5775,5776]},{"teal":5931,"source":1339,"pc":[5777,5778]},{"teal":5935,"source":1340,"pc":[5779,5780]},{"teal":5936,"source":1340,"pc":[5781,5782]},{"teal":5940,"source":1341,"pc":[5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797]},{"teal":5941,"source":1341,"pc":[5798,5799]},{"teal":5942,"source":1341,"pc":[5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814]},{"teal":5943,"source":1341,"pc":[5815,5816]},{"teal":5946,"source":1339,"pc":[5817]},{"teal":5947,"source":1339,"pc":[5818,5819]},{"teal":5950,"source":1339,"pc":[5820]},{"teal":5954,"source":1343,"pc":[5821,5822]},{"teal":5955,"source":1343,"pc":[5823,5824]},{"teal":5959,"source":1344,"pc":[5825]},{"teal":5960,"source":1344,"pc":[5826,5827]},{"teal":5965,"source":1344,"pc":[5828,5829]},{"teal":5966,"source":1344,"pc":[5830,5831]},{"teal":5967,"source":1344,"pc":[5832]},{"teal":5968,"source":1344,"pc":[5833]},{"teal":5969,"source":1344,"pc":[5834,5835,5836]},{"teal":5973,"source":1345,"pc":[5837,5838]},{"teal":5974,"source":1345,"pc":[5839,5840]},{"teal":5975,"source":1345,"pc":[5841,5842]},{"teal":5976,"source":1345,"pc":[5843]},{"teal":5977,"source":1345,"pc":[5844,5845]},{"teal":5982,"source":1346,"pc":[5846,5847]},{"teal":5983,"source":1346,"pc":[5848,5849]},{"teal":5984,"source":1346,"pc":[5850]},{"teal":5985,"source":1346,"pc":[5851]},{"teal":5986,"source":1346,"pc":[5852,5853,5854]},{"teal":5987,"source":1346,"pc":[5855,5856]},{"teal":5988,"source":1346,"pc":[5857,5858]},{"teal":5989,"source":1346,"pc":[5859]},{"teal":5990,"source":1346,"pc":[5860]},{"teal":5993,"source":1346,"pc":[5861,5862,5863]},{"teal":5998,"source":1347,"pc":[5864]},{"teal":5999,"source":1347,"pc":[5865,5866,5867]},{"teal":6006,"source":1344,"pc":[5868,5869]},{"teal":6007,"source":1344,"pc":[5870,5871]},{"teal":6008,"source":1344,"pc":[5872]},{"teal":6009,"source":1344,"pc":[5873,5874]},{"teal":6010,"source":1344,"pc":[5875,5876,5877]},{"teal":6015,"source":1350,"pc":[5878]},{"teal":6019,"source":1338,"pc":[5879,5880]},{"teal":6022,"source":1338,"pc":[5881,5882]},{"teal":6023,"source":1338,"pc":[5883]},{"teal":6031,"source":1358,"pc":[5884,5885,5886]},{"teal":6034,"source":1358,"pc":[5887]},{"teal":6038,"source":1359,"pc":[5888,5889,5890]},{"teal":6039,"source":1359,"pc":[5891,5892]},{"teal":6043,"source":1361,"pc":[5893,5894]},{"teal":6044,"source":1361,"pc":[5895,5896]},{"teal":6045,"source":1361,"pc":[5897]},{"teal":6046,"source":1361,"pc":[5898]},{"teal":6047,"source":1361,"pc":[5899,5900]},{"teal":6048,"source":1361,"pc":[5901]},{"teal":6049,"source":1361,"pc":[5902]},{"teal":6050,"source":1361,"pc":[5903]},{"teal":6051,"source":1361,"pc":[5904]},{"teal":6052,"source":1361,"pc":[5905]},{"teal":6055,"source":1361,"errorMessage":"wideRatio failed","pc":[5906]},{"teal":6058,"source":1358,"pc":[5907,5908]},{"teal":6059,"source":1358,"pc":[5909]},{"teal":6066,"source":1368,"pc":[5910,5911,5912]},{"teal":6069,"source":1368,"pc":[5913]},{"teal":6073,"source":1369,"pc":[5914,5915,5916]},{"teal":6074,"source":1369,"pc":[5917,5918]},{"teal":6078,"source":1371,"pc":[5919,5920]},{"teal":6079,"source":1371,"pc":[5921,5922,5923]},{"teal":6080,"source":1371,"pc":[5924]},{"teal":6081,"source":1371,"pc":[5925]},{"teal":6082,"source":1371,"pc":[5926,5927]},{"teal":6083,"source":1371,"pc":[5928]},{"teal":6084,"source":1371,"pc":[5929]},{"teal":6085,"source":1371,"pc":[5930]},{"teal":6086,"source":1371,"pc":[5931]},{"teal":6087,"source":1371,"pc":[5932]},{"teal":6090,"source":1371,"errorMessage":"wideRatio failed","pc":[5933]},{"teal":6093,"source":1368,"pc":[5934,5935]},{"teal":6094,"source":1368,"pc":[5936]},{"teal":6100,"source":1377,"pc":[5937,5938,5939]},{"teal":6104,"source":1378,"pc":[5940,5941]},{"teal":6105,"source":1377,"pc":[5942]},{"teal":6109,"source":1381,"pc":[5943,5944,5945]},{"teal":6113,"source":1382,"pc":[5946]},{"teal":6114,"source":1381,"pc":[5947]},{"teal":6118,"source":1385,"pc":[5948,5949,5950]},{"teal":6121,"source":1385,"pc":[5951]},{"teal":6125,"source":1394,"pc":[5952,5953]},{"teal":6126,"source":1394,"pc":[5954,5955]},{"teal":6130,"source":1395,"pc":[5956,5957]},{"teal":6131,"source":1395,"pc":[5958,5959]},{"teal":6132,"source":1395,"pc":[5960,5961]},{"teal":6133,"source":1395,"pc":[5962]},{"teal":6134,"source":1395,"pc":[5963]},{"teal":6135,"source":1395,"pc":[5964,5965]},{"teal":6139,"source":1396,"pc":[5966,5967]},{"teal":6140,"source":1396,"pc":[5968,5969]},{"teal":6141,"source":1396,"pc":[5970,5971]},{"teal":6142,"source":1396,"pc":[5972]},{"teal":6143,"source":1396,"pc":[5973]},{"teal":6144,"source":1396,"pc":[5974,5975]},{"teal":6148,"source":1397,"pc":[5976,5977]},{"teal":6149,"source":1397,"pc":[5978,5979]},{"teal":6150,"source":1397,"pc":[5980,5981]},{"teal":6151,"source":1397,"pc":[5982]},{"teal":6152,"source":1397,"pc":[5983]},{"teal":6153,"source":1397,"pc":[5984,5985]},{"teal":6157,"source":1398,"pc":[5986,5987]},{"teal":6158,"source":1398,"pc":[5988,5989]},{"teal":6159,"source":1398,"pc":[5990,5991]},{"teal":6160,"source":1398,"pc":[5992]},{"teal":6161,"source":1398,"pc":[5993]},{"teal":6162,"source":1398,"pc":[5994,5995]},{"teal":6166,"source":1399,"pc":[5996,5997]},{"teal":6167,"source":1399,"pc":[5998,5999]},{"teal":6168,"source":1399,"pc":[6000,6001]},{"teal":6169,"source":1399,"pc":[6002]},{"teal":6170,"source":1399,"pc":[6003]},{"teal":6171,"source":1399,"pc":[6004,6005]},{"teal":6175,"source":1400,"pc":[6006,6007]},{"teal":6176,"source":1400,"pc":[6008,6009]},{"teal":6177,"source":1400,"pc":[6010,6011]},{"teal":6178,"source":1400,"pc":[6012]},{"teal":6179,"source":1400,"pc":[6013]},{"teal":6180,"source":1400,"pc":[6014,6015]},{"teal":6184,"source":1401,"pc":[6016,6017]},{"teal":6185,"source":1401,"pc":[6018,6019]},{"teal":6186,"source":1401,"pc":[6020,6021]},{"teal":6187,"source":1401,"pc":[6022]},{"teal":6188,"source":1401,"pc":[6023]},{"teal":6189,"source":1401,"pc":[6024,6025]},{"teal":6193,"source":1402,"pc":[6026,6027]},{"teal":6196,"source":1385,"pc":[6028,6029]},{"teal":6197,"source":1385,"pc":[6030]},{"teal":6201,"source":1405,"pc":[6031,6032,6033]},{"teal":6205,"source":1409,"pc":[6034,6035,6036]},{"teal":6206,"source":1409,"pc":[6037,6038]},{"teal":6207,"source":1409,"pc":[6039,6040,6041]},{"teal":6208,"source":1409,"pc":[6042]},{"teal":6209,"source":1409,"pc":[6043]},{"teal":6210,"source":1405,"pc":[6044]},{"teal":6213,"source":50,"pc":[6045,6046,6047,6048,6049,6050]},{"teal":6214,"source":50,"pc":[6051,6052,6053]},{"teal":6215,"source":50,"pc":[6054,6055,6056,6057]},{"teal":6218,"source":50,"errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[6058]},{"teal":6221,"source":50,"pc":[6059,6060,6061,6062,6063,6064]},{"teal":6222,"source":50,"pc":[6065,6066,6067,6068,6069,6070]},{"teal":6223,"source":50,"pc":[6071,6072,6073,6074,6075,6076]},{"teal":6224,"source":50,"pc":[6077,6078,6079,6080,6081,6082]},{"teal":6225,"source":50,"pc":[6083,6084,6085,6086,6087,6088]},{"teal":6226,"source":50,"pc":[6089,6090,6091,6092,6093,6094]},{"teal":6227,"source":50,"pc":[6095,6096,6097,6098,6099,6100]},{"teal":6228,"source":50,"pc":[6101,6102,6103,6104,6105,6106]},{"teal":6229,"source":50,"pc":[6107,6108,6109,6110,6111,6112]},{"teal":6230,"source":50,"pc":[6113,6114,6115,6116,6117,6118]},{"teal":6231,"source":50,"pc":[6119,6120,6121,6122,6123,6124]},{"teal":6232,"source":50,"pc":[6125,6126,6127,6128,6129,6130]},{"teal":6233,"source":50,"pc":[6131,6132,6133,6134,6135,6136]},{"teal":6234,"source":50,"pc":[6137,6138,6139,6140,6141,6142]},{"teal":6235,"source":50,"pc":[6143,6144,6145,6146,6147,6148]},{"teal":6236,"source":50,"pc":[6149,6150,6151,6152,6153,6154]},{"teal":6237,"source":50,"pc":[6155,6156,6157,6158,6159,6160]},{"teal":6238,"source":50,"pc":[6161,6162,6163,6164,6165,6166]},{"teal":6239,"source":50,"pc":[6167,6168,6169,6170,6171,6172]},{"teal":6240,"source":50,"pc":[6173,6174,6175,6176,6177,6178]},{"teal":6241,"source":50,"pc":[6179,6180,6181,6182,6183,6184]},{"teal":6242,"source":50,"pc":[6185,6186,6187,6188,6189,6190]},{"teal":6243,"source":50,"pc":[6191,6192,6193,6194,6195,6196]},{"teal":6244,"source":50,"pc":[6197,6198,6199,6200,6201,6202]},{"teal":6245,"source":50,"pc":[6203,6204,6205,6206,6207,6208]},{"teal":6246,"source":50,"pc":[6209,6210,6211,6212,6213,6214]},{"teal":6247,"source":50,"pc":[6215,6216,6217,6218,6219,6220]},{"teal":6248,"source":50,"pc":[6221,6222,6223,6224,6225,6226]},{"teal":6249,"source":50,"pc":[6227,6228,6229,6230,6231,6232]},{"teal":6250,"source":50,"pc":[6233,6234,6235,6236,6237,6238]},{"teal":6251,"source":50,"pc":[6239,6240,6241,6242,6243,6244]},{"teal":6252,"source":50,"pc":[6245,6246,6247,6248,6249,6250]},{"teal":6253,"source":50,"pc":[6251,6252,6253,6254,6255,6256]},{"teal":6254,"source":50,"pc":[6257,6258,6259]},{"teal":6255,"source":50,"pc":[6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327]},{"teal":6258,"source":50,"errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[6328]}],"clear":[]},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"templateVariables":{"nfdRegistryAppId":{"type":"uint64"}},"scratchVariables":{"nfdRegistryAppId":{"type":"uint64","slot":200}},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":26,"patch":229321,"commitHash":"43cb5632"}}}

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Aliases for non-encoded ABI values

type uint64 = bigint;
type byte = number;
type address = string;
type uint8 = bigint;
type uint32 = bigint;
type uint16 = bigint;
type bool = boolean;
type pay = AppMethodCallTransactionArgument;
type AVMBytes = Uint8Array;

// Type definitions for ARC-56 structs

export type ValidatorInfo = {
  config: {
    id: uint64,
    owner: address,
    manager: address,
    nfdForInfo: uint64,
    entryGatingType: uint8,
    entryGatingAddress: address,
    entryGatingAssets: uint64[],
    gatingAssetMinBalance: uint64,
    rewardTokenId: uint64,
    rewardPerPayout: uint64,
    epochRoundLength: uint32,
    percentToValidator: uint32,
    validatorCommissionAddress: address,
    minEntryStake: uint64,
    maxAlgoPerPool: uint64,
    poolsPerNode: uint8,
    sunsettingOn: uint64,
    sunsettingTo: uint64
  },
  state: {
    numPools: uint16,
    totalStakers: uint64,
    totalAlgoStaked: uint64,
    rewardTokenHeldBack: uint64
  },
  pools: [uint64,uint16,uint64][],
  tokenPayoutRatio: {
    poolPctOfWhole: uint64[],
    updatedForPayout: uint64
  },
  nodePoolAssignments: {
    nodes: [uint64[]][]
  }
}

export type MbrAmounts = {
  addValidatorMbr: uint64,
  addPoolMbr: uint64,
  poolInitMbr: uint64,
  addStakerMbr: uint64
}

export type Constraints = {
  epochPayoutRoundsMin: uint64,
  epochPayoutRoundsMax: uint64,
  minPctToValidatorWFourDecimals: uint64,
  maxPctToValidatorWFourDecimals: uint64,
  minEntryStake: uint64,
  maxAlgoPerPool: uint64,
  maxAlgoPerValidator: uint64,
  amtConsideredSaturated: uint64,
  maxNodes: uint64,
  maxPoolsPerNode: uint64,
  maxStakersPerPool: uint64
}

export type ValidatorConfig = {
  id: uint64,
  owner: address,
  manager: address,
  nfdForInfo: uint64,
  entryGatingType: uint8,
  entryGatingAddress: address,
  entryGatingAssets: uint64[],
  gatingAssetMinBalance: uint64,
  rewardTokenId: uint64,
  rewardPerPayout: uint64,
  epochRoundLength: uint32,
  percentToValidator: uint32,
  validatorCommissionAddress: address,
  minEntryStake: uint64,
  maxAlgoPerPool: uint64,
  poolsPerNode: uint8,
  sunsettingOn: uint64,
  sunsettingTo: uint64
}

export type ValidatorCurState = {
  numPools: uint16,
  totalStakers: uint64,
  totalAlgoStaked: uint64,
  rewardTokenHeldBack: uint64
}

export type PoolInfo = {
  poolAppId: uint64,
  totalStakers: uint16,
  totalAlgoStaked: uint64
}

export type ValidatorPoolKey = {
  id: uint64,
  poolId: uint64,
  poolAppId: uint64
}

export type PoolTokenPayoutRatio = {
  poolPctOfWhole: uint64[],
  updatedForPayout: uint64
}

export type NodePoolAssignmentConfig = {
  nodes: [uint64[]][]
}


/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  nfdRegistryAppId: uint64,
}
/**
 * Defines the types of available calls and state of the ValidatorRegistry smart contract.
 */
export type ValidatorRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'initStakingContract(uint64)void' | 'initStakingContract', {
      argsObj: {
        approvalProgramSize: bigint | number
      }
      argsTuple: [approvalProgramSize: bigint | number]
      returns: void
    }>
    & Record<'loadStakingContractData(uint64,byte[])void' | 'loadStakingContractData', {
      argsObj: {
        offset: bigint | number
        data: Uint8Array
      }
      argsTuple: [offset: bigint | number, data: Uint8Array]
      returns: void
    }>
    & Record<'finalizeStakingContract()void' | 'finalizeStakingContract', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getMbrAmounts()(uint64,uint64,uint64,uint64)' | 'getMbrAmounts', {
      argsObj: {
      }
      argsTuple: []
      returns: MbrAmounts
    }>
    & Record<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProtocolConstraints', {
      argsObj: {
      }
      argsTuple: []
      returns: Constraints
    }>
    & Record<'getNumValidators()uint64' | 'getNumValidators', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)' | 'getValidatorConfig', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: ValidatorConfig
    }>
    & Record<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)' | 'getValidatorState', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: ValidatorCurState
    }>
    & Record<'getValidatorOwnerAndManager(uint64)(address,address)' | 'getValidatorOwnerAndManager', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [string, string]
    }>
    & Record<'getPools(uint64)(uint64,uint16,uint64)[]' | 'getPools', {
      argsObj: {
        /**
        * PoolInfo[] - array of pools
        Not callable from other contracts because 1K return but can be called w/ simulate which bumps log returns

         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: [bigint, bigint, bigint][]
    }>
    & Record<'getPoolAppId(uint64,uint64)uint64' | 'getPoolAppId', {
      argsObj: {
        validatorId: bigint | number
        poolId: bigint | number
      }
      argsTuple: [validatorId: bigint | number, poolId: bigint | number]
      returns: bigint
    }>
    & Record<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)' | 'getPoolInfo', {
      argsObj: {
        poolKey: ValidatorPoolKey
      }
      argsTuple: [poolKey: ValidatorPoolKey]
      returns: PoolInfo
    }>
    & Record<'getCurMaxStakePerPool(uint64)uint64' | 'getCurMaxStakePerPool', {
      argsObj: {
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: bigint
    }>
    & Record<'doesStakerNeedToPayMBR(address)bool' | 'doesStakerNeedToPayMBR', {
      argsObj: {
        staker: string
      }
      argsTuple: [staker: string]
      returns: boolean
    }>
    & Record<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]' | 'getStakedPoolsForAccount', {
      argsObj: {
        /**
        * The account to retrieve staked pools for.
        ValidatorPoolKey[] - The array of staked pools for the account.

         */
        staker: string
      }
      argsTuple: [staker: string]
      returns: [bigint, bigint, bigint][]
    }>
    & Record<'getTokenPayoutRatio(uint64)(uint64[24],uint64)' | 'getTokenPayoutRatio', {
      argsObj: {
        /**
        * The id of the validator.
        PoolTokenPayoutRatio - The token payout ratio for the validator.

         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: PoolTokenPayoutRatio
    }>
    & Record<'getNodePoolAssignments(uint64)((uint64[3])[8])' | 'getNodePoolAssignments', {
      argsObj: {
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      returns: NodePoolAssignmentConfig
    }>
    & Record<'getNFDRegistryID()uint64' | 'getNFDRegistryID', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64' | 'addValidator', {
      argsObj: {
        /**
         * payment from caller which covers mbr increase of new validator storage
         */
        mbrPayment: AppMethodCallTransactionArgument
        /**
         * (Optional) Name of nfd (used as double-check against id specified in config)
         */
        nfdName: string
        /**
         * ValidatorConfig struct
         */
        config: ValidatorConfig
      }
      argsTuple: [mbrPayment: AppMethodCallTransactionArgument, nfdName: string, config: ValidatorConfig]
      /**
       * uint64 validator id
       */
      returns: bigint
    }>
    & Record<'changeValidatorManager(uint64,address)void' | 'changeValidatorManager', {
      argsObj: {
        /**
         * The id of the validator to change the manager for.
         */
        validatorId: bigint | number
        /**
         * The new manager address.
         */
        manager: string
      }
      argsTuple: [validatorId: bigint | number, manager: string]
      returns: void
    }>
    & Record<'changeValidatorSunsetInfo(uint64,uint64,uint64)void' | 'changeValidatorSunsetInfo', {
      argsObj: {
        /**
         * The id of the validator to update.
         */
        validatorId: bigint | number
        /**
         * The new sunset timestamp.
         */
        sunsettingOn: bigint | number
        /**
         * The new sunset to validator id.
         */
        sunsettingTo: bigint | number
      }
      argsTuple: [validatorId: bigint | number, sunsettingOn: bigint | number, sunsettingTo: bigint | number]
      returns: void
    }>
    & Record<'changeValidatorNFD(uint64,uint64,string)void' | 'changeValidatorNFD', {
      argsObj: {
        /**
         * The id of the validator to update.
         */
        validatorId: bigint | number
        /**
         * The application id of the NFD to assign to the validator.
         */
        nfdAppId: bigint | number
        /**
         * The name of the NFD (which must match)
         */
        nfdName: string
      }
      argsTuple: [validatorId: bigint | number, nfdAppId: bigint | number, nfdName: string]
      returns: void
    }>
    & Record<'changeValidatorCommissionAddress(uint64,address)void' | 'changeValidatorCommissionAddress', {
      argsObj: {
        validatorId: bigint | number
        commissionAddress: string
      }
      argsTuple: [validatorId: bigint | number, commissionAddress: string]
      returns: void
    }>
    & Record<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void' | 'changeValidatorRewardInfo', {
      argsObj: {
        validatorId: bigint | number
        entryGatingType: bigint | number
        entryGatingAddress: string
        entryGatingAssets: [bigint | number, bigint | number, bigint | number, bigint | number]
        gatingAssetMinBalance: bigint | number
        rewardPerPayout: bigint | number
      }
      argsTuple: [validatorId: bigint | number, entryGatingType: bigint | number, entryGatingAddress: string, entryGatingAssets: [bigint | number, bigint | number, bigint | number, bigint | number], gatingAssetMinBalance: bigint | number, rewardPerPayout: bigint | number]
      returns: void
    }>
    & Record<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)' | 'addPool', {
      argsObj: {
        /**
         * payment from caller which covers mbr increase of adding a new pool
         */
        mbrPayment: AppMethodCallTransactionArgument
        /**
         * is id of validator to pool to (must be owner or manager)
         */
        validatorId: bigint | number
        /**
         * is node number to add to
         */
        nodeNum: bigint | number
      }
      argsTuple: [mbrPayment: AppMethodCallTransactionArgument, validatorId: bigint | number, nodeNum: bigint | number]
      /**
       * ValidatorPoolKey pool key to created pool
       */
      returns: ValidatorPoolKey
    }>
    & Record<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)' | 'addStake', {
      argsObj: {
        /**
         * payment coming from staker to place into a pool
         */
        stakedAmountPayment: AppMethodCallTransactionArgument
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
        /**
        * only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.
        Txn sender is factored in as well if that is part of gating.
        *

         */
        valueToVerify: bigint | number
      }
      argsTuple: [stakedAmountPayment: AppMethodCallTransactionArgument, validatorId: bigint | number, valueToVerify: bigint | number]
      /**
       * ValidatorPoolKey - The key of the validator pool.
       */
      returns: ValidatorPoolKey
    }>
    & Record<'setTokenPayoutRatio(uint64)(uint64[24],uint64)' | 'setTokenPayoutRatio', {
      argsObj: {
        /**
         * validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator.
         */
        validatorId: bigint | number
      }
      argsTuple: [validatorId: bigint | number]
      /**
       * PoolTokenPayoutRatio - the finished ratio data
       */
      returns: PoolTokenPayoutRatio
    }>
    & Record<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void' | 'stakeUpdatedViaRewards', {
      argsObj: {
        /**
         * ValidatorPoolKey type
         */
        poolKey: ValidatorPoolKey
        /**
         * amount this validator's total stake increased via rewards
         */
        algoToAdd: bigint | number
        /**
         * amount this validator's total stake increased via rewards (that should be
         */
        rewardTokenAmountReserved: bigint | number
        /**
         * the commission amount the validator was paid, if any
         */
        validatorCommission: bigint | number
        /**
        * if the pool was in saturated state, the amount sent back to the fee sink.
        seen as 'accounted for/pending spent')

         */
        saturatedBurnToFeeSink: bigint | number
      }
      argsTuple: [poolKey: ValidatorPoolKey, algoToAdd: bigint | number, rewardTokenAmountReserved: bigint | number, validatorCommission: bigint | number, saturatedBurnToFeeSink: bigint | number]
      returns: void
    }>
    & Record<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void' | 'stakeRemoved', {
      argsObj: {
        /**
         * calling us from which stake was removed
         */
        poolKey: ValidatorPoolKey
        staker: string
        /**
         * algo amount removed
         */
        amountRemoved: bigint | number
        /**
         * if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)
         */
        rewardRemoved: bigint | number
        stakerRemoved: boolean
      }
      argsTuple: [poolKey: ValidatorPoolKey, staker: string, amountRemoved: bigint | number, rewardRemoved: bigint | number, stakerRemoved: boolean]
      returns: void
    }>
    & Record<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)' | 'findPoolForStaker', {
      argsObj: {
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
        /**
         * The address of the staker.
         */
        staker: string
        /**
         * The amount to stake.
         */
        amountToStake: bigint | number
      }
      argsTuple: [validatorId: bigint | number, staker: string, amountToStake: bigint | number]
      /**
      * ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'
      to this VALIDATOR, and true/false if staker is new to the protocol.

       */
      returns: [[bigint, bigint, bigint], boolean, boolean]
    }>
    & Record<'movePoolToNode(uint64,uint64,uint64)void' | 'movePoolToNode', {
      argsObj: {
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
        poolAppId: bigint | number
        nodeNum: bigint | number
      }
      argsTuple: [validatorId: bigint | number, poolAppId: bigint | number, nodeNum: bigint | number]
      returns: void
    }>
    & Record<'emptyTokenRewards(uint64,address)uint64' | 'emptyTokenRewards', {
      argsObj: {
        /**
         * The id of the validator.
         */
        validatorId: bigint | number
        /**
         * the account to send the tokens to (must already be opted-in to the reward token)
         */
        receiver: string
      }
      argsTuple: [validatorId: bigint | number, receiver: string]
      /**
       * uint64 the amount of reward token sent
       */
      returns: bigint
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        stakingPoolInitialized: boolean
        numValidators: bigint
        numStakers: bigint
        totalAlgoStaked: bigint
      }
    }
    box: {
      keys: {
        stakingPoolApprovalProgram: Uint8Array
      }
      maps: {
        validatorList: Map<bigint | number, ValidatorInfo>
        stakerPoolSet: Map<string, [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ValidatorRegistrySignatures = keyof ValidatorRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ValidatorRegistryNonVoidMethodSignatures = keyof ValidatorRegistryTypes['methods'] extends infer T ? T extends keyof ValidatorRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TSignature extends ValidatorRegistrySignatures> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<MethodArgs<TSignature>>
    }
>
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ValidatorRegistrySignatures> = ValidatorRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ValidatorRegistrySignatures> = ValidatorRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ValidatorRegistryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = ValidatorRegistryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ValidatorRegistryCreateCallParams =
  | Expand<CallParams<'createApplication'> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<'createApplication()void'> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ValidatorRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ValidatorRegistryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ValidatorRegistry smart contract
 */
export abstract class ValidatorRegistryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ValidatorRegistryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return ValidatorRegistryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ValidatorRegistry smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<'createApplication()void'> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initStakingContract(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initStakingContract(params: CallParams<'initStakingContract(uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initStakingContract(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.approvalProgramSize],
    }
  }
  /**
   * Constructs a no op call for the loadStakingContractData(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static loadStakingContractData(params: CallParams<'loadStakingContractData(uint64,byte[])void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'loadStakingContractData(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the finalizeStakingContract()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalizeStakingContract(params: CallParams<'finalizeStakingContract()void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalizeStakingContract()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<'gas()void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method
   *
  * Returns the MBR amounts needed for various actions:
  [
  addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
  addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
  poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
  addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
  ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMbrAmounts(params: CallParams<'getMbrAmounts()(uint64,uint64,uint64,uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMbrAmounts()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProtocolConstraints(params: CallParams<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getNumValidators()uint64 ABI method
   *
   * Returns the current number of validators
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNumValidators(params: CallParams<'getNumValidators()uint64'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getNumValidators()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getValidatorConfig(params: CallParams<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getValidatorState(params: CallParams<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getValidatorState(uint64)(uint16,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getValidatorOwnerAndManager(uint64)(address,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getValidatorOwnerAndManager(params: CallParams<'getValidatorOwnerAndManager(uint64)(address,address)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getValidatorOwnerAndManager(uint64)(address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getPools(uint64)(uint64,uint16,uint64)[] ABI method
   *
   * Return list of all pools for this validator.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPools(params: CallParams<'getPools(uint64)(uint64,uint16,uint64)[]'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPools(uint64)(uint64,uint16,uint64)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getPoolAppId(uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolAppId(params: CallParams<'getPoolAppId(uint64,uint64)uint64'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolAppId(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolInfo(params: CallParams<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolKey],
    }
  }
  /**
   * Constructs a no op call for the getCurMaxStakePerPool(uint64)uint64 ABI method
   *
  * Calculate the maximum stake per pool for a given validator.
  Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
  as pools are added the max allowed per pool can reduce.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurMaxStakePerPool(params: CallParams<'getCurMaxStakePerPool(uint64)uint64'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurMaxStakePerPool(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the doesStakerNeedToPayMBR(address)bool ABI method
   *
   * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesStakerNeedToPayMbr(params: CallParams<'doesStakerNeedToPayMBR(address)bool'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doesStakerNeedToPayMBR(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.staker],
    }
  }
  /**
   * Constructs a no op call for the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method
   *
   * Retrieves the staked pools for an account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStakedPoolsForAccount(params: CallParams<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.staker],
    }
  }
  /**
   * Constructs a no op call for the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method
   *
  * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
  payouts across pools can be based on a stable snaphost of stake.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTokenPayoutRatio(params: CallParams<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTokenPayoutRatio(uint64)(uint64[24],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNodePoolAssignments(params: CallParams<'getNodePoolAssignments(uint64)((uint64[3])[8])'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getNodePoolAssignments(uint64)((uint64[3])[8])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getNFDRegistryID()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNfdRegistryId(params: CallParams<'getNFDRegistryID()uint64'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getNFDRegistryID()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method
   *
  * Adds a new validator
  Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addValidator(params: CallParams<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPayment, params.args.nfdName, params.args.config],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorManager(uint64,address)void ABI method
   *
  * Changes the Validator manager for a specific Validator id.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorManager(params: CallParams<'changeValidatorManager(uint64,address)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorManager(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.manager],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method
   *
  * Updates the sunset information for a given validator.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorSunsetInfo(params: CallParams<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorSunsetInfo(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.sunsettingOn, params.args.sunsettingTo],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorNFD(uint64,uint64,string)void ABI method
   *
  * Changes the NFD for a validator in the validatorList contract.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorNfd(params: CallParams<'changeValidatorNFD(uint64,uint64,string)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorNFD(uint64,uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.nfdAppId, params.args.nfdName],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorCommissionAddress(uint64,address)void ABI method
   *
  * Change the commission address that validator rewards are sent to.
      [ ONLY OWNER CAN CHANGE ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorCommissionAddress(params: CallParams<'changeValidatorCommissionAddress(uint64,address)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorCommissionAddress(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.commissionAddress],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void ABI method
   *
  * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorRewardInfo(params: CallParams<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.entryGatingType, params.args.entryGatingAddress, params.args.entryGatingAssets, params.args.gatingAssetMinBalance, params.args.rewardPerPayout],
    }
  }
  /**
   * Constructs a no op call for the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method
   *
  * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
  The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
  
  
  [ ONLY OWNER OR MANAGER CAN call ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addPool(params: CallParams<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addPool(pay,uint64,uint64)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPayment, params.args.validatorId, params.args.nodeNum],
    }
  }
  /**
   * Constructs a no op call for the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method
   *
   * Adds stake to a validator pool.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addStake(params: CallParams<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addStake(pay,uint64,uint64)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakedAmountPayment, params.args.validatorId, params.args.valueToVerify],
    }
  }
  /**
   * Constructs a no op call for the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method
   *
  * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
  of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
  in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
  pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
  It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
  their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
  during the epoch updates across pools)
  
  
  Multiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple
  times in same epoch.  Just return.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setTokenPayoutRatio(params: CallParams<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setTokenPayoutRatio(uint64)(uint64[24],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method
   *
  * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
  stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
  The calling App id is validated against our pool list as well.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeUpdatedViaRewards(params: CallParams<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolKey, params.args.algoToAdd, params.args.rewardTokenAmountReserved, params.args.validatorCommission, params.args.saturatedBurnToFeeSink],
    }
  }
  /**
   * Constructs a no op call for the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method
   *
  * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
  from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
  If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
  The calling App id is validated against our pool list as well.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeRemoved(params: CallParams<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolKey, params.args.staker, params.args.amountRemoved, params.args.rewardRemoved, params.args.stakerRemoved],
    }
  }
  /**
   * Constructs a no op call for the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method
   *
  * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
  First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
  to new pool if necessary.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static findPoolForStaker(params: CallParams<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.staker, params.args.amountToStake],
    }
  }
  /**
   * Constructs a no op call for the movePoolToNode(uint64,uint64,uint64)void ABI method
   *
  * Find the specified pool (in any node number) and move it to the specified node.
  The pool account is forced offline if moved so prior node will still run for 320 rounds but
  new key goes online on new node soon after (320 rounds after it goes online)
  No-op if success, asserts if not found or can't move  (no space in target)
  [ ONLY OWNER OR MANAGER CAN CHANGE ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static movePoolToNode(params: CallParams<'movePoolToNode(uint64,uint64,uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'movePoolToNode(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.poolAppId, params.args.nodeNum],
    }
  }
  /**
   * Constructs a no op call for the emptyTokenRewards(uint64,address)uint64 ABI method
   *
  * Sends the reward tokens held in pool 1 to specified receiver.
  This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
  the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
  NOT be sent as they must be held back for stakers to later claim.
  [ ONLY OWNER CAN CALL]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emptyTokenRewards(params: CallParams<'emptyTokenRewards(uint64,address)uint64'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emptyTokenRewards(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ValidatorRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ValidatorRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: AppFactory

  /**
   * Creates a new instance of `ValidatorRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ValidatorRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ValidatorRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ValidatorRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ValidatorRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ValidatorRegistryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
    })
    return { result: result.result, appClient: new ValidatorRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = (($this) => {
    return {
      /**
       * Gets available create methods
       */
      get create() {
        return {
          /**
           * Creates a new instance of the ValidatorRegistry smart contract using the createApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The create params
           */
          createApplication(params: Expand<CallParams<'createApplication()void'> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
            return $this.appFactory.params.create(ValidatorRegistryParamsFactory.create.createApplication(params))
          },
        }
      },

    }
  })(this)

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = (($this) => {
    return {
      /**
       * Gets available create methods
       */
      get create() {
        return {
          /**
           * Creates a new instance of the ValidatorRegistry smart contract using the createApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The create params
           */
          createApplication(params: Expand<CallParams<'createApplication()void'> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
            return $this.appFactory.params.create(ValidatorRegistryParamsFactory.create.createApplication(params))
          },
        }
      },

    }
  })(this)

  /**
   * Send calls to the current app
   */
  readonly send = (($this) => {
    return {
      /**
       * Gets available create methods
       */
      get create() {
        return {
          /**
           * Creates a new instance of the ValidatorRegistry smart contract using an ABI method call using the createApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The create result
           */
          async createApplication(params: Expand<CallParams<'createApplication()void'> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
            const result = await $this.appFactory.send.create(ValidatorRegistryParamsFactory.create.createApplication(params))
            return { result: { ...result.result, return: result.result.return as undefined | MethodReturn<'createApplication()void'> }, appClient: new ValidatorRegistryClient(result.appClient) }
          },
        }
      },

    }
  })(this)

}
/**
 * A client to make calls to the ValidatorRegistry smart contract
 */
export class ValidatorRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: AppClient

  /**
   * Creates a new instance of `ValidatorRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ValidatorRegistry app spec
   */
  constructor(appClient: AppClient)
  /**
   * Creates a new instance of `ValidatorRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof AppClient ? appClientOrParams : new AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ValidatorRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ValidatorRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ValidatorRegistryClient> {
    return new ValidatorRegistryClient(await AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ValidatorRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ValidatorRegistryClient> {
    return new ValidatorRegistryClient(await AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = (($this) => {
    return {
      /**
       * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
       *
       * @param params The params for the bare (raw) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams>) {
        return $this.appClient.params.bare.clearState(params)
      },

      /**
       * Makes a call to the ValidatorRegistry smart contract using the initStakingContract(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      initStakingContract(params: Expand<CallParams<'initStakingContract(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.initStakingContract(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the loadStakingContractData(uint64,byte[])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      loadStakingContractData(params: Expand<CallParams<'loadStakingContractData(uint64,byte[])void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.loadStakingContractData(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the finalizeStakingContract()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      finalizeStakingContract(params: Expand<CallParams<'finalizeStakingContract()void'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.finalizeStakingContract(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the gas()void ABI method.
       *
       * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      gas(params: Expand<CallParams<'gas()void'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.gas(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method.
       *
      * Returns the MBR amounts needed for various actions:
      [
      addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
      addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
      poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
      addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
      ]

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getMbrAmounts(params: Expand<CallParams<'getMbrAmounts()(uint64,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getMbrAmounts(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
       *
       * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getProtocolConstraints(params: Expand<CallParams<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getProtocolConstraints(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNumValidators()uint64 ABI method.
       *
       * Returns the current number of validators
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getNumValidators(params: Expand<CallParams<'getNumValidators()uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getNumValidators(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getValidatorConfig(params: Expand<CallParams<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getValidatorConfig(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getValidatorState(params: Expand<CallParams<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getValidatorState(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorOwnerAndManager(uint64)(address,address) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getValidatorOwnerAndManager(params: Expand<CallParams<'getValidatorOwnerAndManager(uint64)(address,address)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getValidatorOwnerAndManager(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPools(uint64)(uint64,uint16,uint64)[] ABI method.
       *
       * Return list of all pools for this validator.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getPools(params: Expand<CallParams<'getPools(uint64)(uint64,uint16,uint64)[]'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getPools(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPoolAppId(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getPoolAppId(params: Expand<CallParams<'getPoolAppId(uint64,uint64)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getPoolAppId(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getPoolInfo(params: Expand<CallParams<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getPoolInfo(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getCurMaxStakePerPool(uint64)uint64 ABI method.
       *
      * Calculate the maximum stake per pool for a given validator.
      Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
      as pools are added the max allowed per pool can reduce.

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getCurMaxStakePerPool(params: Expand<CallParams<'getCurMaxStakePerPool(uint64)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getCurMaxStakePerPool(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the doesStakerNeedToPayMBR(address)bool ABI method.
       *
       * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      doesStakerNeedToPayMbr(params: Expand<CallParams<'doesStakerNeedToPayMBR(address)bool'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.doesStakerNeedToPayMbr(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method.
       *
       * Retrieves the staked pools for an account.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getStakedPoolsForAccount(params: Expand<CallParams<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getStakedPoolsForAccount(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
       *
      * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
      payouts across pools can be based on a stable snaphost of stake.

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getTokenPayoutRatio(params: Expand<CallParams<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getTokenPayoutRatio(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getNodePoolAssignments(params: Expand<CallParams<'getNodePoolAssignments(uint64)((uint64[3])[8])'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getNodePoolAssignments(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNFDRegistryID()uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      getNfdRegistryId(params: Expand<CallParams<'getNFDRegistryID()uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.getNfdRegistryId(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method.
       *
      * Adds a new validator
      Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.

       *
       * @param params The params for the smart contract call
       * @returns The call params: uint64 validator id
       */
      addValidator(params: Expand<CallParams<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.addValidator(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorManager(uint64,address)void ABI method.
       *
      * Changes the Validator manager for a specific Validator id.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      changeValidatorManager(params: Expand<CallParams<'changeValidatorManager(uint64,address)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorManager(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method.
       *
      * Updates the sunset information for a given validator.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      changeValidatorSunsetInfo(params: Expand<CallParams<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorSunsetInfo(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorNFD(uint64,uint64,string)void ABI method.
       *
      * Changes the NFD for a validator in the validatorList contract.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      changeValidatorNfd(params: Expand<CallParams<'changeValidatorNFD(uint64,uint64,string)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorNfd(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorCommissionAddress(uint64,address)void ABI method.
       *
      * Change the commission address that validator rewards are sent to.
          [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      changeValidatorCommissionAddress(params: Expand<CallParams<'changeValidatorCommissionAddress(uint64,address)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorCommissionAddress(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void ABI method.
       *
      * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      changeValidatorRewardInfo(params: Expand<CallParams<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorRewardInfo(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
       *
      * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
      The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
      
      
      [ ONLY OWNER OR MANAGER CAN call ]

       *
       * @param params The params for the smart contract call
       * @returns The call params: ValidatorPoolKey pool key to created pool
       */
      addPool(params: Expand<CallParams<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.addPool(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
       *
       * Adds stake to a validator pool.
       *
       * @param params The params for the smart contract call
       * @returns The call params: ValidatorPoolKey - The key of the validator pool.
       */
      addStake(params: Expand<CallParams<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.addStake(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
       *
      * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
      of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
      in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
      pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
      It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
      their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
      during the epoch updates across pools)
      
      
      Multiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple
      times in same epoch.  Just return.

       *
       * @param params The params for the smart contract call
       * @returns The call params: PoolTokenPayoutRatio - the finished ratio data
       */
      setTokenPayoutRatio(params: Expand<CallParams<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.setTokenPayoutRatio(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method.
       *
      * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
      stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
      The calling App id is validated against our pool list as well.

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      stakeUpdatedViaRewards(params: Expand<CallParams<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.stakeUpdatedViaRewards(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method.
       *
      * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
      from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
      If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
      The calling App id is validated against our pool list as well.

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      stakeRemoved(params: Expand<CallParams<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.stakeRemoved(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method.
       *
      * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
      First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
      to new pool if necessary.

       *
       * @param params The params for the smart contract call
      * @returns The call params: ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'
      to this VALIDATOR, and true/false if staker is new to the protocol.

       */
      findPoolForStaker(params: Expand<CallParams<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.findPoolForStaker(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the movePoolToNode(uint64,uint64,uint64)void ABI method.
       *
      * Find the specified pool (in any node number) and move it to the specified node.
      The pool account is forced offline if moved so prior node will still run for 320 rounds but
      new key goes online on new node soon after (320 rounds after it goes online)
      No-op if success, asserts if not found or can't move  (no space in target)
      [ ONLY OWNER OR MANAGER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      movePoolToNode(params: Expand<CallParams<'movePoolToNode(uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.movePoolToNode(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the emptyTokenRewards(uint64,address)uint64 ABI method.
       *
      * Sends the reward tokens held in pool 1 to specified receiver.
      This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
      the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
      NOT be sent as they must be held back for stakers to later claim.
      [ ONLY OWNER CAN CALL]

       *
       * @param params The params for the smart contract call
       * @returns The call params: uint64 the amount of reward token sent
       */
      emptyTokenRewards(params: Expand<CallParams<'emptyTokenRewards(uint64,address)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(ValidatorRegistryParamsFactory.emptyTokenRewards(params))
      },
    }
  })(this)

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = (($this) => {
    return {
      /**
       * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
       *
       * @param params The params for the bare (raw) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams>) {
        return $this.appClient.createTransaction.bare.clearState(params)
      },

      /**
       * Makes a call to the ValidatorRegistry smart contract using the initStakingContract(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      initStakingContract(params: Expand<CallParams<'initStakingContract(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.initStakingContract(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the loadStakingContractData(uint64,byte[])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      loadStakingContractData(params: Expand<CallParams<'loadStakingContractData(uint64,byte[])void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.loadStakingContractData(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the finalizeStakingContract()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      finalizeStakingContract(params: Expand<CallParams<'finalizeStakingContract()void'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.finalizeStakingContract(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the gas()void ABI method.
       *
       * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      gas(params: Expand<CallParams<'gas()void'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.gas(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method.
       *
      * Returns the MBR amounts needed for various actions:
      [
      addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
      addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
      poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
      addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
      ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getMbrAmounts(params: Expand<CallParams<'getMbrAmounts()(uint64,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getMbrAmounts(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
       *
       * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getProtocolConstraints(params: Expand<CallParams<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getProtocolConstraints(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNumValidators()uint64 ABI method.
       *
       * Returns the current number of validators
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getNumValidators(params: Expand<CallParams<'getNumValidators()uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getNumValidators(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getValidatorConfig(params: Expand<CallParams<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getValidatorConfig(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getValidatorState(params: Expand<CallParams<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getValidatorState(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorOwnerAndManager(uint64)(address,address) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getValidatorOwnerAndManager(params: Expand<CallParams<'getValidatorOwnerAndManager(uint64)(address,address)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getValidatorOwnerAndManager(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPools(uint64)(uint64,uint16,uint64)[] ABI method.
       *
       * Return list of all pools for this validator.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getPools(params: Expand<CallParams<'getPools(uint64)(uint64,uint16,uint64)[]'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getPools(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPoolAppId(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getPoolAppId(params: Expand<CallParams<'getPoolAppId(uint64,uint64)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getPoolAppId(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getPoolInfo(params: Expand<CallParams<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getPoolInfo(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getCurMaxStakePerPool(uint64)uint64 ABI method.
       *
      * Calculate the maximum stake per pool for a given validator.
      Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
      as pools are added the max allowed per pool can reduce.

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getCurMaxStakePerPool(params: Expand<CallParams<'getCurMaxStakePerPool(uint64)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getCurMaxStakePerPool(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the doesStakerNeedToPayMBR(address)bool ABI method.
       *
       * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      doesStakerNeedToPayMbr(params: Expand<CallParams<'doesStakerNeedToPayMBR(address)bool'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.doesStakerNeedToPayMbr(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method.
       *
       * Retrieves the staked pools for an account.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getStakedPoolsForAccount(params: Expand<CallParams<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getStakedPoolsForAccount(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
       *
      * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
      payouts across pools can be based on a stable snaphost of stake.

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getTokenPayoutRatio(params: Expand<CallParams<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getTokenPayoutRatio(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getNodePoolAssignments(params: Expand<CallParams<'getNodePoolAssignments(uint64)((uint64[3])[8])'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getNodePoolAssignments(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNFDRegistryID()uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      getNfdRegistryId(params: Expand<CallParams<'getNFDRegistryID()uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getNfdRegistryId(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method.
       *
      * Adds a new validator
      Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.

       *
       * @param params The params for the smart contract call
       * @returns The call transaction: uint64 validator id
       */
      addValidator(params: Expand<CallParams<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.addValidator(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorManager(uint64,address)void ABI method.
       *
      * Changes the Validator manager for a specific Validator id.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      changeValidatorManager(params: Expand<CallParams<'changeValidatorManager(uint64,address)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorManager(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method.
       *
      * Updates the sunset information for a given validator.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      changeValidatorSunsetInfo(params: Expand<CallParams<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorSunsetInfo(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorNFD(uint64,uint64,string)void ABI method.
       *
      * Changes the NFD for a validator in the validatorList contract.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      changeValidatorNfd(params: Expand<CallParams<'changeValidatorNFD(uint64,uint64,string)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorNfd(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorCommissionAddress(uint64,address)void ABI method.
       *
      * Change the commission address that validator rewards are sent to.
          [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      changeValidatorCommissionAddress(params: Expand<CallParams<'changeValidatorCommissionAddress(uint64,address)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorCommissionAddress(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void ABI method.
       *
      * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      changeValidatorRewardInfo(params: Expand<CallParams<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorRewardInfo(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
       *
      * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
      The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
      
      
      [ ONLY OWNER OR MANAGER CAN call ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction: ValidatorPoolKey pool key to created pool
       */
      addPool(params: Expand<CallParams<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.addPool(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
       *
       * Adds stake to a validator pool.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction: ValidatorPoolKey - The key of the validator pool.
       */
      addStake(params: Expand<CallParams<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.addStake(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
       *
      * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
      of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
      in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
      pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
      It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
      their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
      during the epoch updates across pools)
      
      
      Multiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple
      times in same epoch.  Just return.

       *
       * @param params The params for the smart contract call
       * @returns The call transaction: PoolTokenPayoutRatio - the finished ratio data
       */
      setTokenPayoutRatio(params: Expand<CallParams<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.setTokenPayoutRatio(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method.
       *
      * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
      stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
      The calling App id is validated against our pool list as well.

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      stakeUpdatedViaRewards(params: Expand<CallParams<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.stakeUpdatedViaRewards(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method.
       *
      * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
      from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
      If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
      The calling App id is validated against our pool list as well.

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      stakeRemoved(params: Expand<CallParams<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.stakeRemoved(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method.
       *
      * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
      First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
      to new pool if necessary.

       *
       * @param params The params for the smart contract call
      * @returns The call transaction: ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'
      to this VALIDATOR, and true/false if staker is new to the protocol.

       */
      findPoolForStaker(params: Expand<CallParams<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.findPoolForStaker(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the movePoolToNode(uint64,uint64,uint64)void ABI method.
       *
      * Find the specified pool (in any node number) and move it to the specified node.
      The pool account is forced offline if moved so prior node will still run for 320 rounds but
      new key goes online on new node soon after (320 rounds after it goes online)
      No-op if success, asserts if not found or can't move  (no space in target)
      [ ONLY OWNER OR MANAGER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      movePoolToNode(params: Expand<CallParams<'movePoolToNode(uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.movePoolToNode(params))
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the emptyTokenRewards(uint64,address)uint64 ABI method.
       *
      * Sends the reward tokens held in pool 1 to specified receiver.
      This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
      the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
      NOT be sent as they must be held back for stakers to later claim.
      [ ONLY OWNER CAN CALL]

       *
       * @param params The params for the smart contract call
       * @returns The call transaction: uint64 the amount of reward token sent
       */
      emptyTokenRewards(params: Expand<CallParams<'emptyTokenRewards(uint64,address)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.emptyTokenRewards(params))
      },
    }
  })(this)

  /**
   * Send calls to the current app
   */
  readonly send = (($this) => {
    return {
      /**
       * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
       *
       * @param params The params for the bare (raw) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams & SendParams>) {
        return $this.appClient.send.bare.clearState(params)
      },

      /**
       * Makes a call to the ValidatorRegistry smart contract using the initStakingContract(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async initStakingContract(params: Expand<CallParams<'initStakingContract(uint64)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.initStakingContract(params))
        return {...result, return: result.return as undefined | MethodReturn<'initStakingContract(uint64)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the loadStakingContractData(uint64,byte[])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async loadStakingContractData(params: Expand<CallParams<'loadStakingContractData(uint64,byte[])void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.loadStakingContractData(params))
        return {...result, return: result.return as undefined | MethodReturn<'loadStakingContractData(uint64,byte[])void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the finalizeStakingContract()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async finalizeStakingContract(params: Expand<CallParams<'finalizeStakingContract()void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.finalizeStakingContract(params))
        return {...result, return: result.return as undefined | MethodReturn<'finalizeStakingContract()void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the gas()void ABI method.
       *
       * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async gas(params: Expand<CallParams<'gas()void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.gas(params))
        return {...result, return: result.return as undefined | MethodReturn<'gas()void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method.
       *
      * Returns the MBR amounts needed for various actions:
      [
      addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
      addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
      poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
      addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
      ]

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getMbrAmounts(params: Expand<CallParams<'getMbrAmounts()(uint64,uint64,uint64,uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getMbrAmounts(params))
        return {...result, return: result.return as undefined | MethodReturn<'getMbrAmounts()(uint64,uint64,uint64,uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
       *
       * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getProtocolConstraints(params: Expand<CallParams<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getProtocolConstraints(params))
        return {...result, return: result.return as undefined | MethodReturn<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNumValidators()uint64 ABI method.
       *
       * Returns the current number of validators
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getNumValidators(params: Expand<CallParams<'getNumValidators()uint64'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getNumValidators(params))
        return {...result, return: result.return as undefined | MethodReturn<'getNumValidators()uint64'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getValidatorConfig(params: Expand<CallParams<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getValidatorConfig(params))
        return {...result, return: result.return as undefined | MethodReturn<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getValidatorState(params: Expand<CallParams<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getValidatorState(params))
        return {...result, return: result.return as undefined | MethodReturn<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getValidatorOwnerAndManager(uint64)(address,address) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getValidatorOwnerAndManager(params: Expand<CallParams<'getValidatorOwnerAndManager(uint64)(address,address)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getValidatorOwnerAndManager(params))
        return {...result, return: result.return as undefined | MethodReturn<'getValidatorOwnerAndManager(uint64)(address,address)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPools(uint64)(uint64,uint16,uint64)[] ABI method.
       *
       * Return list of all pools for this validator.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getPools(params: Expand<CallParams<'getPools(uint64)(uint64,uint16,uint64)[]'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getPools(params))
        return {...result, return: result.return as undefined | MethodReturn<'getPools(uint64)(uint64,uint16,uint64)[]'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPoolAppId(uint64,uint64)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getPoolAppId(params: Expand<CallParams<'getPoolAppId(uint64,uint64)uint64'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getPoolAppId(params))
        return {...result, return: result.return as undefined | MethodReturn<'getPoolAppId(uint64,uint64)uint64'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getPoolInfo(params: Expand<CallParams<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getPoolInfo(params))
        return {...result, return: result.return as undefined | MethodReturn<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getCurMaxStakePerPool(uint64)uint64 ABI method.
       *
      * Calculate the maximum stake per pool for a given validator.
      Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
      as pools are added the max allowed per pool can reduce.

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getCurMaxStakePerPool(params: Expand<CallParams<'getCurMaxStakePerPool(uint64)uint64'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getCurMaxStakePerPool(params))
        return {...result, return: result.return as undefined | MethodReturn<'getCurMaxStakePerPool(uint64)uint64'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the doesStakerNeedToPayMBR(address)bool ABI method.
       *
       * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async doesStakerNeedToPayMbr(params: Expand<CallParams<'doesStakerNeedToPayMBR(address)bool'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.doesStakerNeedToPayMbr(params))
        return {...result, return: result.return as undefined | MethodReturn<'doesStakerNeedToPayMBR(address)bool'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method.
       *
       * Retrieves the staked pools for an account.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getStakedPoolsForAccount(params: Expand<CallParams<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getStakedPoolsForAccount(params))
        return {...result, return: result.return as undefined | MethodReturn<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
       *
      * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
      payouts across pools can be based on a stable snaphost of stake.

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getTokenPayoutRatio(params: Expand<CallParams<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getTokenPayoutRatio(params))
        return {...result, return: result.return as undefined | MethodReturn<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getNodePoolAssignments(params: Expand<CallParams<'getNodePoolAssignments(uint64)((uint64[3])[8])'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getNodePoolAssignments(params))
        return {...result, return: result.return as undefined | MethodReturn<'getNodePoolAssignments(uint64)((uint64[3])[8])'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the getNFDRegistryID()uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async getNfdRegistryId(params: Expand<CallParams<'getNFDRegistryID()uint64'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.getNfdRegistryId(params))
        return {...result, return: result.return as undefined | MethodReturn<'getNFDRegistryID()uint64'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method.
       *
      * Adds a new validator
      Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.

       *
       * @param params The params for the smart contract call
       * @returns The call result: uint64 validator id
       */
      async addValidator(params: Expand<CallParams<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.addValidator(params))
        return {...result, return: result.return as undefined | MethodReturn<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorManager(uint64,address)void ABI method.
       *
      * Changes the Validator manager for a specific Validator id.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async changeValidatorManager(params: Expand<CallParams<'changeValidatorManager(uint64,address)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorManager(params))
        return {...result, return: result.return as undefined | MethodReturn<'changeValidatorManager(uint64,address)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method.
       *
      * Updates the sunset information for a given validator.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async changeValidatorSunsetInfo(params: Expand<CallParams<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorSunsetInfo(params))
        return {...result, return: result.return as undefined | MethodReturn<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorNFD(uint64,uint64,string)void ABI method.
       *
      * Changes the NFD for a validator in the validatorList contract.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async changeValidatorNfd(params: Expand<CallParams<'changeValidatorNFD(uint64,uint64,string)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorNfd(params))
        return {...result, return: result.return as undefined | MethodReturn<'changeValidatorNFD(uint64,uint64,string)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorCommissionAddress(uint64,address)void ABI method.
       *
      * Change the commission address that validator rewards are sent to.
          [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async changeValidatorCommissionAddress(params: Expand<CallParams<'changeValidatorCommissionAddress(uint64,address)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorCommissionAddress(params))
        return {...result, return: result.return as undefined | MethodReturn<'changeValidatorCommissionAddress(uint64,address)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void ABI method.
       *
      * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
      [ ONLY OWNER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async changeValidatorRewardInfo(params: Expand<CallParams<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorRewardInfo(params))
        return {...result, return: result.return as undefined | MethodReturn<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
       *
      * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
      The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
      
      
      [ ONLY OWNER OR MANAGER CAN call ]

       *
       * @param params The params for the smart contract call
       * @returns The call result: ValidatorPoolKey pool key to created pool
       */
      async addPool(params: Expand<CallParams<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.addPool(params))
        return {...result, return: result.return as undefined | MethodReturn<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
       *
       * Adds stake to a validator pool.
       *
       * @param params The params for the smart contract call
       * @returns The call result: ValidatorPoolKey - The key of the validator pool.
       */
      async addStake(params: Expand<CallParams<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.addStake(params))
        return {...result, return: result.return as undefined | MethodReturn<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
       *
      * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
      of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
      in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
      pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
      It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
      their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
      during the epoch updates across pools)
      
      
      Multiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple
      times in same epoch.  Just return.

       *
       * @param params The params for the smart contract call
       * @returns The call result: PoolTokenPayoutRatio - the finished ratio data
       */
      async setTokenPayoutRatio(params: Expand<CallParams<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.setTokenPayoutRatio(params))
        return {...result, return: result.return as undefined | MethodReturn<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method.
       *
      * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
      stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
      The calling App id is validated against our pool list as well.

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async stakeUpdatedViaRewards(params: Expand<CallParams<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.stakeUpdatedViaRewards(params))
        return {...result, return: result.return as undefined | MethodReturn<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method.
       *
      * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
      from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
      If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
      The calling App id is validated against our pool list as well.

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async stakeRemoved(params: Expand<CallParams<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.stakeRemoved(params))
        return {...result, return: result.return as undefined | MethodReturn<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method.
       *
      * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
      First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
      to new pool if necessary.

       *
       * @param params The params for the smart contract call
      * @returns The call result: ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'
      to this VALIDATOR, and true/false if staker is new to the protocol.

       */
      async findPoolForStaker(params: Expand<CallParams<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.findPoolForStaker(params))
        return {...result, return: result.return as undefined | MethodReturn<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the movePoolToNode(uint64,uint64,uint64)void ABI method.
       *
      * Find the specified pool (in any node number) and move it to the specified node.
      The pool account is forced offline if moved so prior node will still run for 320 rounds but
      new key goes online on new node soon after (320 rounds after it goes online)
      No-op if success, asserts if not found or can't move  (no space in target)
      [ ONLY OWNER OR MANAGER CAN CHANGE ]

       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async movePoolToNode(params: Expand<CallParams<'movePoolToNode(uint64,uint64,uint64)void'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.movePoolToNode(params))
        return {...result, return: result.return as undefined | MethodReturn<'movePoolToNode(uint64,uint64,uint64)void'>}
      },
      /**
       * Makes a call to the ValidatorRegistry smart contract using the emptyTokenRewards(uint64,address)uint64 ABI method.
       *
      * Sends the reward tokens held in pool 1 to specified receiver.
      This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
      the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
      NOT be sent as they must be held back for stakers to later claim.
      [ ONLY OWNER CAN CALL]

       *
       * @param params The params for the smart contract call
       * @returns The call result: uint64 the amount of reward token sent
       */
      async emptyTokenRewards(params: Expand<CallParams<'emptyTokenRewards(uint64,address)uint64'> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(ValidatorRegistryParamsFactory.emptyTokenRewards(params))
        return {...result, return: result.return as undefined | MethodReturn<'emptyTokenRewards(uint64,address)uint64'>}
      },
    }
  })(this)

  /**
   * Methods to access state for the current ValidatorRegistry app
   */
  state = {
    /**
     * Methods to access global state for the current ValidatorRegistry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          stakingPoolInitialized: result.stakingPoolInitialized,
          numValidators: result.numValidators,
          numStakers: result.numStakers,
          totalAlgoStaked: result.totalAlgoStaked,
        }
      },
      /**
       * Get the current value of the stakingPoolInitialized key in global state
       */
      stakingPoolInitialized: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("stakingPoolInitialized")) as boolean | undefined },
      /**
       * Get the current value of the numValidators key in global state
       */
      numValidators: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("numValidators")) as bigint | undefined },
      /**
       * Get the current value of the numStakers key in global state
       */
      numStakers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("numStakers")) as bigint | undefined },
      /**
       * Get the current value of the totalAlgoStaked key in global state
       */
      totalAlgoStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAlgoStaked")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ValidatorRegistry app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          stakingPoolApprovalProgram: result.stakingPoolApprovalProgram,
        }
      },
      /**
       * Get the current value of the stakingPoolApprovalProgram key in box state
       */
      stakingPoolApprovalProgram: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.box.getValue("stakingPoolApprovalProgram")) as Uint8Array | undefined },
      /**
       * Get values from the validatorList map in box state
       */
      validatorList: {
        /**
         * Get all current values of the validatorList map in box state
         */
        getMap: async (): Promise<Map<bigint, ValidatorInfo>> => { return (await this.appClient.state.box.getMap("validatorList")) as Map<bigint, ValidatorInfo> },
        /**
         * Get a current value of the validatorList map by key from box state
         */
        value: async (key: bigint | number): Promise<ValidatorInfo | undefined> => { return await this.appClient.state.box.getMapValue("validatorList", key) as ValidatorInfo | undefined },
      },
      /**
       * Get values from the stakerPoolSet map in box state
       */
      stakerPoolSet: {
        /**
         * Get all current values of the stakerPoolSet map in box state
         */
        getMap: async (): Promise<Map<string, [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]>> => { return (await this.appClient.state.box.getMap("stakerPoolSet")) as Map<string, [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]> },
        /**
         * Get a current value of the stakerPoolSet map by key from box state
         */
        value: async (key: string): Promise<[[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]] | undefined> => { return await this.appClient.state.box.getMapValue("stakerPoolSet", key) as [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]] | undefined },
      },
    },
  }

  public newGroup(): ValidatorRegistryComposer {
    const client = this
    const composer = client.appClient.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initStakingContract(uint64)void method call against the ValidatorRegistry contract
       */
      initStakingContract(params: CallParams<'initStakingContract(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initStakingContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a loadStakingContractData(uint64,byte[])void method call against the ValidatorRegistry contract
       */
      loadStakingContractData(params: CallParams<'loadStakingContractData(uint64,byte[])void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.loadStakingContractData(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalizeStakingContract()void method call against the ValidatorRegistry contract
       */
      finalizeStakingContract(params: CallParams<'finalizeStakingContract()void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalizeStakingContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a gas()void method call against the ValidatorRegistry contract
       */
      gas(params: CallParams<'gas()void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getMbrAmounts()(uint64,uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getMbrAmounts(params: CallParams<'getMbrAmounts()(uint64,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMbrAmounts(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMbrAmounts()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getProtocolConstraints(params: CallParams<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProtocolConstraints(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getNumValidators()uint64 method call against the ValidatorRegistry contract
       */
      getNumValidators(params: CallParams<'getNumValidators()uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNumValidators(params)))
        resultMappers.push((v) => client.decodeReturnValue('getNumValidators()uint64', v))
        return this
      },
      /**
       * Add a getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getValidatorConfig(params: CallParams<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getValidatorConfig(params)))
        resultMappers.push((v) => client.decodeReturnValue('getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getValidatorState(uint64)(uint16,uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getValidatorState(params: CallParams<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getValidatorState(params)))
        resultMappers.push((v) => client.decodeReturnValue('getValidatorState(uint64)(uint16,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getValidatorOwnerAndManager(uint64)(address,address) method call against the ValidatorRegistry contract
       */
      getValidatorOwnerAndManager(params: CallParams<'getValidatorOwnerAndManager(uint64)(address,address)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getValidatorOwnerAndManager(params)))
        resultMappers.push((v) => client.decodeReturnValue('getValidatorOwnerAndManager(uint64)(address,address)', v))
        return this
      },
      /**
       * Add a getPools(uint64)(uint64,uint16,uint64)[] method call against the ValidatorRegistry contract
       */
      getPools(params: CallParams<'getPools(uint64)(uint64,uint16,uint64)[]'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPools(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPools(uint64)(uint64,uint16,uint64)[]', v))
        return this
      },
      /**
       * Add a getPoolAppId(uint64,uint64)uint64 method call against the ValidatorRegistry contract
       */
      getPoolAppId(params: CallParams<'getPoolAppId(uint64,uint64)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolAppId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolAppId(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) method call against the ValidatorRegistry contract
       */
      getPoolInfo(params: CallParams<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)', v))
        return this
      },
      /**
       * Add a getCurMaxStakePerPool(uint64)uint64 method call against the ValidatorRegistry contract
       */
      getCurMaxStakePerPool(params: CallParams<'getCurMaxStakePerPool(uint64)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurMaxStakePerPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurMaxStakePerPool(uint64)uint64', v))
        return this
      },
      /**
       * Add a doesStakerNeedToPayMBR(address)bool method call against the ValidatorRegistry contract
       */
      doesStakerNeedToPayMbr(params: CallParams<'doesStakerNeedToPayMBR(address)bool'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesStakerNeedToPayMbr(params)))
        resultMappers.push((v) => client.decodeReturnValue('doesStakerNeedToPayMBR(address)bool', v))
        return this
      },
      /**
       * Add a getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] method call against the ValidatorRegistry contract
       */
      getStakedPoolsForAccount(params: CallParams<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStakedPoolsForAccount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]', v))
        return this
      },
      /**
       * Add a getTokenPayoutRatio(uint64)(uint64[24],uint64) method call against the ValidatorRegistry contract
       */
      getTokenPayoutRatio(params: CallParams<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTokenPayoutRatio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTokenPayoutRatio(uint64)(uint64[24],uint64)', v))
        return this
      },
      /**
       * Add a getNodePoolAssignments(uint64)((uint64[3])[8]) method call against the ValidatorRegistry contract
       */
      getNodePoolAssignments(params: CallParams<'getNodePoolAssignments(uint64)((uint64[3])[8])'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNodePoolAssignments(params)))
        resultMappers.push((v) => client.decodeReturnValue('getNodePoolAssignments(uint64)((uint64[3])[8])', v))
        return this
      },
      /**
       * Add a getNFDRegistryID()uint64 method call against the ValidatorRegistry contract
       */
      getNfdRegistryId(params: CallParams<'getNFDRegistryID()uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNfdRegistryId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getNFDRegistryID()uint64', v))
        return this
      },
      /**
       * Add a addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 method call against the ValidatorRegistry contract
       */
      addValidator(params: CallParams<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addValidator(params)))
        resultMappers.push((v) => client.decodeReturnValue('addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64', v))
        return this
      },
      /**
       * Add a changeValidatorManager(uint64,address)void method call against the ValidatorRegistry contract
       */
      changeValidatorManager(params: CallParams<'changeValidatorManager(uint64,address)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorSunsetInfo(uint64,uint64,uint64)void method call against the ValidatorRegistry contract
       */
      changeValidatorSunsetInfo(params: CallParams<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorSunsetInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorNFD(uint64,uint64,string)void method call against the ValidatorRegistry contract
       */
      changeValidatorNfd(params: CallParams<'changeValidatorNFD(uint64,uint64,string)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorNfd(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorCommissionAddress(uint64,address)void method call against the ValidatorRegistry contract
       */
      changeValidatorCommissionAddress(params: CallParams<'changeValidatorCommissionAddress(uint64,address)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorCommissionAddress(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void method call against the ValidatorRegistry contract
       */
      changeValidatorRewardInfo(params: CallParams<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorRewardInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addPool(pay,uint64,uint64)(uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      addPool(params: CallParams<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('addPool(pay,uint64,uint64)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a addStake(pay,uint64,uint64)(uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      addStake(params: CallParams<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('addStake(pay,uint64,uint64)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a setTokenPayoutRatio(uint64)(uint64[24],uint64) method call against the ValidatorRegistry contract
       */
      setTokenPayoutRatio(params: CallParams<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setTokenPayoutRatio(params)))
        resultMappers.push((v) => client.decodeReturnValue('setTokenPayoutRatio(uint64)(uint64[24],uint64)', v))
        return this
      },
      /**
       * Add a stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void method call against the ValidatorRegistry contract
       */
      stakeUpdatedViaRewards(params: CallParams<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeUpdatedViaRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void method call against the ValidatorRegistry contract
       */
      stakeRemoved(params: CallParams<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeRemoved(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) method call against the ValidatorRegistry contract
       */
      findPoolForStaker(params: CallParams<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.findPoolForStaker(params)))
        resultMappers.push((v) => client.decodeReturnValue('findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)', v))
        return this
      },
      /**
       * Add a movePoolToNode(uint64,uint64,uint64)void method call against the ValidatorRegistry contract
       */
      movePoolToNode(params: CallParams<'movePoolToNode(uint64,uint64,uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.movePoolToNode(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emptyTokenRewards(uint64,address)uint64 method call against the ValidatorRegistry contract
       */
      emptyTokenRewards(params: CallParams<'emptyTokenRewards(uint64,address)uint64'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emptyTokenRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('emptyTokenRewards(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ValidatorRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await composer.simulate(options)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ValidatorRegistryComposer
  }
}
export type ValidatorRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initStakingContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initStakingContract(params?: CallParams<'initStakingContract(uint64)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'initStakingContract(uint64)void'> | undefined]>

  /**
   * Calls the loadStakingContractData(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  loadStakingContractData(params?: CallParams<'loadStakingContractData(uint64,byte[])void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'loadStakingContractData(uint64,byte[])void'> | undefined]>

  /**
   * Calls the finalizeStakingContract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeStakingContract(params?: CallParams<'finalizeStakingContract()void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'finalizeStakingContract()void'> | undefined]>

  /**
   * Calls the gas()void ABI method.
   *
   * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<'gas()void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'gas()void'> | undefined]>

  /**
   * Calls the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method.
   *
  * Returns the MBR amounts needed for various actions:
  [
  addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
  addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
  poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
  addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
  ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrAmounts(params?: CallParams<'getMbrAmounts()(uint64,uint64,uint64,uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getMbrAmounts()(uint64,uint64,uint64,uint64)'> | undefined]>

  /**
   * Calls the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProtocolConstraints(params?: CallParams<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'> | undefined]>

  /**
   * Calls the getNumValidators()uint64 ABI method.
   *
   * Returns the current number of validators
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNumValidators(params?: CallParams<'getNumValidators()uint64'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getNumValidators()uint64'> | undefined]>

  /**
   * Calls the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorConfig(params?: CallParams<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)'> | undefined]>

  /**
   * Calls the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorState(params?: CallParams<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorState(uint64)(uint16,uint64,uint64,uint64)'> | undefined]>

  /**
   * Calls the getValidatorOwnerAndManager(uint64)(address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorOwnerAndManager(params?: CallParams<'getValidatorOwnerAndManager(uint64)(address,address)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getValidatorOwnerAndManager(uint64)(address,address)'> | undefined]>

  /**
   * Calls the getPools(uint64)(uint64,uint16,uint64)[] ABI method.
   *
   * Return list of all pools for this validator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPools(params?: CallParams<'getPools(uint64)(uint64,uint16,uint64)[]'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getPools(uint64)(uint64,uint16,uint64)[]'> | undefined]>

  /**
   * Calls the getPoolAppId(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolAppId(params?: CallParams<'getPoolAppId(uint64,uint64)uint64'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getPoolAppId(uint64,uint64)uint64'> | undefined]>

  /**
   * Calls the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolInfo(params?: CallParams<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)'> | undefined]>

  /**
   * Calls the getCurMaxStakePerPool(uint64)uint64 ABI method.
   *
  * Calculate the maximum stake per pool for a given validator.
  Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
  as pools are added the max allowed per pool can reduce.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurMaxStakePerPool(params?: CallParams<'getCurMaxStakePerPool(uint64)uint64'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getCurMaxStakePerPool(uint64)uint64'> | undefined]>

  /**
   * Calls the doesStakerNeedToPayMBR(address)bool ABI method.
   *
   * Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesStakerNeedToPayMbr(params?: CallParams<'doesStakerNeedToPayMBR(address)bool'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'doesStakerNeedToPayMBR(address)bool'> | undefined]>

  /**
   * Calls the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method.
   *
   * Retrieves the staked pools for an account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakedPoolsForAccount(params?: CallParams<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'> | undefined]>

  /**
   * Calls the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
  * Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
  payouts across pools can be based on a stable snaphost of stake.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTokenPayoutRatio(params?: CallParams<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getTokenPayoutRatio(uint64)(uint64[24],uint64)'> | undefined]>

  /**
   * Calls the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNodePoolAssignments(params?: CallParams<'getNodePoolAssignments(uint64)((uint64[3])[8])'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getNodePoolAssignments(uint64)((uint64[3])[8])'> | undefined]>

  /**
   * Calls the getNFDRegistryID()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNfdRegistryId(params?: CallParams<'getNFDRegistryID()uint64'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'getNFDRegistryID()uint64'> | undefined]>

  /**
   * Calls the addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method.
   *
  * Adds a new validator
  Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addValidator(params?: CallParams<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64'> | undefined]>

  /**
   * Calls the changeValidatorManager(uint64,address)void ABI method.
   *
  * Changes the Validator manager for a specific Validator id.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorManager(params?: CallParams<'changeValidatorManager(uint64,address)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorManager(uint64,address)void'> | undefined]>

  /**
   * Calls the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method.
   *
  * Updates the sunset information for a given validator.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorSunsetInfo(params?: CallParams<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorSunsetInfo(uint64,uint64,uint64)void'> | undefined]>

  /**
   * Calls the changeValidatorNFD(uint64,uint64,string)void ABI method.
   *
  * Changes the NFD for a validator in the validatorList contract.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorNfd(params?: CallParams<'changeValidatorNFD(uint64,uint64,string)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorNFD(uint64,uint64,string)void'> | undefined]>

  /**
   * Calls the changeValidatorCommissionAddress(uint64,address)void ABI method.
   *
  * Change the commission address that validator rewards are sent to.
      [ ONLY OWNER CAN CHANGE ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorCommissionAddress(params?: CallParams<'changeValidatorCommissionAddress(uint64,address)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorCommissionAddress(uint64,address)void'> | undefined]>

  /**
   * Calls the changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void ABI method.
   *
  * Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
  [ ONLY OWNER CAN CHANGE ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorRewardInfo(params?: CallParams<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void'> | undefined]>

  /**
   * Calls the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
  * Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
  The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
  
  
  [ ONLY OWNER OR MANAGER CAN call ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPool(params?: CallParams<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addPool(pay,uint64,uint64)(uint64,uint64,uint64)'> | undefined]>

  /**
   * Calls the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
   * Adds stake to a validator pool.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(params?: CallParams<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'addStake(pay,uint64,uint64)(uint64,uint64,uint64)'> | undefined]>

  /**
   * Calls the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
  * setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
  of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
  in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
  pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
  It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
  their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
  during the epoch updates across pools)
  
  
  Multiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple
  times in same epoch.  Just return.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTokenPayoutRatio(params?: CallParams<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'setTokenPayoutRatio(uint64)(uint64[24],uint64)'> | undefined]>

  /**
   * Calls the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method.
   *
  * stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
  stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
  The calling App id is validated against our pool list as well.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeUpdatedViaRewards(params?: CallParams<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'> | undefined]>

  /**
   * Calls the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method.
   *
  * stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
  from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
  If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
  The calling App id is validated against our pool list as well.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeRemoved(params?: CallParams<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'> | undefined]>

  /**
   * Calls the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method.
   *
  * Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
  First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
  to new pool if necessary.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  findPoolForStaker(params?: CallParams<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'> | undefined]>

  /**
   * Calls the movePoolToNode(uint64,uint64,uint64)void ABI method.
   *
  * Find the specified pool (in any node number) and move it to the specified node.
  The pool account is forced offline if moved so prior node will still run for 320 rounds but
  new key goes online on new node soon after (320 rounds after it goes online)
  No-op if success, asserts if not found or can't move  (no space in target)
  [ ONLY OWNER OR MANAGER CAN CHANGE ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  movePoolToNode(params?: CallParams<'movePoolToNode(uint64,uint64,uint64)void'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'movePoolToNode(uint64,uint64,uint64)void'> | undefined]>

  /**
   * Calls the emptyTokenRewards(uint64,address)uint64 ABI method.
   *
  * Sends the reward tokens held in pool 1 to specified receiver.
  This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
  the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
  NOT be sent as they must be held back for stakers to later claim.
  [ ONLY OWNER CAN CALL]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emptyTokenRewards(params?: CallParams<'emptyTokenRewards(uint64,address)uint64'>): ValidatorRegistryComposer<[...TReturns, MethodReturn<'emptyTokenRewards(uint64,address)uint64'> | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ValidatorRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ValidatorRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): AlgoKitComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ValidatorRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ValidatorRegistryComposerResults<TReturns>>
}
export type ValidatorRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

