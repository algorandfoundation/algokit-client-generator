/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^3
 */
import { AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory, AppFactoryDeployParams } from '@algorandfoundation/algokit-utils/types/app-factory'
import { AppCallMethodCall } from '@algorandfoundation/algokit-utils/types/composer'
import { ExecuteParams, SendSingleTransactionResult } from '@algorandfoundation/algokit-utils/types/transaction'
import { OnApplicationComplete } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"HelloWorldApp","structs":{},"methods":[{"name":"hello","desc":"Returns Hello, {name}","args":[{"name":"name","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"hello_world_check","desc":"Asserts {name} is \"World\"","args":[{"name":"name","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDAyYmVjZTExIC8vICJoZWxsbyhzdHJpbmcpc3RyaW5nIgo9PQpibnogbWFpbl9sNQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGJmOWMxZWRmIC8vICJoZWxsb193b3JsZF9jaGVjayhzdHJpbmcpdm9pZCIKPT0KYm56IG1haW5fbDQKZXJyCm1haW5fbDQ6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKY2FsbHN1YiBoZWxsb3dvcmxkY2hlY2tfMwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpjYWxsc3ViIGhlbGxvXzIKc3RvcmUgMApwdXNoYnl0ZXMgMHgxNTFmN2M3NSAvLyAweDE1MWY3Yzc1CmxvYWQgMApjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxMgp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTEKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KPT0KYm56IG1haW5fbDEwCmVycgptYWluX2wxMDoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgZGVsZXRlXzEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDExOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiB1cGRhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIHVwZGF0ZQp1cGRhdGVfMDoKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKcHVzaGludCBUTVBMX1VQREFUQUJMRSAvLyBUTVBMX1VQREFUQUJMRQovLyBDaGVjayBhcHAgaXMgdXBkYXRhYmxlCmFzc2VydApyZXRzdWIKCi8vIGRlbGV0ZQpkZWxldGVfMToKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKcHVzaGludCBUTVBMX0RFTEVUQUJMRSAvLyBUTVBMX0RFTEVUQUJMRQovLyBDaGVjayBhcHAgaXMgZGVsZXRhYmxlCmFzc2VydApyZXRzdWIKCi8vIGhlbGxvCmhlbGxvXzI6CnByb3RvIDEgMQpwdXNoYnl0ZXMgMHggLy8gIiIKcHVzaGJ5dGVzIDB4NDg2NTZjNmM2ZjJjMjAgLy8gIkhlbGxvLCAiCmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyAwCmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBoZWxsb193b3JsZF9jaGVjawpoZWxsb3dvcmxkY2hlY2tfMzoKcHJvdG8gMSAwCmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApwdXNoYnl0ZXMgMHg1NzZmNzI2YzY0IC8vICJXb3JsZCIKPT0KYXNzZXJ0CnJldHN1Yg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"},"bareActions":{"create":["NoOp"],"call":["DeleteApplication","UpdateApplication"]}}

/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}
/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * Defines the types of available calls and state of the HelloWorldApp smart contract.
 */
export type HelloWorldAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
    & Record<'hello_world_check(string)void' | 'hello_world_check', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures.
 */
export type HelloWorldAppSignatures = keyof HelloWorldAppTypes['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TSignature extends HelloWorldAppSignatures> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    { args: Expand<MethodArgs<TSignature>> }
>
/**
 * Maps a method signature from the HelloWorldApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends HelloWorldAppSignatures> = HelloWorldAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the HelloWorldApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends HelloWorldAppSignatures> = HelloWorldAppTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type HelloWorldAppCreateCallParams =
  | (AppClientBareCallParams & {onComplete?: OnApplicationComplete.NoOpOC})
/**
 * Defines supported update method params for this smart contract
 */
export type HelloWorldAppUpdateCallParams =
  | AppClientBareCallParams
/**
 * Defines supported delete method params for this smart contract
 */
export type HelloWorldAppDeleteCallParams =
  | AppClientBareCallParams
/**
 * Defines arguments required for the deploy method.
 */
export type HelloWorldAppDeployParams = Expand<AppFactoryDeployParams & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment
   */
  createParams?: HelloWorldAppCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment
   */
  updateParams?: HelloWorldAppUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment
   */
  deleteParams?: HelloWorldAppDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for all known smart contract calls to HelloWorldApp
 */
export abstract class HelloWorldAppParamsFactory {
  /**
   * Gets available create param factories
   */
  static get create() {
    return {
      /**
       * Constructs create params for the HelloWorldApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns An `AppClientBareCallParams` object for the call
       */
      bare(params: AppClientBareCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientBareCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update param factories
   */
  static get update() {
    return {
      /**
       * Constructs update params for the HelloWorldApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns An `AppClientBareCallParams` object for the call
       */
      bare(params: AppClientBareCallParams & AppClientCompilationParams): AppClientBareCallParams & AppClientCompilationParams {
        return {
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete param factories
   */
  static get delete() {
    return {
      /**
       * Constructs delete params for the HelloWorldApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns An `AppClientBareCallParams` object for the call
       */
      bare(params: AppClientBareCallParams): AppClientBareCallParams {
        return {
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Returns Hello, {name}
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<'hello(string)string'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the hello_world_check(string)void ABI method
   *
   * Asserts {name} is "World"
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello_world_check(params: CallParams<'hello_world_check(string)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello_world_check(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A client to make calls to the HelloWorldApp smart contract
 */
export class HelloWorldAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: AppClient

  /**
   * Creates a new instance of `HelloWorldAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Expand<Omit<AppClientParams, 'appSpec'>>) {
    this.appClient = new AppClient({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends SendAppTransactionResult = SendAppTransactionResult>(
    result: SendAppTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): Expand<Omit<TResult, 'return'> & AppReturn<TReturn>> {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined)
    return { ...result, return: returnValue } as TResult & AppReturn<TReturn>
  }

  /**
   * Get parameters to define transactions to the current app
   */
  readonly params = (($this) => {
    return {
      /**
       * Gets available update methods
       */
      get update() {
        return {
          /**
           * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
           *
           * @param params The params for the bare (non-ABI) call
           * @returns The update result
           */
          bare(params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) {
            return $this.appClient.params.bare.update(params)
          },
        }
      },

      /**
       * Gets available delete methods
       */
      get delete() {
        return {
          /**
           * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
           *
           * @param params The params for the bare (non-ABI) call
           * @returns The delete result
           */
          bare(params?: Expand<AppClientBareCallParams>) {
            return $this.appClient.params.bare.delete(params)
          },
        }
      },

      /**
       * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams>) {
        return $this.appClient.params.bare.clearState(params)
      },

      /**
       * Makes a call to the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The call result
       */
      bare(params?: Expand<AppClientBareCallParams & {onComplete: OnApplicationComplete.DeleteApplicationOC | OnApplicationComplete.UpdateApplicationOC}>) {
        return $this.appClient.params.bare.call(params)
      },

      /**
       * Makes a call to the HelloWorldApp smart contract using the hello(string)string ABI method.
       *
       * Returns Hello, {name}
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async hello(params: Expand<CallParams<'hello(string)string'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(HelloWorldAppParamsFactory.hello(params))
      },
      /**
       * Makes a call to the HelloWorldApp smart contract using the hello_world_check(string)void ABI method.
       *
       * Asserts {name} is "World"
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async hello_world_check(params: Expand<CallParams<'hello_world_check(string)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(HelloWorldAppParamsFactory.hello_world_check(params))
      },
    }
  })(this)

  /**
   * Get parameters to define transactions to the current app
   */
  readonly transactions = (($this) => {
    return {
      /**
       * Gets available update methods
       */
      get update() {
        return {
          /**
           * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
           *
           * @param params The params for the bare (non-ABI) call
           * @returns The update result
           */
          bare(params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) {
            return $this.appClient.transactions.bare.update(params)
          },
        }
      },

      /**
       * Gets available delete methods
       */
      get delete() {
        return {
          /**
           * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
           *
           * @param params The params for the bare (non-ABI) call
           * @returns The delete result
           */
          bare(params?: Expand<AppClientBareCallParams>) {
            return $this.appClient.transactions.bare.delete(params)
          },
        }
      },

      /**
       * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams>) {
        return $this.appClient.transactions.bare.clearState(params)
      },

      /**
       * Makes a call to the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The call result
       */
      bare(params?: Expand<AppClientBareCallParams & {onComplete: OnApplicationComplete.DeleteApplicationOC | OnApplicationComplete.UpdateApplicationOC}>) {
        return $this.appClient.transactions.bare.call(params)
      },

      /**
       * Makes a call to the HelloWorldApp smart contract using the hello(string)string ABI method.
       *
       * Returns Hello, {name}
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async hello(params: Expand<CallParams<'hello(string)string'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.transactions.call(HelloWorldAppParamsFactory.hello(params))
      },
      /**
       * Makes a call to the HelloWorldApp smart contract using the hello_world_check(string)void ABI method.
       *
       * Asserts {name} is "World"
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async hello_world_check(params: Expand<CallParams<'hello_world_check(string)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.transactions.call(HelloWorldAppParamsFactory.hello_world_check(params))
      },
    }
  })(this)

  /**
   * Send calls to the current app
   */
  readonly send = (($this) => {
    return {
      /**
       * Gets available update methods
       */
      get update() {
        return {
          /**
           * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
           *
           * @param params The params for the bare (non-ABI) call
           * @returns The update result
           */
          bare(params?: Expand<AppClientBareCallParams & AppClientCompilationParams & ExecuteParams>) {
            return $this.appClient.send.bare.update(params)
          },
        }
      },

      /**
       * Gets available delete methods
       */
      get delete() {
        return {
          /**
           * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
           *
           * @param params The params for the bare (non-ABI) call
           * @returns The delete result
           */
          bare(params?: Expand<AppClientBareCallParams & ExecuteParams>) {
            return $this.appClient.send.bare.delete(params)
          },
        }
      },

      /**
       * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams & ExecuteParams>) {
        return $this.appClient.send.bare.clearState(params)
      },

      /**
       * Makes a call to the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The call result
       */
      bare(params?: Expand<AppClientBareCallParams & ExecuteParams & {onComplete: OnApplicationComplete.DeleteApplicationOC | OnApplicationComplete.UpdateApplicationOC}>) {
        return $this.appClient.send.bare.call(params)
      },

      /**
       * Makes a call to the HelloWorldApp smart contract using the hello(string)string ABI method.
       *
       * Returns Hello, {name}
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async hello(params: Expand<CallParams<'hello(string)string'> & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.mapReturnValue<MethodReturn<'hello(string)string'>>(
          await $this.appClient.send.call(HelloWorldAppParamsFactory.hello(params))
        )
      },
      /**
       * Makes a call to the HelloWorldApp smart contract using the hello_world_check(string)void ABI method.
       *
       * Asserts {name} is "World"
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async hello_world_check(params: Expand<CallParams<'hello_world_check(string)void'> & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.mapReturnValue<MethodReturn<'hello_world_check(string)void'>>(
          await $this.appClient.send.call(HelloWorldAppParamsFactory.hello_world_check(params))
        )
      },
    }
  })(this)

  // todo: state values
  public compose(): HelloWorldAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      hello_world_check(args: MethodArgs<'hello_world_check(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello_world_check(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as HelloWorldAppComposer
  }
}
export type HelloWorldAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * Returns Hello, {name}
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): HelloWorldAppComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Calls the hello_world_check(string)void ABI method.
   *
   * Asserts {name} is "World"
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello_world_check(args: MethodArgs<'hello_world_check(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): HelloWorldAppComposer<[...TReturns, MethodReturn<'hello_world_check(string)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): HelloWorldAppComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): HelloWorldAppComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): HelloWorldAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): HelloWorldAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<HelloWorldAppComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<HelloWorldAppComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type HelloWorldAppComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type HelloWorldAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
